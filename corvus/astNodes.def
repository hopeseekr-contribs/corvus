/* ***** BEGIN LICENSE BLOCK *****
;;
;; Copyright (c) 2009-2010 Shannon Weyrick <weyrick@mozek.us>
;; Copyright (c) 2010 Cornelius Riemenschneider <c.r1@gmx.de>
;;
;; This Source Code Form is subject to the terms of the Mozilla Public
;; License, v. 2.0. If a copy of the MPL was not distributed with this
;; file, You can obtain one at http://mozilla.org/MPL/2.0/.
   ***** END LICENSE BLOCK *****
*/

// This is another trick from the clang handbook for defining the AST nodes and order consistently
#ifndef EXPR
#  define EXPR(Type, Base) STMT(Type, Base)
#endif

STMT(block,        stmt)
STMT(emptyStmt,    stmt)
STMT(ifStmt,       stmt)
STMT(returnStmt,   stmt)
STMT(breakStmt,    stmt)
STMT(continueStmt, stmt)
STMT(doStmt,       stmt)
STMT(whileStmt,    stmt)
STMT(forStmt,      stmt)
STMT(forEach,      stmt)
STMT(switchCase,   stmt)
STMT(switchStmt,   stmt)
STMT(catchStmt,    stmt)
STMT(tryStmt,      stmt)

// decl (see decl::first and last kind constants)
// FIRST DECL
STMT(useDecl,         decl)
STMT(globalDecl,      decl)
STMT(formalParam,     decl)
STMT(namespaceDecl,   decl)
STMT(useIdent,        decl)
STMT(signature,       decl)
STMT(staticDecl,      decl)
STMT(classDecl,       decl)
STMT(methodDecl,      decl)
STMT(propertyDecl,    decl)
STMT(functionDecl,    decl)
// LAST DECL

// expr (see expr::first and last kind constants)
// FIRST EXPR
EXPR(assignment,     expr)
EXPR(builtin,        expr)
EXPR(opAssignment,   expr)
EXPR(listAssignment, expr)
EXPR(literalID,      expr)
EXPR(dynamicID,      expr)
EXPR(var,            expr)
EXPR(functionInvoke, expr)
EXPR(typeCast,       expr)
EXPR(binaryOp,       expr)
EXPR(preOp,          expr)
EXPR(postOp,         expr)
EXPR(conditionalExpr,expr)
EXPR(lambda,         expr)
EXPR(unaryOp,        expr)

// literal (see literalExpr::first and last kind constants)
// FIRST LITERALEXPR
EXPR(literalString, expr)
EXPR(literalInt,    expr)
EXPR(literalFloat,  expr)
EXPR(literalNull,   expr)
EXPR(literalBool,   expr)
EXPR(literalArray,  expr)
EXPR(literalConstant, expr)
EXPR(inlineHtml,    expr)
// LAST LITERALEXPR
// LAST EXPR

#undef STMT
