/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 22 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
   

#include "rphp/pSourceTypes.h"
#include "rphp/analysis/pAST.h"
#include "rphp/analysis/pSourceModule.h"

#include <iostream>
#include <string>
#include <cctype> // for toupper
#include <algorithm>
#include <unicode/unistr.h>

using namespace rphp;

#define CTXT          pMod->context()
#define TOKEN_LINE(T) CTXT.getTokenLine(T)
#define CURRENT_LINE  CTXT.currentLineNum()

AST::literalExpr* extractLiteralString(pSourceRange* B, pSourceModule* pMod, bool isSimple) {
  // binary specifier?
  bool binaryString = false;
  pSourceCharIterator start;
  if ( *(*B).begin() == 'b') {
      // binary
      binaryString = true;
      start = ++(*B).begin();
  }
  else {
      // according to module default
      start = (*B).begin();
  }
  // substring out the quotes, special case for empty string
  AST::literalString* A;
  if (++start == (*B).end()) {
    A = new (CTXT) AST::literalString(binaryString);
  }
  else {
    A = new (CTXT) AST::literalString(pSourceRange(start, --(*B).end()), binaryString);
  }
  A->setIsSimple(isSimple);
  return A;
}

#line 52 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    rphpParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is rphpParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    rphpParseARG_SDECL     A static variable declaration for the %extra_argument
**    rphpParseARG_PDECL     A parameter declaration for the %extra_argument
**    rphpParseARG_STORE     Code to store %extra_argument into yypParser
**    rphpParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 240
#define YYACTIONTYPE unsigned short int
#define rphpParseTOKENTYPE pSourceRange*
typedef union {
  int yyinit;
  rphpParseTOKENTYPE yy0;
  AST::doStmt* yy10;
  AST::statementList* yy16;
  AST::formalParamList* yy17;
  AST::builtin* yy38;
  AST::postOp* yy44;
  AST::switchStmt* yy45;
  AST::unaryOp* yy57;
  AST::whileStmt* yy70;
  AST::continueStmt* yy106;
  AST::ifStmt* yy112;
  AST::listAssignment* yy116;
  AST::expr* yy136;
  AST::signature* yy173;
  AST::inlineHtml* yy175;
  AST::assignment* yy178;
  const pUInt* yy202;
  AST::opAssignment* yy209;
  AST::forStmt* yy210;
  AST::conditionalExpr* yy220;
  int yy230;
  AST::var* yy250;
  AST::staticDecl* yy253;
  AST::arrayList* yy256;
  AST::returnStmt* yy259;
  AST::preOp* yy289;
  AST::typeCast* yy306;
  AST::forEach* yy327;
  AST::tryStmt* yy336;
  AST::globalDecl* yy337;
  AST::classDecl* yy341;
  AST::block* yy360;
  AST::functionDecl* yy361;
  AST::breakStmt* yy366;
  AST::expressionList* yy371;
  pUInt* yy373;
  AST::sourceRangeList* yy379;
  AST::literalExpr* yy387;
  AST::formalParam* yy397;
  AST::catchStmt* yy408;
  AST::functionInvoke* yy415;
  AST::binaryOp* yy461;
  AST::stmt* yy477;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define rphpParseARG_SDECL pSourceModule* pMod;
#define rphpParseARG_PDECL ,pSourceModule* pMod
#define rphpParseARG_FETCH pSourceModule* pMod = yypParser->pMod
#define rphpParseARG_STORE yypParser->pMod = pMod
#define YYNSTATE 562
#define YYNRULE 296
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   562,  187,   36,  158,   35,  167,  187,  425,  482,  417,
 /*    10 */   157,  125,  859,    1,  495,  337,  295,  417,  157,  299,
 /*    20 */   294,    4,  377,  442,   53,   52,   47,   49,   51,   79,
 /*    30 */   276,  149,  162,  290,  358,  460,  292,  293,  423,  351,
 /*    40 */   491,  330,  126,  331,  117,  163,  101,  426,  417,  157,
 /*    50 */   427,  429,  306,  428,  294,  294,  532,   46,   48,   42,
 /*    60 */    44,  553,  109,  304,  461,  165,  122,  123,  289,   78,
 /*    70 */    77,  346,  282,  347,  338,  158,  308,  102,  103,  480,
 /*    80 */    40,  169,  303,  100,  174,  154,   50,  638,  325,  124,
 /*    90 */   507,  302,  417,  157,  427,  301,  173,  428,  294,  141,
 /*   100 */   324,  517,  530,   68,   67,   69,   71,   70,   72,   73,
 /*   110 */    74,   75,  518,  448,  449,  453,  450,  452,  451,  523,
 /*   120 */    80,  509,  510,   38,  370,  158,  439,  440,  531,  425,
 /*   130 */   127,  367,  364,  488,   26,  158,  329,    7,  532,  425,
 /*   140 */   441,  443,  444,  445,  446,  447,   35,  494,  187,  489,
 /*   150 */   542,  346,  282,  519,  186,  127,  495,  337,  341,  158,
 /*   160 */   158,  299,  294,  425,  425,  442,  536,  538,  537,  506,
 /*   170 */   132,   79,  276,  149,  162,  290,  188,  420,  292,  293,
 /*   180 */   305,  351,  535,  330,  533,  331,  561,  560,  101,  426,
 /*   190 */   417,  157,  427,  429,  306,  428,  539,  359,  418,   46,
 /*   200 */    48,   42,   44,  158,   97,  456,   33,  425,  122,  123,
 /*   210 */   289,   78,   77,  346,  282,  350,  338,  273,  274,  102,
 /*   220 */   103,  505,   40,  169,  303,  100,  174,  154,   50,  424,
 /*   230 */   417,  157,  511,  302,  417,  157,  427,  301,  109,  428,
 /*   240 */   297,  165,  279,  540,  541,   68,   67,   69,   71,   70,
 /*   250 */    72,   73,   74,   75,  490,  448,  449,  453,  450,  452,
 /*   260 */   451,  547,   80,  509,  510,   38,  370,  158,  439,  440,
 /*   270 */   175,  425,  127,  367,  364,  488,   26,  158,  329,    7,
 /*   280 */   348,  425,  441,  443,  444,  445,  446,  447,   35,  342,
 /*   290 */   187,  550,  542,  558,  559,   47,   49,   51,  495,  337,
 /*   300 */   151,  554,  109,  299,  159,  165,  152,  442,  536,  538,
 /*   310 */   537,  126,  855,   79,  276,  149,  162,  290,    5,  420,
 /*   320 */   292,  293,  413,  351,   19,  330,  193,  331,  524,  178,
 /*   330 */   101,  284,  285,  119,  156,  543,  306,  414,  539,  359,
 /*   340 */   344,   46,   48,   42,   44,  158,  317,  456,  298,  425,
 /*   350 */   122,  123,  289,   78,   77,  499,  496,  171,  338,  275,
 /*   360 */   551,  102,  103,   31,   40,  169,  303,  100,  174,  154,
 /*   370 */    50,  166,  483,  143,  512,  302,  417,  157,  427,  301,
 /*   380 */   469,  428,   96,  187,   28,  540,  541,   68,   67,   69,
 /*   390 */    71,   70,   72,   73,   74,   75,  552,  448,  449,  453,
 /*   400 */   450,  452,  451,  170,   80,  509,  510,   38,  370,  158,
 /*   410 */   439,  440,  148,  425,  127,  367,  364,  488,   26,  158,
 /*   420 */   329,    7,  497,  425,  441,  443,  444,  445,  446,  447,
 /*   430 */   515,  378,  379,  380,  381,  382,  383,  384,  385,  386,
 /*   440 */   387,  388,  389,  286,  287,  288,  196,  319,  320,  321,
 /*   450 */   322,  158,  498,  158,  343,  425,  353,  425,  257,  830,
 /*   460 */   356,  509,  510,  194,  415,  109,  439,  440,  165,  121,
 /*   470 */   269,  419,  514,  307,  465,  516,  121,  830,  114,  114,
 /*   480 */   281,  522,  408,  394,  395,  396,  256,  397,  398,  399,
 /*   490 */   400,  401,  402,  403,  404,  405,  406,  409,  363,  177,
 /*   500 */   439,  440,  179,  830,  830,  303,  509,  510,  154,  352,
 /*   510 */   355,  439,  440,  361,  302,  417,  157,  427,  301,  283,
 /*   520 */   428,  545,  181,  185,  366,  830,  830,  183,  830,  830,
 /*   530 */   830,  830,  830,  830,  830,  830,  830,  150,  379,  380,
 /*   540 */   381,  382,  383,  384,  385,  386,  387,  388,  389,  286,
 /*   550 */   287,  288,  196,  319,  320,  321,  322,  369,  371,  372,
 /*   560 */   195,  271,    2,    9,  257,   10,  270,  128,  129,  130,
 /*   570 */   131,  272,  390,  391,  392,  536,  538,  537,   27,  525,
 /*   580 */   120,  526,  412,  528,  115,  116,   20,  142,  408,  394,
 /*   590 */   395,  396,  256,  397,  398,  399,  400,  401,  402,  403,
 /*   600 */   404,  405,  406,  409,  126,  539,  439,  440,  147,   21,
 /*   610 */    15,  303,  509,  510,  154,  857,   23,  439,  440,   24,
 /*   620 */   302,  417,  157,  427,  301,  830,  428,   25,  111,   81,
 /*   630 */   527,  112,  500,  379,  380,  381,  382,  383,  384,  385,
 /*   640 */   386,  387,  388,  389,  286,  287,  288,  196,  319,  320,
 /*   650 */   321,  322,  540,  541,  466,  467,  661,  468,  470,  257,
 /*   660 */    30,  509,  510,  472,  473,  481,  439,  440,  484,  485,
 /*   670 */   486,  487,   99,  160,  326,  327,  529,  328,  172,  104,
 /*   680 */   105,   16,   17,  408,  394,  395,  396,  256,  397,  398,
 /*   690 */   399,  400,  401,  402,  403,  404,  405,  406,  409,   18,
 /*   700 */     6,  439,  440,  336,  458,  459,  303,  509,  510,  154,
 /*   710 */   106,  107,  439,  440,  108,  302,  417,  157,  427,  301,
 /*   720 */   340,  428,  508,  513,  144,  135,   88,   89,  345,   92,
 /*   730 */    91,   84,   83,   82,   90,   85,   86,   87,  501,  379,
 /*   740 */   380,  381,  382,  383,  384,  385,  386,  387,  388,  389,
 /*   750 */   286,  287,  288,  196,  319,  320,  321,  322,  136,  145,
 /*   760 */   520,  349,  146,  176,  521,  257,  189,  354,  137,  138,
 /*   770 */   357,  164,  139,  360,  534,  140,  362,  365,  544,  190,
 /*   780 */   368,  546,  180,  191,  182,  192,  184,   11,   12,  408,
 /*   790 */   394,  395,  396,  256,  397,  398,  399,  400,  401,  402,
 /*   800 */   403,  404,  405,  406,  409,  509,  510,  439,  440,   13,
 /*   810 */   439,  440,  303,  110,  860,  154,  860,  860,  860,  860,
 /*   820 */   860,  302,  417,  157,  427,  301,  860,  428,  860,  860,
 /*   830 */   860,  860,  860,  502,  379,  380,  381,  382,  383,  384,
 /*   840 */   385,  386,  387,  388,  389,  286,  287,  288,  196,  319,
 /*   850 */   320,  321,  322,  860,  860,  860,  860,  860,  860,  860,
 /*   860 */   257,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*   870 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*   880 */   860,  860,  860,  860,  408,  394,  395,  396,  256,  397,
 /*   890 */   398,  399,  400,  401,  402,  403,  404,  405,  406,  409,
 /*   900 */   860,  860,  439,  440,  860,  860,  860,  303,  860,  860,
 /*   910 */   154,  860,  860,  860,  860,  860,  302,  417,  157,  427,
 /*   920 */   301,  860,  428,  860,  860,  860,  860,  860,  860,  860,
 /*   930 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  335,
 /*   940 */   379,  380,  381,  382,  383,  384,  385,  386,  387,  388,
 /*   950 */   389,  286,  287,  288,  196,  319,  320,  321,  322,  860,
 /*   960 */   860,  860,  860,  860,  860,  860,  257,  860,  860,  860,
 /*   970 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*   980 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*   990 */   408,  394,  395,  396,  256,  397,  398,  399,  400,  401,
 /*  1000 */   402,  403,  404,  405,  406,  409,  860,  860,  439,  440,
 /*  1010 */   860,  860,  860,  303,  860,  860,  154,  860,  860,  860,
 /*  1020 */   860,  860,  302,  417,  157,  427,  301,  860,  428,  860,
 /*  1030 */   860,  860,  860,  860,  504,  379,  380,  381,  382,  383,
 /*  1040 */   384,  385,  386,  387,  388,  389,  286,  287,  288,  196,
 /*  1050 */   319,  320,  321,  322,  860,  860,  860,  860,  860,  860,
 /*  1060 */   860,  257,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  1070 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  1080 */   860,  860,  860,  860,  860,  408,  394,  395,  396,  256,
 /*  1090 */   397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
 /*  1100 */   409,  860,  860,  439,  440,  860,  860,  860,  303,  860,
 /*  1110 */   860,  154,  860,  860,  860,  860,  860,  302,  417,  157,
 /*  1120 */   427,  301,  860,  428,  860,  860,  860,  860,  860,  860,
 /*  1130 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  1140 */   555,  379,  380,  381,  382,  383,  384,  385,  386,  387,
 /*  1150 */   388,  389,  286,  287,  288,  196,  319,  320,  321,  322,
 /*  1160 */   860,  860,  860,  860,  860,  860,  860,  257,  860,  860,
 /*  1170 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  1180 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  1190 */   860,  408,  394,  395,  396,  256,  397,  398,  399,  400,
 /*  1200 */   401,  402,  403,  404,  405,  406,  409,  860,  860,  439,
 /*  1210 */   440,  860,  860,  860,  303,  860,  860,  154,  860,  860,
 /*  1220 */   860,  860,  860,  302,  417,  157,  427,  301,  860,  428,
 /*  1230 */   860,  860,  860,  860,  860,  556,  379,  380,  381,  382,
 /*  1240 */   383,  384,  385,  386,  387,  388,  389,  286,  287,  288,
 /*  1250 */   196,  319,  320,  321,  322,  860,  860,  860,  860,  860,
 /*  1260 */   860,  860,  257,  860,  860,  860,  860,  860,  860,  860,
 /*  1270 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  1280 */   860,  860,  860,  860,  860,  860,  408,  394,  395,  396,
 /*  1290 */   256,  397,  398,  399,  400,  401,  402,  403,  404,  405,
 /*  1300 */   406,  409,  860,  860,  439,  440,  860,  860,  860,  303,
 /*  1310 */   860,  860,  154,  860,  860,  860,  860,  860,  302,  417,
 /*  1320 */   157,  427,  301,  860,  428,  860,  860,  860,  860,  860,
 /*  1330 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  1340 */   860,  557,  379,  380,  381,  382,  383,  384,  385,  386,
 /*  1350 */   387,  388,  389,  286,  287,  288,  196,  319,  320,  321,
 /*  1360 */   322,  860,  860,  860,  860,  860,  860,  860,  257,  860,
 /*  1370 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  1380 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  1390 */   860,  860,  408,  394,  395,  396,  256,  397,  398,  399,
 /*  1400 */   400,  401,  402,  403,  404,  405,  406,  409,  860,  860,
 /*  1410 */   439,  440,  860,  860,  860,  303,  860,  860,  154,  860,
 /*  1420 */   860,  860,  860,  860,  302,  417,  157,  427,  301,  860,
 /*  1430 */   428,  860,  860,  860,  860,  860,  153,  379,  380,  381,
 /*  1440 */   382,  383,  384,  385,  386,  387,  388,  389,  286,  287,
 /*  1450 */   288,  196,  319,  320,  321,  322,  860,  299,  860,  860,
 /*  1460 */   860,  442,  860,  257,  860,  860,  860,  860,  339,  860,
 /*  1470 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  1480 */   860,  860,  860,  860,  860,  860,  860,  408,  394,  395,
 /*  1490 */   396,  256,  397,  398,  399,  400,  401,  402,  403,  404,
 /*  1500 */   405,  406,  409,  860,  860,  439,  440,  134,  133,  860,
 /*  1510 */   303,   35,  860,  154,  860,  860,  860,  860,  860,  302,
 /*  1520 */   417,  157,  427,  301,  860,  428,  299,  860,   95,  860,
 /*  1530 */   442,  860,  860,   58,   59,  860,   79,  276,  860,  860,
 /*  1540 */   290,  860,  860,  292,  293,  860,   36,   54,   55,   56,
 /*  1550 */    57,  448,  449,  453,  450,  452,  451,  860,  860,  306,
 /*  1560 */    60,   61,  860,  860,   46,   48,   42,   44,   53,   52,
 /*  1570 */    47,   49,   51,  122,  123,  289,   78,   77,  441,  443,
 /*  1580 */   444,  445,  446,  447,  860,  860,  126,   40,  860,  860,
 /*  1590 */   860,  860,  860,   50,  860,  860,  860,  860,  860,   66,
 /*  1600 */    65,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  1610 */    68,   67,   69,   71,   70,   72,   73,   74,   75,  860,
 /*  1620 */   448,  449,  453,  450,  452,  451,  860,   80,  860,  860,
 /*  1630 */    38,  860,  860,  860,  860,  860,  860,  127,  860,  860,
 /*  1640 */   860,  860,  158,  860,  860,  860,  425,  441,  443,  444,
 /*  1650 */   445,  446,  447,   35,  410,  860,  860,  860,  860,  860,
 /*  1660 */   860,  860,  860,  860,  860,  860,  860,  860,  299,  860,
 /*  1670 */   860,  860,  442,   36,   54,   55,   56,   57,   79,  276,
 /*  1680 */   860,  860,  290,  860,  463,  292,  293,  860,  860,  860,
 /*  1690 */   860,  860,  860,  860,  860,   53,   52,   47,   49,   51,
 /*  1700 */   860,  306,  860,  860,  860,  860,   46,   48,   42,   44,
 /*  1710 */   860,  860,  456,  126,  860,  122,  123,  289,   78,   77,
 /*  1720 */   860,  860,  860,  860,  860,  860,   66,   65,  860,   40,
 /*  1730 */   860,  303,  277,  464,  154,   50,  860,  860,  860,  860,
 /*  1740 */   302,  417,  157,  427,  301,  860,  428,  860,  860,  463,
 /*  1750 */   860,  860,   68,   67,   69,   71,   70,   72,   73,   74,
 /*  1760 */    75,  860,  448,  449,  453,  450,  452,  451,  860,   80,
 /*  1770 */   860,  860,   38,  860,  860,  860,  463,  456,  860,  127,
 /*  1780 */   860,  860,  860,  860,  158,  860,  860,  860,  425,  441,
 /*  1790 */   443,  444,  445,  446,  447,   35,  303,  278,  464,  154,
 /*  1800 */   475,  860,  860,  860,  456,  302,  417,  157,  427,  301,
 /*  1810 */   299,  428,  860,  860,  442,  548,  860,  860,  860,  860,
 /*  1820 */    79,  276,  860,  303,  290,  462,  154,  292,  293,  860,
 /*  1830 */   860,  860,  302,  417,  157,  427,  301,  860,  428,  860,
 /*  1840 */   860,  860,  860,  306,  860,  860,  542,  860,   46,   48,
 /*  1850 */    42,   44,  860,  860,  860,  860,  860,  122,  123,  289,
 /*  1860 */    78,   77,  536,  538,  537,  860,  860,  860,  860,  860,
 /*  1870 */   860,   40,  860,  860,  860,  860,  860,   50,  860,  860,
 /*  1880 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  1890 */   860,  860,  539,  359,   68,   67,   69,   71,   70,   72,
 /*  1900 */    73,   74,   75,  860,  448,  449,  453,  450,  452,  451,
 /*  1910 */   860,   80,  860,  860,   38,  860,  860,  860,  493,  860,
 /*  1920 */   860,  127,  860,  860,  860,  860,  158,  860,  860,  860,
 /*  1930 */   425,  441,  443,  444,  445,  446,  447,   35,  860,  540,
 /*  1940 */   541,  860,  860,  860,  860,  860,  456,  860,  860,  860,
 /*  1950 */   860,  860,  299,  860,   76,  860,  442,  492,  860,  860,
 /*  1960 */   860,  860,   79,  276,  860,  303,  290,  860,  154,  292,
 /*  1970 */   293,  860,  860,  860,  302,  417,  157,  427,  301,  860,
 /*  1980 */   428,  860,  860,  860,  860,  306,  860,  860,  860,  860,
 /*  1990 */    46,   48,   42,   44,  860,  860,  860,  860,  860,  122,
 /*  2000 */   123,  289,   78,   77,  860,  860,  860,  860,  860,  860,
 /*  2010 */   860,  860,  860,   40,  860,  860,  860,  860,  860,   50,
 /*  2020 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  2030 */   860,  860,  860,  860,  860,  860,   68,   67,   69,   71,
 /*  2040 */    70,   72,   73,   74,   75,  860,  448,  449,  453,  450,
 /*  2050 */   452,  451,  549,   80,  860,  860,   38,  860,  860,  860,
 /*  2060 */   860,  860,  860,  127,  860,  860,  860,  860,  158,  860,
 /*  2070 */   860,  860,  425,  441,  443,  444,  445,  446,  447,   35,
 /*  2080 */   860,  860,  860,  542,  860,  860,  860,  860,  860,  860,
 /*  2090 */   860,  860,  860,  860,  299,  860,  113,  860,  442,  536,
 /*  2100 */   538,  537,  860,  860,   79,  276,  860,  860,  290,  860,
 /*  2110 */   280,  292,  293,  860,  860,  860,  860,  860,  860,  860,
 /*  2120 */   860,  860,  860,  860,  860,  860,  860,  306,  860,  539,
 /*  2130 */   359,  860,   46,   48,   42,   44,  860,  860,  456,  860,
 /*  2140 */   860,  122,  123,  289,   78,   77,  860,  860,  860,  860,
 /*  2150 */   860,  860,  860,  860,  860,   40,  860,  303,  860,  860,
 /*  2160 */   154,   50,  860,  860,  860,  860,  302,  417,  157,  427,
 /*  2170 */   301,  860,  428,  860,  860,  860,  540,  541,   68,   67,
 /*  2180 */    69,   71,   70,   72,   73,   74,   75,  860,  448,  449,
 /*  2190 */   453,  450,  452,  451,  860,   80,  860,  860,   38,  860,
 /*  2200 */   860,  860,  860,  860,  860,  127,  860,  860,  860,  860,
 /*  2210 */   158,  860,  860,  860,  425,  441,  443,  444,  445,  446,
 /*  2220 */   447,   35,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  2230 */   860,  860,  860,  860,  860,  860,  299,  860,   94,  860,
 /*  2240 */   442,  860,  860,  860,  860,  860,   79,  276,  860,  860,
 /*  2250 */   290,  860,  374,  292,  293,  860,  860,  860,  860,  860,
 /*  2260 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  306,
 /*  2270 */   860,  860,  860,  860,   46,   48,   42,   44,  860,  860,
 /*  2280 */   456,  860,  860,  122,  123,  289,   78,   77,  860,  860,
 /*  2290 */   860,  860,  860,  860,  860,  860,  860,   40,  860,  303,
 /*  2300 */   860,  860,  154,   50,  860,  860,  860,  860,  302,  417,
 /*  2310 */   157,  427,  301,  860,  428,  860,  860,  860,  860,  860,
 /*  2320 */    68,   67,   69,   71,   70,   72,   73,   74,   75,  860,
 /*  2330 */   448,  449,  453,  450,  452,  451,  860,   80,  860,  860,
 /*  2340 */    38,  860,  860,  291,  860,  860,  860,  127,  860,  860,
 /*  2350 */   860,  860,  158,  860,  860,  860,  425,  441,  443,  444,
 /*  2360 */   445,  446,  447,   35,  860,  860,  860,  860,  860,  860,
 /*  2370 */   860,  456,  860,  860,  860,  860,  860,  860,  299,  860,
 /*  2380 */    93,  860,  442,  860,  860,  860,  860,  860,   79,  276,
 /*  2390 */   303,  860,  290,  154,  416,  292,  293,  860,  860,  302,
 /*  2400 */   417,  157,  427,  301,  860,  428,  860,  860,  860,  860,
 /*  2410 */   860,  306,  860,  860,  860,  860,   46,   48,   42,   44,
 /*  2420 */   860,  860,  456,  860,  860,  122,  123,  289,   78,   77,
 /*  2430 */   860,  860,  860,  860,  860,  860,  860,  860,  860,   40,
 /*  2440 */   860,  303,  860,  860,  154,   50,  860,  860,  860,  860,
 /*  2450 */   302,  417,  157,  427,  301,  860,  428,  860,  860,  860,
 /*  2460 */   860,  860,   68,   67,   69,   71,   70,   72,   73,   74,
 /*  2470 */    75,  860,  448,  449,  453,  450,  452,  451,  860,   80,
 /*  2480 */   860,  860,   38,  860,  860,  455,  860,  860,  860,  127,
 /*  2490 */   860,  860,  860,  860,  158,  860,  860,  860,  425,  441,
 /*  2500 */   443,  444,  445,  446,  447,   35,  860,  860,  860,  860,
 /*  2510 */   478,  860,  860,  456,  860,  860,  860,  860,  860,  860,
 /*  2520 */   299,  860,  860,  860,  442,  860,  860,  860,  860,  860,
 /*  2530 */    79,  276,  303,  860,  290,  154,  457,  292,  293,  860,
 /*  2540 */   860,  302,  417,  157,  427,  301,  860,  428,  860,  860,
 /*  2550 */   860,  860,  860,  306,  860,  860,  860,  860,   46,   48,
 /*  2560 */    42,   44,  860,  860,  456,  860,  860,  122,  123,  289,
 /*  2570 */    78,   77,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  2580 */   860,   40,  860,  303,  860,  860,  154,   50,  860,  860,
 /*  2590 */   860,  860,  302,  417,  157,  427,  301,  860,  428,  860,
 /*  2600 */   860,  860,  860,  860,   68,   67,   69,   71,   70,   72,
 /*  2610 */    73,   74,   75,  860,  448,  449,  453,  450,  452,  451,
 /*  2620 */   860,   80,  860,  860,   38,  860,  860,  375,  860,  860,
 /*  2630 */   860,  127,  860,  860,  860,  860,  158,  860,  860,  860,
 /*  2640 */   425,  441,  443,  444,  445,  446,  447,   35,  860,  860,
 /*  2650 */   860,  860,  860,  860,  860,  456,  860,  860,  860,  860,
 /*  2660 */   860,  860,  299,  860,  860,  860,  442,  860,  860,  860,
 /*  2670 */   860,  860,   79,  276,  303,  860,  290,  154,  376,  292,
 /*  2680 */   293,  860,  860,  302,  417,  157,  427,  301,  860,  428,
 /*  2690 */   860,  860,  860,  860,  860,  306,  860,  860,  860,  860,
 /*  2700 */    46,   48,   42,   44,  860,  860,  456,  860,  860,  122,
 /*  2710 */   123,  289,   78,   77,  860,  860,  860,  860,  860,  860,
 /*  2720 */   860,  860,  860,   40,  860,  303,  860,  860,  154,   50,
 /*  2730 */   860,  860,  860,  860,  302,  417,  157,  427,  301,  860,
 /*  2740 */   428,  860,  860,  860,  860,  860,   68,   67,   69,   71,
 /*  2750 */    70,   72,   73,   74,   75,  860,  448,  449,  453,  450,
 /*  2760 */   452,  451,  860,   80,  860,  860,   38,  860,  860,  200,
 /*  2770 */   860,  860,  860,  127,  860,  860,  860,  860,  158,  860,
 /*  2780 */   860,  257,  425,  441,  443,  444,  445,  446,  447,  860,
 /*  2790 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  2800 */   860,  860,  860,  860,  860,  408,  394,  395,  396,  256,
 /*  2810 */   397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
 /*  2820 */   409,  860,  860,  439,  440,  312,  168,  860,  303,  860,
 /*  2830 */   860,  154,  860,  860,  860,  860,  860,  302,  417,  157,
 /*  2840 */   427,  301,  860,  428,  224,  860,  860,  860,  860,  373,
 /*  2850 */   860,  860,  860,  860,  860,  860,  257,  332,  860,  860,
 /*  2860 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  2870 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  2880 */   408,  394,  395,  396,  256,  397,  398,  399,  400,  401,
 /*  2890 */   402,  403,  404,  405,  406,  409,  860,  860,  439,  440,
 /*  2900 */   860,  860,  860,  303,  860,  860,  154,  860,  860,  860,
 /*  2910 */   860,  860,  302,  417,  157,  427,  301,  224,  428,  860,
 /*  2920 */   860,  860,  373,  860,  860,  860,  860,  860,  860,  257,
 /*  2930 */   333,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  2940 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  2950 */   860,  860,  860,  408,  394,  395,  396,  256,  397,  398,
 /*  2960 */   399,  400,  401,  402,  403,  404,  405,  406,  409,  860,
 /*  2970 */   224,  439,  440,  860,  860,  373,  303,  860,  860,  154,
 /*  2980 */   860,  860,  257,  334,  860,  302,  417,  157,  427,  301,
 /*  2990 */   860,  428,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  3000 */   860,  860,  860,  860,  860,  860,  408,  394,  395,  396,
 /*  3010 */   256,  397,  398,  399,  400,  401,  402,  403,  404,  405,
 /*  3020 */   406,  409,  199,  860,  439,  440,  860,  860,  860,  303,
 /*  3030 */   860,  860,  154,  860,  257,  860,  860,  860,  302,  417,
 /*  3040 */   157,  427,  301,  860,  428,  860,  860,  860,  860,  860,
 /*  3050 */   860,  860,  860,  860,  860,  860,  860,  860,  408,  394,
 /*  3060 */   395,  396,  256,  397,  398,  399,  400,  401,  402,  403,
 /*  3070 */   404,  405,  406,  409,  860,  860,  439,  440,  860,  860,
 /*  3080 */   860,  303,  860,  199,  154,  860,  860,  860,  860,  318,
 /*  3090 */   302,  417,  157,  427,  301,  257,  428,  860,  860,  860,
 /*  3100 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  3110 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  408,
 /*  3120 */   394,  395,  396,  256,  397,  398,  399,  400,  401,  402,
 /*  3130 */   403,  404,  405,  406,  409,  199,  860,  439,  440,  860,
 /*  3140 */   860,  860,  303,  860,  860,  154,  860,  257,  860,  860,
 /*  3150 */   316,  302,  417,  157,  427,  301,  860,  428,  860,  860,
 /*  3160 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  3170 */   860,  408,  394,  395,  396,  256,  397,  398,  399,  400,
 /*  3180 */   401,  402,  403,  404,  405,  406,  409,  199,  860,  439,
 /*  3190 */   440,  860,  860,  860,  303,  860,  860,  154,  860,  257,
 /*  3200 */   860,  860,  313,  302,  417,  157,  427,  301,  860,  428,
 /*  3210 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  3220 */   860,  860,  860,  408,  394,  395,  396,  256,  397,  398,
 /*  3230 */   399,  400,  401,  402,  403,  404,  405,  406,  409,  860,
 /*  3240 */   860,  439,  440,  860,  860,  860,  303,  860,  199,  154,
 /*  3250 */   860,  860,  860,  860,  471,  302,  417,  157,  427,  301,
 /*  3260 */   257,  428,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  3270 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  3280 */   860,  860,  860,  860,  408,  394,  395,  396,  256,  397,
 /*  3290 */   398,  399,  400,  401,  402,  403,  404,  405,  406,  409,
 /*  3300 */   199,  860,  439,  440,  860,  860,  860,  303,  860,  860,
 /*  3310 */   154,  860,  257,  860,  860,  311,  302,  417,  157,  427,
 /*  3320 */   301,  860,  428,  860,  860,  860,  860,  860,  860,  860,
 /*  3330 */   860,  860,  860,  860,  860,  860,  408,  394,  395,  396,
 /*  3340 */   256,  397,  398,  399,  400,  401,  402,  403,  404,  405,
 /*  3350 */   406,  409,  199,  860,  439,  440,  860,  860,  860,  303,
 /*  3360 */   860,  860,  154,  860,  257,  860,  860,  310,  302,  417,
 /*  3370 */   157,  427,  301,  860,  428,  860,  860,  860,  860,  860,
 /*  3380 */   860,  860,  860,  860,  860,  860,  860,  860,  408,  394,
 /*  3390 */   395,  396,  256,  397,  398,  399,  400,  401,  402,  403,
 /*  3400 */   404,  405,  406,  409,  860,  860,  439,  440,  860,  860,
 /*  3410 */   860,  303,  860,  224,  154,  860,  860,  860,  323,  309,
 /*  3420 */   302,  417,  157,  427,  301,  257,  428,  860,  860,  860,
 /*  3430 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  3440 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  408,
 /*  3450 */   394,  395,  396,  256,  397,  398,  399,  400,  401,  402,
 /*  3460 */   403,  404,  405,  406,  409,  198,  860,  439,  440,  860,
 /*  3470 */   860,  860,  303,  860,  860,  154,  860,  257,  860,  860,
 /*  3480 */   860,  302,  417,  157,  427,  301,  860,  428,  860,  860,
 /*  3490 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  3500 */   860,  408,  394,  395,  396,  256,  397,  398,  399,  400,
 /*  3510 */   401,  402,  403,  404,  405,  406,  409,  202,  860,  439,
 /*  3520 */   440,  860,  860,  860,  303,  860,  860,  154,  860,  257,
 /*  3530 */   860,  860,  860,  302,  417,  157,  427,  301,  860,  428,
 /*  3540 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  3550 */   860,  860,  860,  408,  394,  395,  396,  256,  397,  398,
 /*  3560 */   399,  400,  401,  402,  403,  404,  405,  406,  409,  860,
 /*  3570 */   860,  439,  440,  860,  860,  860,  303,  860,  217,  154,
 /*  3580 */   860,  860,  860,  860,  860,  302,  417,  157,  427,  301,
 /*  3590 */   257,  428,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  3600 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  3610 */   860,  860,  860,  860,  408,  394,  395,  396,  256,  397,
 /*  3620 */   398,  399,  400,  401,  402,  403,  404,  405,  406,  409,
 /*  3630 */   232,  860,  439,  440,  860,  860,  860,  303,  860,  860,
 /*  3640 */   154,  860,  257,  860,  860,  860,  302,  417,  157,  427,
 /*  3650 */   301,  860,  428,  860,  860,  860,  860,  860,  860,  860,
 /*  3660 */   860,  860,  860,  860,  860,  860,  408,  394,  395,  396,
 /*  3670 */   256,  397,  398,  399,  400,  401,  402,  403,  404,  405,
 /*  3680 */   406,  409,  201,  860,  439,  440,  860,  860,  860,  303,
 /*  3690 */   860,  860,  154,  860,  257,  860,  860,  860,  302,  417,
 /*  3700 */   157,  427,  301,  860,  428,  860,  860,  860,  860,  860,
 /*  3710 */   860,  860,  860,  860,  860,  860,  860,  860,  408,  394,
 /*  3720 */   395,  396,  256,  397,  398,  399,  400,  401,  402,  403,
 /*  3730 */   404,  405,  406,  409,  860,  860,  439,  440,  860,  860,
 /*  3740 */   860,  303,  860,  219,  154,  860,  860,  860,  860,  860,
 /*  3750 */   302,  417,  157,  427,  301,  257,  428,  860,  860,  860,
 /*  3760 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  3770 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  408,
 /*  3780 */   394,  395,  396,  256,  397,  398,  399,  400,  401,  402,
 /*  3790 */   403,  404,  405,  406,  409,  204,  860,  439,  440,  860,
 /*  3800 */   860,  860,  303,  860,  860,  154,  860,  257,  860,  860,
 /*  3810 */   860,  302,  417,  157,  427,  301,  860,  428,  860,  860,
 /*  3820 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  3830 */   860,  408,  394,  395,  396,  256,  397,  398,  399,  400,
 /*  3840 */   401,  402,  403,  404,  405,  406,  409,  206,  860,  439,
 /*  3850 */   440,  860,  860,  860,  303,  860,  860,  154,  860,  257,
 /*  3860 */   860,  860,  860,  302,  417,  157,  427,  301,  860,  428,
 /*  3870 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  3880 */   860,  860,  860,  408,  394,  395,  396,  256,  397,  398,
 /*  3890 */   399,  400,  401,  402,  403,  404,  405,  406,  409,  860,
 /*  3900 */   860,  439,  440,  860,  860,  860,  303,  860,  197,  154,
 /*  3910 */   860,  860,  860,  860,  860,  302,  417,  157,  427,  301,
 /*  3920 */   257,  428,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  3930 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  3940 */   860,  860,  860,  860,  408,  394,  395,  396,  256,  397,
 /*  3950 */   398,  399,  400,  401,  402,  403,  404,  405,  406,  409,
 /*  3960 */   268,  860,  439,  440,  860,  860,  860,  303,  860,  860,
 /*  3970 */   154,  860,  257,  860,  860,  860,  302,  417,  157,  427,
 /*  3980 */   301,  860,  428,  860,  860,  860,  860,  860,  860,  860,
 /*  3990 */   860,  860,  860,  860,  860,  860,  408,  394,  395,  396,
 /*  4000 */   256,  397,  398,  399,  400,  401,  402,  403,  404,  405,
 /*  4010 */   406,  409,  248,  860,  439,  440,  860,  860,  860,  303,
 /*  4020 */   860,  860,  154,  860,  257,  860,  860,  860,  302,  417,
 /*  4030 */   157,  427,  301,  860,  428,  860,  860,  860,  860,  860,
 /*  4040 */   860,  860,  860,  860,  860,  860,  860,  860,  408,  394,
 /*  4050 */   395,  396,  256,  397,  398,  399,  400,  401,  402,  403,
 /*  4060 */   404,  405,  406,  409,  860,  860,  439,  440,  860,  860,
 /*  4070 */   860,  303,  860,  231,  154,  860,  860,  860,  860,  860,
 /*  4080 */   302,  417,  157,  427,  301,  257,  428,  860,  860,  860,
 /*  4090 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  4100 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  408,
 /*  4110 */   394,  395,  396,  256,  397,  398,  399,  400,  401,  402,
 /*  4120 */   403,  404,  405,  406,  409,  245,  860,  439,  440,  860,
 /*  4130 */   860,  860,  303,  860,  860,  154,  860,  257,  860,  860,
 /*  4140 */   860,  302,  417,  157,  427,  301,  860,  428,  860,  860,
 /*  4150 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  4160 */   860,  408,  394,  395,  396,  256,  397,  398,  399,  400,
 /*  4170 */   401,  402,  403,  404,  405,  406,  409,  421,  860,  439,
 /*  4180 */   440,  860,  860,  860,  303,  860,  860,  154,  860,  257,
 /*  4190 */   860,  860,  860,  302,  417,  157,  427,  301,  860,  428,
 /*  4200 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  4210 */   860,  860,  860,  408,  394,  395,  396,  256,  397,  398,
 /*  4220 */   399,  400,  401,  402,  403,  404,  405,  406,  409,  860,
 /*  4230 */   860,  439,  440,  860,  860,  860,  303,  860,  247,  154,
 /*  4240 */   860,  860,  860,  860,  860,  302,  417,  157,  427,  301,
 /*  4250 */   257,  428,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  4260 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  4270 */   860,  860,  860,  860,  408,  394,  395,  396,  256,  397,
 /*  4280 */   398,  399,  400,  401,  402,  403,  404,  405,  406,  409,
 /*  4290 */   213,  860,  439,  440,  860,  860,  860,  303,  860,  860,
 /*  4300 */   154,  860,  257,  860,  860,  860,  302,  417,  157,  427,
 /*  4310 */   301,  860,  428,  860,  860,  860,  860,  860,  860,  860,
 /*  4320 */   860,  860,  860,  860,  860,  860,  408,  394,  395,  396,
 /*  4330 */   256,  397,  398,  399,  400,  401,  402,  403,  404,  405,
 /*  4340 */   406,  409,  229,  860,  439,  440,  860,  860,  860,  303,
 /*  4350 */   860,  860,  154,  860,  257,  860,  860,  860,  302,  417,
 /*  4360 */   157,  427,  301,  860,  428,  860,  860,  860,  860,  860,
 /*  4370 */   860,  860,  860,  860,  860,  860,  860,  860,  408,  394,
 /*  4380 */   395,  396,  256,  397,  398,  399,  400,  401,  402,  403,
 /*  4390 */   404,  405,  406,  409,  860,  860,  439,  440,  860,  860,
 /*  4400 */   860,  303,  860,  214,  154,  860,  860,  860,  860,  860,
 /*  4410 */   302,  417,  157,  427,  301,  257,  428,  860,  860,  860,
 /*  4420 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  4430 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  408,
 /*  4440 */   394,  395,  396,  256,  397,  398,  399,  400,  401,  402,
 /*  4450 */   403,  404,  405,  406,  409,  230,  860,  439,  440,  860,
 /*  4460 */   860,  860,  303,  860,  860,  154,  860,  257,  860,  860,
 /*  4470 */   860,  302,  417,  157,  427,  301,  860,  428,  860,  860,
 /*  4480 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  4490 */   860,  408,  394,  395,  396,  256,  397,  398,  399,  400,
 /*  4500 */   401,  402,  403,  404,  405,  406,  409,  215,  860,  439,
 /*  4510 */   440,  860,  860,  860,  303,  860,  860,  154,  860,  257,
 /*  4520 */   860,  860,  860,  302,  417,  157,  427,  301,  860,  428,
 /*  4530 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  4540 */   860,  860,  860,  408,  394,  395,  396,  256,  397,  398,
 /*  4550 */   399,  400,  401,  402,  403,  404,  405,  406,  409,  860,
 /*  4560 */   860,  439,  440,  860,  860,  860,  303,  860,  315,  154,
 /*  4570 */   860,  860,  860,  860,  860,  302,  417,  157,  427,  301,
 /*  4580 */   257,  428,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  4590 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  4600 */   860,  860,  860,  860,  408,  394,  395,  396,  256,  397,
 /*  4610 */   398,  399,  400,  401,  402,  403,  404,  405,  406,  409,
 /*  4620 */   216,  860,  439,  440,  860,  860,  860,  303,  860,  860,
 /*  4630 */   154,  860,  257,  860,  860,  860,  302,  417,  157,  427,
 /*  4640 */   301,  860,  428,  860,  860,  860,  860,  860,  860,  860,
 /*  4650 */   860,  860,  860,  860,  860,  860,  408,  394,  395,  396,
 /*  4660 */   256,  397,  398,  399,  400,  401,  402,  403,  404,  405,
 /*  4670 */   406,  409,  314,  860,  439,  440,  860,  860,  860,  303,
 /*  4680 */   860,  860,  154,  860,  257,  860,  860,  860,  302,  417,
 /*  4690 */   157,  427,  301,  860,  428,  860,  860,  860,  860,  860,
 /*  4700 */   860,  860,  860,  860,  860,  860,  860,  860,  408,  394,
 /*  4710 */   395,  396,  256,  397,  398,  399,  400,  401,  402,  403,
 /*  4720 */   404,  405,  406,  409,  860,  860,  439,  440,  860,  860,
 /*  4730 */   860,  303,  860,  422,  154,  860,  860,  860,  860,  860,
 /*  4740 */   302,  417,  157,  427,  301,  257,  428,  860,  860,  860,
 /*  4750 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  4760 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  408,
 /*  4770 */   394,  395,  396,  256,  397,  398,  399,  400,  401,  402,
 /*  4780 */   403,  404,  405,  406,  409,  296,  860,  439,  440,  860,
 /*  4790 */   860,  860,  303,  860,  860,  154,  860,  257,  860,  860,
 /*  4800 */   860,  302,  417,  157,  427,  301,  860,  428,  860,  860,
 /*  4810 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  4820 */   860,  408,  394,  395,  396,  256,  397,  398,  399,  400,
 /*  4830 */   401,  402,  403,  404,  405,  406,  409,  264,  860,  439,
 /*  4840 */   440,  860,  860,  860,  303,  860,  860,  154,  860,  257,
 /*  4850 */   860,  860,  860,  302,  417,  157,  427,  301,  860,  428,
 /*  4860 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  4870 */   860,  860,  860,  408,  394,  395,  396,  256,  397,  398,
 /*  4880 */   399,  400,  401,  402,  403,  404,  405,  406,  409,  860,
 /*  4890 */   860,  439,  440,  860,  860,  860,  303,  860,  265,  154,
 /*  4900 */   860,  860,  860,  860,  860,  302,  417,  157,  427,  301,
 /*  4910 */   257,  428,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  4920 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  4930 */   860,  860,  860,  860,  408,  394,  395,  396,  256,  397,
 /*  4940 */   398,  399,  400,  401,  402,  403,  404,  405,  406,  409,
 /*  4950 */   258,  860,  439,  440,  860,  860,  860,  303,  860,  860,
 /*  4960 */   154,  860,  257,  860,  860,  860,  302,  417,  157,  427,
 /*  4970 */   301,  860,  428,  860,  860,  860,  860,  860,  860,  860,
 /*  4980 */   860,  860,  860,  860,  860,  860,  408,  394,  395,  396,
 /*  4990 */   256,  397,  398,  399,  400,  401,  402,  403,  404,  405,
 /*  5000 */   406,  409,  259,  860,  439,  440,  860,  860,  860,  303,
 /*  5010 */   860,  860,  154,  860,  257,  860,  860,  860,  302,  417,
 /*  5020 */   157,  427,  301,  860,  428,  860,  860,  860,  860,  860,
 /*  5030 */   860,  860,  860,  860,  860,  860,  860,  860,  408,  394,
 /*  5040 */   395,  396,  256,  397,  398,  399,  400,  401,  402,  403,
 /*  5050 */   404,  405,  406,  409,  860,  860,  439,  440,  860,  860,
 /*  5060 */   860,  303,  860,  260,  154,  860,  860,  860,  860,  860,
 /*  5070 */   302,  417,  157,  427,  301,  257,  428,  860,  860,  860,
 /*  5080 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  5090 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  408,
 /*  5100 */   394,  395,  396,  256,  397,  398,  399,  400,  401,  402,
 /*  5110 */   403,  404,  405,  406,  409,  261,  860,  439,  440,  860,
 /*  5120 */   860,  860,  303,  860,  860,  154,  860,  257,  860,  860,
 /*  5130 */   860,  302,  417,  157,  427,  301,  860,  428,  860,  860,
 /*  5140 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  5150 */   860,  408,  394,  395,  396,  256,  397,  398,  399,  400,
 /*  5160 */   401,  402,  403,  404,  405,  406,  409,  251,  860,  439,
 /*  5170 */   440,  860,  860,  860,  303,  860,  860,  154,  860,  257,
 /*  5180 */   860,  860,  860,  302,  417,  157,  427,  301,  860,  428,
 /*  5190 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  5200 */   860,  860,  860,  408,  394,  395,  396,  256,  397,  398,
 /*  5210 */   399,  400,  401,  402,  403,  404,  405,  406,  409,  860,
 /*  5220 */   860,  439,  440,  860,  860,  860,  303,  860,  252,  154,
 /*  5230 */   860,  860,  860,  860,  860,  302,  417,  157,  427,  301,
 /*  5240 */   257,  428,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  5250 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  5260 */   860,  860,  860,  860,  408,  394,  395,  396,  256,  397,
 /*  5270 */   398,  399,  400,  401,  402,  403,  404,  405,  406,  409,
 /*  5280 */   253,  860,  439,  440,  860,  860,  860,  303,  860,  860,
 /*  5290 */   154,  860,  257,  860,  860,  860,  302,  417,  157,  427,
 /*  5300 */   301,  860,  428,  860,  860,  860,  860,  860,  860,  860,
 /*  5310 */   860,  860,  860,  860,  860,  860,  408,  394,  395,  396,
 /*  5320 */   256,  397,  398,  399,  400,  401,  402,  403,  404,  405,
 /*  5330 */   406,  409,  254,  860,  439,  440,  860,  860,  860,  303,
 /*  5340 */   860,  860,  154,  860,  257,  860,  860,  860,  302,  417,
 /*  5350 */   157,  427,  301,  860,  428,  860,  860,  860,  860,  860,
 /*  5360 */   860,  860,  860,  860,  860,  860,  860,  860,  408,  394,
 /*  5370 */   395,  396,  256,  397,  398,  399,  400,  401,  402,  403,
 /*  5380 */   404,  405,  406,  409,  860,  860,  439,  440,  860,  860,
 /*  5390 */   860,  303,  860,  250,  154,  860,  860,  860,  860,  860,
 /*  5400 */   302,  417,  157,  427,  301,  257,  428,  860,  860,  860,
 /*  5410 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  5420 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  408,
 /*  5430 */   394,  395,  396,  256,  397,  398,  399,  400,  401,  402,
 /*  5440 */   403,  404,  405,  406,  409,  249,  860,  439,  440,  860,
 /*  5450 */   860,  860,  303,  860,  860,  154,  860,  257,  860,  860,
 /*  5460 */   860,  302,  417,  157,  427,  301,  860,  428,  860,  860,
 /*  5470 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  5480 */   860,  408,  394,  395,  396,  256,  397,  398,  399,  400,
 /*  5490 */   401,  402,  403,  404,  405,  406,  409,  255,  860,  439,
 /*  5500 */   440,  860,  860,  860,  303,  860,  860,  154,  860,  257,
 /*  5510 */   860,  860,  860,  302,  417,  157,  427,  301,  860,  428,
 /*  5520 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  5530 */   860,  860,  860,  408,  394,  395,  396,  256,  397,  398,
 /*  5540 */   399,  400,  401,  402,  403,  404,  405,  406,  409,  860,
 /*  5550 */   860,  439,  440,  860,  860,  860,  303,  860,  262,  154,
 /*  5560 */   860,  860,  860,  860,  860,  302,  417,  157,  427,  301,
 /*  5570 */   257,  428,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  5580 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  5590 */   860,  860,  860,  860,  408,  394,  395,  396,  256,  397,
 /*  5600 */   398,  399,  400,  401,  402,  403,  404,  405,  406,  409,
 /*  5610 */   263,  860,  439,  440,  860,  860,  860,  303,  860,  860,
 /*  5620 */   154,  860,  257,  860,  860,  860,  302,  417,  157,  427,
 /*  5630 */   301,  860,  428,  860,  860,  860,  860,  860,  860,  860,
 /*  5640 */   860,  860,  860,  860,  860,  860,  408,  394,  395,  396,
 /*  5650 */   256,  397,  398,  399,  400,  401,  402,  403,  404,  405,
 /*  5660 */   406,  409,  430,  860,  439,  440,  860,  860,  860,  303,
 /*  5670 */   860,  860,  154,  860,  257,  860,  860,  860,  302,  417,
 /*  5680 */   157,  427,  301,  860,  428,  860,  860,  860,  860,  860,
 /*  5690 */   860,  860,  860,  860,  860,  860,  860,  860,  408,  394,
 /*  5700 */   395,  396,  256,  397,  398,  399,  400,  401,  402,  403,
 /*  5710 */   404,  405,  406,  409,  860,  860,  439,  440,  860,  860,
 /*  5720 */   860,  303,  860,  431,  154,  860,  860,  860,  860,  860,
 /*  5730 */   302,  417,  157,  427,  301,  257,  428,  860,  860,  860,
 /*  5740 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  5750 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  408,
 /*  5760 */   394,  395,  396,  256,  397,  398,  399,  400,  401,  402,
 /*  5770 */   403,  404,  405,  406,  409,  432,  860,  439,  440,  860,
 /*  5780 */   860,  860,  303,  860,  860,  154,  860,  257,  860,  860,
 /*  5790 */   860,  302,  417,  157,  427,  301,  860,  428,  860,  860,
 /*  5800 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  5810 */   860,  408,  394,  395,  396,  256,  397,  398,  399,  400,
 /*  5820 */   401,  402,  403,  404,  405,  406,  409,  433,  860,  439,
 /*  5830 */   440,  860,  860,  860,  303,  860,  860,  154,  860,  257,
 /*  5840 */   860,  860,  860,  302,  417,  157,  427,  301,  860,  428,
 /*  5850 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  5860 */   860,  860,  860,  408,  394,  395,  396,  256,  397,  398,
 /*  5870 */   399,  400,  401,  402,  403,  404,  405,  406,  409,  860,
 /*  5880 */   860,  439,  440,  860,  860,  860,  303,  860,  434,  154,
 /*  5890 */   860,  860,  860,  860,  860,  302,  417,  157,  427,  301,
 /*  5900 */   257,  428,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  5910 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  5920 */   860,  860,  860,  860,  408,  394,  395,  396,  256,  397,
 /*  5930 */   398,  399,  400,  401,  402,  403,  404,  405,  406,  409,
 /*  5940 */   435,  860,  439,  440,  860,  860,  860,  303,  860,  860,
 /*  5950 */   154,  860,  257,  860,  860,  860,  302,  417,  157,  427,
 /*  5960 */   301,  860,  428,  860,  860,  860,  860,  860,  860,  860,
 /*  5970 */   860,  860,  860,  860,  860,  860,  408,  394,  395,  396,
 /*  5980 */   256,  397,  398,  399,  400,  401,  402,  403,  404,  405,
 /*  5990 */   406,  409,  436,  860,  439,  440,  860,  860,  860,  303,
 /*  6000 */   860,  860,  154,  860,  257,  860,  860,  860,  302,  417,
 /*  6010 */   157,  427,  301,  860,  428,  860,  860,  860,  860,  860,
 /*  6020 */   860,  860,  860,  860,  860,  860,  860,  860,  408,  394,
 /*  6030 */   395,  396,  256,  397,  398,  399,  400,  401,  402,  403,
 /*  6040 */   404,  405,  406,  409,  860,  860,  439,  440,  860,  860,
 /*  6050 */   860,  303,  860,  437,  154,  860,  860,  860,  860,  860,
 /*  6060 */   302,  417,  157,  427,  301,  257,  428,  860,  860,  860,
 /*  6070 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  6080 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  408,
 /*  6090 */   394,  395,  396,  256,  397,  398,  399,  400,  401,  402,
 /*  6100 */   403,  404,  405,  406,  409,  438,  860,  439,  440,  860,
 /*  6110 */   860,  860,  303,  860,  860,  154,  860,  257,  860,  860,
 /*  6120 */   860,  302,  417,  157,  427,  301,  860,  428,  860,  860,
 /*  6130 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  6140 */   860,  408,  394,  395,  396,  256,  397,  398,  399,  400,
 /*  6150 */   401,  402,  403,  404,  405,  406,  409,  218,  860,  439,
 /*  6160 */   440,  860,  860,  860,  303,  860,  860,  154,  860,  257,
 /*  6170 */   860,  860,  860,  302,  417,  157,  427,  301,  860,  428,
 /*  6180 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  6190 */   860,  860,  860,  408,  394,  395,  396,  256,  397,  398,
 /*  6200 */   399,  400,  401,  402,  403,  404,  405,  406,  409,  860,
 /*  6210 */   860,  439,  440,  860,  860,  860,  303,  860,  266,  154,
 /*  6220 */   860,  860,  860,  860,  860,  302,  417,  157,  427,  301,
 /*  6230 */   257,  428,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  6240 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  6250 */   860,  860,  860,  860,  408,  394,  395,  396,  256,  397,
 /*  6260 */   398,  399,  400,  401,  402,  403,  404,  405,  406,  409,
 /*  6270 */   267,  860,  439,  440,  860,  860,  860,  303,  860,  860,
 /*  6280 */   154,  860,  257,  860,  860,  860,  302,  417,  157,  427,
 /*  6290 */   301,  860,  428,  860,  860,  860,  860,  860,  860,  860,
 /*  6300 */   860,  860,  860,  860,  860,  860,  408,  394,  395,  396,
 /*  6310 */   256,  397,  398,  399,  400,  401,  402,  403,  404,  405,
 /*  6320 */   406,  409,  300,  860,  439,  440,  860,  860,  860,  303,
 /*  6330 */   860,  860,  154,  860,  257,  860,  860,  860,  302,  417,
 /*  6340 */   157,  427,  301,  860,  428,  860,  860,  860,  860,  860,
 /*  6350 */   860,  860,  860,  860,  860,  860,  860,  860,  408,  394,
 /*  6360 */   395,  396,  256,  397,  398,  399,  400,  401,  402,  403,
 /*  6370 */   404,  405,  406,  409,  860,  860,  439,  440,  860,  860,
 /*  6380 */   860,  303,  860,  454,  154,  860,  860,  860,  860,  860,
 /*  6390 */   302,  417,  157,  427,  301,  257,  428,  860,  860,  860,
 /*  6400 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  6410 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  408,
 /*  6420 */   394,  395,  396,  256,  397,  398,  399,  400,  401,  402,
 /*  6430 */   403,  404,  405,  406,  409,  233,  860,  439,  440,  860,
 /*  6440 */   860,  860,  303,  860,  860,  154,  860,  257,  860,  860,
 /*  6450 */   860,  302,  417,  157,  427,  301,  860,  428,  860,  860,
 /*  6460 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  6470 */   860,  408,  394,  395,  396,  256,  397,  398,  399,  400,
 /*  6480 */   401,  402,  403,  404,  405,  406,  409,  234,  860,  439,
 /*  6490 */   440,  860,  860,  860,  303,  860,  860,  154,  860,  257,
 /*  6500 */   860,  860,  860,  302,  417,  157,  427,  301,  860,  428,
 /*  6510 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  6520 */   860,  860,  860,  408,  394,  395,  396,  256,  397,  398,
 /*  6530 */   399,  400,  401,  402,  403,  404,  405,  406,  409,  860,
 /*  6540 */   860,  439,  440,  860,  860,  860,  303,  860,  235,  154,
 /*  6550 */   860,  860,  860,  860,  860,  302,  417,  157,  427,  301,
 /*  6560 */   257,  428,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  6570 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  6580 */   860,  860,  860,  860,  408,  394,  395,  396,  256,  397,
 /*  6590 */   398,  399,  400,  401,  402,  403,  404,  405,  406,  409,
 /*  6600 */   236,  860,  439,  440,  860,  860,  860,  303,  860,  860,
 /*  6610 */   154,  860,  257,  860,  860,  860,  302,  417,  157,  427,
 /*  6620 */   301,  860,  428,  860,  860,  860,  860,  860,  860,  860,
 /*  6630 */   860,  860,  860,  860,  860,  860,  408,  394,  395,  396,
 /*  6640 */   256,  397,  398,  399,  400,  401,  402,  403,  404,  405,
 /*  6650 */   406,  409,  237,  860,  439,  440,  860,  860,  860,  303,
 /*  6660 */   860,  860,  154,  860,  257,  860,  860,  860,  302,  417,
 /*  6670 */   157,  427,  301,  860,  428,  860,  860,  860,  860,  860,
 /*  6680 */   860,  860,  860,  860,  860,  860,  860,  860,  408,  394,
 /*  6690 */   395,  396,  256,  397,  398,  399,  400,  401,  402,  403,
 /*  6700 */   404,  405,  406,  409,  860,  860,  439,  440,  860,  860,
 /*  6710 */   860,  303,  860,  238,  154,  860,  860,  860,  860,  860,
 /*  6720 */   302,  417,  157,  427,  301,  257,  428,  860,  860,  860,
 /*  6730 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  6740 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  408,
 /*  6750 */   394,  395,  396,  256,  397,  398,  399,  400,  401,  402,
 /*  6760 */   403,  404,  405,  406,  409,  239,  860,  439,  440,  860,
 /*  6770 */   860,  860,  303,  860,  860,  154,  860,  257,  860,  860,
 /*  6780 */   860,  302,  417,  157,  427,  301,  860,  428,  860,  860,
 /*  6790 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  6800 */   860,  408,  394,  395,  396,  256,  397,  398,  399,  400,
 /*  6810 */   401,  402,  403,  404,  405,  406,  409,  240,  860,  439,
 /*  6820 */   440,  860,  860,  860,  303,  860,  860,  154,  860,  257,
 /*  6830 */   860,  860,  860,  302,  417,  157,  427,  301,  860,  428,
 /*  6840 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  6850 */   860,  860,  860,  408,  394,  395,  396,  256,  397,  398,
 /*  6860 */   399,  400,  401,  402,  403,  404,  405,  406,  409,  860,
 /*  6870 */   860,  439,  440,  860,  860,  860,  303,  860,  241,  154,
 /*  6880 */   860,  860,  860,  860,  860,  302,  417,  157,  427,  301,
 /*  6890 */   257,  428,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  6900 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  6910 */   860,  860,  860,  860,  408,  394,  395,  396,  256,  397,
 /*  6920 */   398,  399,  400,  401,  402,  403,  404,  405,  406,  409,
 /*  6930 */   242,  860,  439,  440,  860,  860,  860,  303,  860,  860,
 /*  6940 */   154,  860,  257,  860,  860,  860,  302,  417,  157,  427,
 /*  6950 */   301,  860,  428,  860,  860,  860,  860,  860,  860,  860,
 /*  6960 */   860,  860,  860,  860,  860,  860,  408,  394,  395,  396,
 /*  6970 */   256,  397,  398,  399,  400,  401,  402,  403,  404,  405,
 /*  6980 */   406,  409,  243,  860,  439,  440,  860,  860,  860,  303,
 /*  6990 */   860,  860,  154,  860,  257,  860,  860,  860,  302,  417,
 /*  7000 */   157,  427,  301,  860,  428,  860,  860,  860,  860,  860,
 /*  7010 */   860,  860,  860,  860,  860,  860,  860,  860,  408,  394,
 /*  7020 */   395,  396,  256,  397,  398,  399,  400,  401,  402,  403,
 /*  7030 */   404,  405,  406,  409,  860,  860,  439,  440,  860,  860,
 /*  7040 */   860,  303,  860,  244,  154,  860,  860,  860,  860,  860,
 /*  7050 */   302,  417,  157,  427,  301,  257,  428,  860,  860,  860,
 /*  7060 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  7070 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  408,
 /*  7080 */   394,  395,  396,  256,  397,  398,  399,  400,  401,  402,
 /*  7090 */   403,  404,  405,  406,  409,  220,  860,  439,  440,  860,
 /*  7100 */   860,  860,  303,  860,  860,  154,  860,  257,  860,  860,
 /*  7110 */   860,  302,  417,  157,  427,  301,  860,  428,  860,  860,
 /*  7120 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  7130 */   860,  408,  394,  395,  396,  256,  397,  398,  399,  400,
 /*  7140 */   401,  402,  403,  404,  405,  406,  409,  221,  860,  439,
 /*  7150 */   440,  860,  860,  860,  303,  860,  860,  154,  860,  257,
 /*  7160 */   860,  860,  860,  302,  417,  157,  427,  301,  860,  428,
 /*  7170 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  7180 */   860,  860,  860,  408,  394,  395,  396,  256,  397,  398,
 /*  7190 */   399,  400,  401,  402,  403,  404,  405,  406,  409,  860,
 /*  7200 */   860,  439,  440,  860,  860,  860,  303,  860,  222,  154,
 /*  7210 */   860,  860,  860,  860,  860,  302,  417,  157,  427,  301,
 /*  7220 */   257,  428,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  7230 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  7240 */   860,  860,  860,  860,  408,  394,  395,  396,  256,  397,
 /*  7250 */   398,  399,  400,  401,  402,  403,  404,  405,  406,  409,
 /*  7260 */   203,  860,  439,  440,  860,  860,  860,  303,  860,  860,
 /*  7270 */   154,  860,  257,  860,  860,  860,  302,  417,  157,  427,
 /*  7280 */   301,  860,  428,  860,  860,  860,  860,  860,  860,  860,
 /*  7290 */   860,  860,  860,  860,  860,  860,  408,  394,  395,  396,
 /*  7300 */   256,  397,  398,  399,  400,  401,  402,  403,  404,  405,
 /*  7310 */   406,  409,  205,  860,  439,  440,  860,  860,  860,  303,
 /*  7320 */   860,  860,  154,  860,  257,  860,  860,  860,  302,  417,
 /*  7330 */   157,  427,  301,  860,  428,  860,  860,  860,  860,  860,
 /*  7340 */   860,  860,  860,  860,  860,  860,  860,  860,  408,  394,
 /*  7350 */   395,  396,  256,  397,  398,  399,  400,  401,  402,  403,
 /*  7360 */   404,  405,  406,  409,  860,  860,  439,  440,  860,  860,
 /*  7370 */   860,  303,  860,  246,  154,  860,  860,  860,  860,  860,
 /*  7380 */   302,  417,  157,  427,  301,  257,  428,  860,  860,  860,
 /*  7390 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  7400 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  408,
 /*  7410 */   394,  395,  396,  256,  397,  398,  399,  400,  401,  402,
 /*  7420 */   403,  404,  405,  406,  409,  223,  860,  439,  440,  860,
 /*  7430 */   860,  860,  303,  860,  860,  154,  860,  257,  860,  860,
 /*  7440 */   860,  302,  417,  157,  427,  301,  860,  428,  860,  860,
 /*  7450 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  7460 */   860,  408,  394,  395,  396,  256,  397,  398,  399,  400,
 /*  7470 */   401,  402,  403,  404,  405,  406,  409,  225,  860,  439,
 /*  7480 */   440,  860,  860,  860,  303,  860,  860,  154,  860,  257,
 /*  7490 */   860,  860,  860,  302,  417,  157,  427,  301,  860,  428,
 /*  7500 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  7510 */   860,  860,  860,  408,  394,  395,  396,  256,  397,  398,
 /*  7520 */   399,  400,  401,  402,  403,  404,  405,  406,  409,  860,
 /*  7530 */   860,  439,  440,  860,  860,  860,  303,  860,  226,  154,
 /*  7540 */   860,  860,  860,  860,  860,  302,  417,  157,  427,  301,
 /*  7550 */   257,  428,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  7560 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  7570 */   860,  860,  860,  860,  408,  394,  395,  396,  256,  397,
 /*  7580 */   398,  399,  400,  401,  402,  403,  404,  405,  406,  409,
 /*  7590 */   227,  860,  439,  440,  860,  860,  860,  303,  860,  860,
 /*  7600 */   154,  860,  257,  860,  860,  860,  302,  417,  157,  427,
 /*  7610 */   301,  860,  428,  860,  860,  860,  860,  860,  860,  860,
 /*  7620 */   860,  860,  860,  860,  860,  860,  408,  394,  395,  396,
 /*  7630 */   256,  397,  398,  399,  400,  401,  402,  403,  404,  405,
 /*  7640 */   406,  409,  228,  860,  439,  440,  860,  860,  860,  303,
 /*  7650 */   860,  860,  154,  860,  257,  860,  860,  860,  302,  417,
 /*  7660 */   157,  427,  301,  860,  428,  860,  860,  860,  860,  860,
 /*  7670 */   860,  860,  860,  860,  860,  860,  860,  860,  408,  394,
 /*  7680 */   395,  396,  256,  397,  398,  399,  400,  401,  402,  403,
 /*  7690 */   404,  405,  406,  409,  860,  860,  439,  440,  860,  860,
 /*  7700 */   860,  303,  860,  207,  154,  860,  860,  860,  860,  860,
 /*  7710 */   302,  417,  157,  427,  301,  257,  428,  860,  860,  860,
 /*  7720 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  7730 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  408,
 /*  7740 */   394,  395,  396,  256,  397,  398,  399,  400,  401,  402,
 /*  7750 */   403,  404,  405,  406,  409,  208,  860,  439,  440,  860,
 /*  7760 */   860,  860,  303,  860,  860,  154,  860,  257,  860,  860,
 /*  7770 */   860,  302,  417,  157,  427,  301,  860,  428,  860,  860,
 /*  7780 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  7790 */   860,  408,  394,  395,  396,  256,  397,  398,  399,  400,
 /*  7800 */   401,  402,  403,  404,  405,  406,  409,  209,  860,  439,
 /*  7810 */   440,  860,  860,  860,  303,  860,  860,  154,  860,  257,
 /*  7820 */   860,  860,  860,  302,  417,  157,  427,  301,  860,  428,
 /*  7830 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  7840 */   860,  860,  860,  408,  394,  395,  396,  256,  397,  398,
 /*  7850 */   399,  400,  401,  402,  403,  404,  405,  406,  409,  860,
 /*  7860 */   860,  439,  440,  860,  860,  860,  303,  860,  210,  154,
 /*  7870 */   860,  860,  860,  860,  860,  302,  417,  157,  427,  301,
 /*  7880 */   257,  428,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  7890 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  7900 */   860,  860,  860,  860,  408,  394,  395,  396,  256,  397,
 /*  7910 */   398,  399,  400,  401,  402,  403,  404,  405,  406,  409,
 /*  7920 */   211,  860,  439,  440,  860,  860,  860,  303,  860,  860,
 /*  7930 */   154,  860,  257,  860,  860,  860,  302,  417,  157,  427,
 /*  7940 */   301,  860,  428,  860,  860,  860,  860,  860,  860,  860,
 /*  7950 */   860,  860,  860,  860,  860,  860,  408,  394,  395,  396,
 /*  7960 */   256,  397,  398,  399,  400,  401,  402,  403,  404,  405,
 /*  7970 */   406,  409,  155,  860,  439,  440,  860,  860,  860,  303,
 /*  7980 */   860,  860,  154,  860,  257,  860,  860,  860,  302,  417,
 /*  7990 */   157,  427,  301,  860,  428,  860,  860,  860,  860,  860,
 /*  8000 */   860,  860,  860,  860,  860,  860,  860,  860,  408,  394,
 /*  8010 */   395,  396,  256,  397,  398,  399,  400,  401,  402,  403,
 /*  8020 */   404,  405,  406,  409,  860,  860,  439,  440,  860,  860,
 /*  8030 */   860,  303,  860,  212,  154,  860,  860,  860,  860,  860,
 /*  8040 */   302,  417,  157,  427,  301,  257,  428,  860,  860,  860,
 /*  8050 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  8060 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  408,
 /*  8070 */   394,  395,  396,  256,  397,  398,  399,  400,  401,  402,
 /*  8080 */   403,  404,  405,  406,  409,  860,  860,  439,  440,  860,
 /*  8090 */   860,  860,  303,  860,  860,  154,  860,  860,  860,  860,
 /*  8100 */   860,  302,  417,  157,  427,  301,   64,  428,  860,   37,
 /*  8110 */    39,   41,   43,   45,  860,  860,  860,  860,  860,   58,
 /*  8120 */    59,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  8130 */   860,  860,   36,   54,   55,   56,   57,  860,  860,  860,
 /*  8140 */   860,  860,  860,  860,  860,  860,   60,   61,   34,  550,
 /*  8150 */   860,  860,  860,  860,   53,   52,   47,   49,   51,  860,
 /*  8160 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  8170 */   860,  860,  126,  860,  860,  860,  860,  860,  860,  860,
 /*  8180 */   860,  860,  860,  860,  860,   66,   65,  860,  860,  860,
 /*  8190 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  8200 */   860,  860,  860,  860,  860,  860,   63,   62,   64,  860,
 /*  8210 */   860,   37,   39,   41,   43,   45,  860,  860,  551,  860,
 /*  8220 */   860,   58,   59,  860,  860,  860,  860,  860,  860,  860,
 /*  8230 */   860,  860,  860,  860,   36,   54,   55,   56,   57,  860,
 /*  8240 */   860,  860,  860,  860,  860,  860,  860,  860,   60,   61,
 /*  8250 */    34,  860,  860,  860,  860,  860,   53,   52,   47,   49,
 /*  8260 */    51,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  8270 */   860,  860,  860,  860,  126,  860,  860,  860,  860,  860,
 /*  8280 */   860,  860,  860,  860,  860,  860,  860,   66,   65,  860,
 /*  8290 */   860,  860,  860,  860,  407,  860,  860,  860,  860,  860,
 /*  8300 */   860,  860,  860,  860,  860,  860,  860,  860,   63,   62,
 /*  8310 */    64,  860,  860,   37,   39,   41,   43,   45,  860,  860,
 /*  8320 */   393,  860,  860,   58,   59,  860,  860,  860,  860,  860,
 /*  8330 */   860,  860,  860,  860,  860,  860,   36,   54,   55,   56,
 /*  8340 */    57,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  8350 */    60,   61,   34,  860,  860,  860,  860,  860,   53,   52,
 /*  8360 */    47,   49,   51,  860,  860,  860,  860,  860,  860,  860,
 /*  8370 */   860,  860,  860,  860,  860,  860,  126,  860,  860,  860,
 /*  8380 */   860,  860,  860,  860,  860,  860,  860,  860,  860,   66,
 /*  8390 */    65,  860,  860,  860,  860,  860,  411,  860,  860,  860,
 /*  8400 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  8410 */    63,   62,   64,  860,  860,   37,   39,   41,   43,   45,
 /*  8420 */   860,  860,  860,  860,  860,   58,   59,  860,  860,  860,
 /*  8430 */   860,  860,  860,  860,  860,  860,  860,  860,   36,   54,
 /*  8440 */    55,   56,   57,  860,  860,  860,  860,  860,  860,  860,
 /*  8450 */   860,  860,   60,   61,   34,  860,  860,  860,  860,  860,
 /*  8460 */    53,   52,   47,   49,   51,   22,  860,  860,  860,  860,
 /*  8470 */   860,  860,  860,  860,  860,  860,   64,  860,  126,   37,
 /*  8480 */    39,   41,   43,   45,  860,  860,  860,  860,  860,   58,
 /*  8490 */    59,   66,   65,  860,  860,  860,  860,  860,  860,  860,
 /*  8500 */   860,  860,   36,   54,   55,   56,   57,  860,  860,  860,
 /*  8510 */   860,  860,   63,   62,  860,  860,   60,   61,   34,  860,
 /*  8520 */   860,  860,  860,  860,   53,   52,   47,   49,   51,  860,
 /*  8530 */   860,  860,  860,  860,  860,  860,  860,  860,  860,   29,
 /*  8540 */    64,  860,  126,   37,   39,   41,   43,   45,  860,  860,
 /*  8550 */   860,  860,  860,   58,   59,   66,   65,  860,  860,  860,
 /*  8560 */   860,  860,  860,  860,  860,  860,   36,   54,   55,   56,
 /*  8570 */    57,  860,  860,  860,  860,  860,   63,   62,  860,  860,
 /*  8580 */    60,   61,   34,  860,  860,  860,  860,  860,   53,   52,
 /*  8590 */    47,   49,   51,  860,  860,  860,  860,  860,  860,  860,
 /*  8600 */   860,  860,  860,   32,   64,  860,  126,   37,   39,   41,
 /*  8610 */    43,   45,  860,  860,  860,  860,  860,   58,   59,   66,
 /*  8620 */    65,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  8630 */    36,   54,   55,   56,   57,  860,  860,  860,  860,  860,
 /*  8640 */    63,   62,  860,  860,   60,   61,   34,  860,  860,  860,
 /*  8650 */   860,  860,   53,   52,   47,   49,   51,  860,  860,  860,
 /*  8660 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  8670 */   126,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  8680 */   860,  860,  860,   66,   65,  860,  860,  860,  860,  860,
 /*  8690 */   860,  860,  860,  860,  474,  860,  860,  860,  860,  860,
 /*  8700 */   860,  860,  860,  860,   63,   62,   64,  860,  860,   37,
 /*  8710 */    39,   41,   43,   45,  860,  860,  860,  860,  860,   58,
 /*  8720 */    59,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  8730 */   860,  860,   36,   54,   55,   56,   57,  860,  860,  860,
 /*  8740 */   860,  860,  860,  860,  860,  860,   60,   61,   34,  860,
 /*  8750 */   860,  860,  860,  860,   53,   52,   47,   49,   51,  860,
 /*  8760 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  8770 */   860,  860,  126,  860,  860,  860,  860,  860,  860,  860,
 /*  8780 */   860,  860,  860,  860,  860,   66,   65,  860,  860,  860,
 /*  8790 */   860,  860,  860,  860,  476,  860,  860,  860,  860,  860,
 /*  8800 */   860,  860,  860,  860,  860,  860,   63,   62,   64,  860,
 /*  8810 */   860,   37,   39,   41,   43,   45,  860,  860,  860,  860,
 /*  8820 */   860,   58,   59,  860,  860,  860,  860,  860,  860,  860,
 /*  8830 */   860,  860,  860,  860,   36,   54,   55,   56,   57,  860,
 /*  8840 */   860,  860,  860,  860,  860,  860,  860,  860,   60,   61,
 /*  8850 */    34,  860,  860,  860,  860,  860,   53,   52,   47,   49,
 /*  8860 */    51,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  8870 */   860,  860,  860,  860,  126,  860,  860,  860,  860,  860,
 /*  8880 */   860,  860,  860,  860,  860,  860,  860,   66,   65,  860,
 /*  8890 */   860,  860,  860,  860,  860,  860,  860,  860,  477,  860,
 /*  8900 */   860,  860,  860,  860,  860,  860,  860,  860,   63,   62,
 /*  8910 */    64,  860,  860,   37,   39,   41,   43,   45,  860,  860,
 /*  8920 */   860,  860,  860,   58,   59,  860,  860,  860,  860,  860,
 /*  8930 */   860,  860,  860,  860,  860,  860,   36,   54,   55,   56,
 /*  8940 */    57,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  8950 */    60,   61,   34,  860,  860,  860,  860,  860,   53,   52,
 /*  8960 */    47,   49,   51,  860,  860,  860,  860,  860,  860,  860,
 /*  8970 */   860,  860,  860,  860,  860,  860,  126,  860,  860,  860,
 /*  8980 */   860,  860,  860,  860,  860,  860,  860,  860,  860,   66,
 /*  8990 */    65,  860,  860,  860,  860,  860,  860,  860,  479,  860,
 /*  9000 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  9010 */    63,   62,   64,  860,  860,   37,   39,   41,   43,   45,
 /*  9020 */   860,  860,  860,  860,  860,   58,   59,  860,  860,  860,
 /*  9030 */   860,  860,  860,  860,  860,  860,  860,  860,   36,   54,
 /*  9040 */    55,   56,   57,  860,  860,  860,  860,  860,  860,  860,
 /*  9050 */   860,  860,   60,   61,   34,  860,  860,  860,  860,  860,
 /*  9060 */    53,   52,   47,   49,   51,  860,  860,  860,  860,  860,
 /*  9070 */   860,  860,  860,  860,  860,  860,   64,  860,  126,   37,
 /*  9080 */    39,   41,   43,   45,  860,  860,  860,  860,  860,   58,
 /*  9090 */    59,   66,   65,  860,  860,  860,  860,  860,  860,  860,
 /*  9100 */   860,  860,   36,   54,   55,   56,   57,  860,  860,  860,
 /*  9110 */   860,  860,   63,   62,  860,  860,   60,   61,   34,   98,
 /*  9120 */   860,  860,  860,  860,   53,   52,   47,   49,   51,  860,
 /*  9130 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  9140 */   860,  860,  126,  860,  860,  860,  860,  860,  860,  860,
 /*  9150 */   860,  860,  860,  860,  860,   66,   65,  860,  860,  860,
 /*  9160 */   860,  860,    3,  860,  860,  860,  860,  860,  860,  860,
 /*  9170 */   860,  860,  860,  860,  860,  860,   63,   62,   64,  860,
 /*  9180 */   860,   37,   39,   41,   43,   45,  860,  860,  860,  860,
 /*  9190 */   860,   58,   59,  860,  860,  860,  860,  860,  860,  860,
 /*  9200 */   860,  860,  860,  860,   36,   54,   55,   56,   57,  860,
 /*  9210 */   860,  860,  860,  860,  860,  860,  860,  860,   60,   61,
 /*  9220 */    34,  860,  860,  860,  860,  860,   53,   52,   47,   49,
 /*  9230 */    51,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  9240 */   860,  860,   64,  860,  126,   37,   39,   41,   43,   45,
 /*  9250 */   860,  860,  860,  860,  860,   58,   59,   66,   65,  860,
 /*  9260 */   860,  860,  860,  860,  860,  860,  118,  860,   36,   54,
 /*  9270 */    55,   56,   57,  860,  860,  860,  860,  860,   63,   62,
 /*  9280 */   860,  860,   60,   61,   34,  860,  860,  860,  860,  860,
 /*  9290 */    53,   52,   47,   49,   51,  860,  860,  860,  860,  860,
 /*  9300 */   860,  860,  860,  860,  860,  860,  860,  860,  126,  860,
 /*  9310 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  9320 */   860,   66,   65,  860,  860,  860,  860,  860,  503,  860,
 /*  9330 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  9340 */   860,  860,   63,   62,   64,  860,  860,   37,   39,   41,
 /*  9350 */    43,   45,  860,  860,  860,  860,  860,   58,   59,  860,
 /*  9360 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  9370 */    36,   54,   55,   56,   57,  860,  860,  860,  860,  860,
 /*  9380 */   860,  860,  860,  860,   60,   61,   34,  860,  860,  860,
 /*  9390 */   860,  860,   53,   52,   47,   49,   51,  860,  860,  860,
 /*  9400 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  9410 */   126,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  9420 */   860,  860,  860,   66,   65,  860,  860,  860,  860,  860,
 /*  9430 */     8,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  9440 */   860,  860,  860,  860,   63,   62,   64,  860,  860,   37,
 /*  9450 */    39,   41,   43,   45,  860,  860,  860,  860,  860,   58,
 /*  9460 */    59,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  9470 */   860,  860,   36,   54,   55,   56,   57,  860,  860,  860,
 /*  9480 */   860,  860,  860,  860,  860,  860,   60,   61,   34,  860,
 /*  9490 */   860,  860,  860,  860,   53,   52,   47,   49,   51,  860,
 /*  9500 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  9510 */   860,  860,  126,  860,  860,  860,  860,  860,  860,  860,
 /*  9520 */   860,  860,  860,  860,  860,   66,   65,  860,  860,  860,
 /*  9530 */   860,  860,  161,  860,  860,  860,  860,  860,  860,  860,
 /*  9540 */   860,  860,  860,  860,  860,  860,   63,   62,   64,  860,
 /*  9550 */   860,   37,   39,   41,   43,   45,  860,  860,  860,  860,
 /*  9560 */   860,   58,   59,  860,  860,  860,  860,  860,  860,  860,
 /*  9570 */   860,  860,  860,  860,   36,   54,   55,   56,   57,  860,
 /*  9580 */   860,  860,  860,  860,  860,  860,  860,  860,   60,   61,
 /*  9590 */    34,  860,  860,  860,  860,  860,   53,   52,   47,   49,
 /*  9600 */    51,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  9610 */   860,  860,  860,  860,  126,  860,  860,  860,  860,  860,
 /*  9620 */   860,  860,  860,  860,  860,  860,  860,   66,   65,  860,
 /*  9630 */   860,  860,  860,  860,   14,  860,  860,  860,  860,  860,
 /*  9640 */   860,  860,  860,  860,  860,  860,  860,  860,   63,   62,
 /*  9650 */    64,  860,  860,   37,   39,   41,   43,   45,  860,  860,
 /*  9660 */   860,  860,  860,   58,   59,  860,  860,  860,  860,  860,
 /*  9670 */   860,  860,  860,  860,  860,  860,   36,   54,   55,   56,
 /*  9680 */    57,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  9690 */    60,   61,   34,  860,  860,  860,  860,  860,   53,   52,
 /*  9700 */    47,   49,   51,  860,  860,  860,  860,  860,  860,  860,
 /*  9710 */   860,  860,  860,  860,   64,  860,  126,   37,   39,   41,
 /*  9720 */    43,   45,  860,  860,  860,  860,  860,   58,   59,   66,
 /*  9730 */    65,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  9740 */    36,   54,   55,   56,   57,  860,  860,  860,  860,  860,
 /*  9750 */    63,   62,  860,  860,   60,   61,   34,  860,  860,  860,
 /*  9760 */   860,  860,   53,   52,   47,   49,   51,  860,  860,  860,
 /*  9770 */   860,  860,  860,  860,  860,  860,  860,  860,   64,  860,
 /*  9780 */   126,   37,   39,   41,  860,   45,  860,  860,  860,  860,
 /*  9790 */   860,   58,   59,   66,   65,  860,  860,  860,  860,  860,
 /*  9800 */   860,  860,  860,  860,   36,   54,   55,   56,   57,  860,
 /*  9810 */   860,  860,  860,  860,   63,   62,  860,  860,   60,   61,
 /*  9820 */    34,  860,  860,  860,  860,  860,   53,   52,   47,   49,
 /*  9830 */    51,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /*  9840 */   860,  860,   64,  860,  126,   37,   39,   41,  860,  860,
 /*  9850 */   860,  860,  860,  860,  860,   58,   59,   66,   65,  860,
 /*  9860 */   860,  860,  860,  860,  860,  860,  860,  860,   36,   54,
 /*  9870 */    55,   56,   57,  860,  860,  860,  860,  860,   63,   62,
 /*  9880 */   860,  860,   60,   61,   34,  860,  860,  860,  860,  860,
 /*  9890 */    53,   52,   47,   49,   51,  860,  860,  860,  860,  860,
 /*  9900 */   860,  860,  860,  860,   64,  860,  860,   37,  126,   41,
 /*  9910 */   860,  860,  860,  860,  860,  860,  860,   58,   59,  860,
 /*  9920 */   860,   66,   65,  860,  860,  860,  860,  860,  860,  860,
 /*  9930 */    36,   54,   55,   56,   57,  860,  860,  860,  860,  860,
 /*  9940 */   860,  860,   63,   62,   60,   61,   34,  860,  860,  860,
 /*  9950 */   860,  860,   53,   52,   47,   49,   51,  860,  860,  860,
 /*  9960 */   860,  860,  860,  860,  860,  860,   64,  860,  860,   37,
 /*  9970 */   126,   41,  860,  860,  860,  860,  860,  860,  860,   58,
 /*  9980 */    59,  860,  860,   66,   65,  860,  860,  860,  860,  860,
 /*  9990 */   860,  860,   36,   54,   55,   56,   57,  860,  860,  860,
 /* 10000 */   860,  860,  860,  860,   63,   62,   60,   61,  860,  860,
 /* 10010 */   860,  860,  860,  860,   53,   52,   47,   49,   51,  860,
 /* 10020 */   860,  860,  860,  860,  860,  860,  860,  860,   64,  860,
 /* 10030 */   860,  860,  126,  860,  860,  860,  860,  860,  860,  860,
 /* 10040 */   860,   58,   59,  860,  860,   66,   65,  860,  860,  860,
 /* 10050 */   860,  860,  860,  860,   36,   54,   55,   56,   57,  860,
 /* 10060 */   860,  860,  860,  860,  860,  860,   63,   62,   60,   61,
 /* 10070 */   860,  860,  860,  860,  860,  860,   53,   52,   47,   49,
 /* 10080 */    51,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /* 10090 */    64,  860,  860,  860,  126,  860,  860,  860,  860,  860,
 /* 10100 */   860,  860,  860,   58,   59,  860,  860,   66,   65,  860,
 /* 10110 */   860,  860,  860,  860,  860,  860,   36,   54,   55,   56,
 /* 10120 */    57,  860,  860,  860,  860,  860,  860,  860,   63,   62,
 /* 10130 */    60,   61,  860,  860,  860,  860,  860,  860,   53,   52,
 /* 10140 */    47,   49,   51,  860,  860,  860,  860,  860,  860,  860,
 /* 10150 */   860,  860,   64,  860,  860,  860,  126,  860,  860,  860,
 /* 10160 */   860,  860,  860,  860,  860,   58,   59,  860,  860,   66,
 /* 10170 */    65,  860,  860,  860,  860,  860,  860,  860,   36,   54,
 /* 10180 */    55,   56,   57,  860,  860,  860,  860,  860,  860,  860,
 /* 10190 */   860,   62,   60,   61,  860,  860,  860,  860,  860,  860,
 /* 10200 */    53,   52,   47,   49,   51,  860,  860,  860,  860,  860,
 /* 10210 */   860,  860,  860,  860,  860,  860,  860,  860,  126,  860,
 /* 10220 */   860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
 /* 10230 */   860,   66,   65,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     0,    6,   47,  135,    4,  229,    6,  139,  232,  233,
 /*    10 */   234,   21,  147,  148,   14,   15,  232,  233,  234,   19,
 /*    20 */    30,   17,   18,   23,   69,   70,   71,   72,   73,   29,
 /*    30 */    30,   31,   32,   33,   21,  176,   36,   37,  223,   39,
 /*    40 */   135,   41,   87,   43,  139,   32,   46,  232,  233,  234,
 /*    50 */   235,  236,   52,  238,   30,   30,  150,   57,   58,   59,
 /*    60 */    60,   75,   76,  204,  205,   79,   66,   67,   68,   69,
 /*    70 */    70,  183,  184,  185,   74,  135,   52,   77,   78,  139,
 /*    80 */    80,   81,  223,   83,   84,  226,   86,    5,   82,   21,
 /*    90 */   182,  232,  233,  234,  235,  236,    6,  238,   30,   40,
 /*   100 */   170,   19,  196,  103,  104,  105,  106,  107,  108,  109,
 /*   110 */   110,  111,   30,  113,  114,  115,  116,  117,  118,    7,
 /*   120 */   120,  213,  214,  123,  124,  135,  218,  219,  133,  139,
 /*   130 */   130,  131,  132,  133,  134,  135,  136,  137,  150,  139,
 /*   140 */   140,  141,  142,  143,  144,  145,    4,  217,    6,    7,
 /*   150 */    38,  183,  184,  185,   64,  130,   14,   15,   10,  135,
 /*   160 */   135,   19,   30,  139,  139,   23,   54,   55,   56,    7,
 /*   170 */    22,   29,   30,   31,   32,   33,  180,  176,   36,   37,
 /*   180 */   223,   39,  198,   41,  196,   43,  174,  175,   46,  232,
 /*   190 */   233,  234,  235,  236,   52,  238,   84,   85,  233,   57,
 /*   200 */    58,   59,   60,  135,    6,  204,    8,  139,   66,   67,
 /*   210 */    68,   69,   70,  183,  184,  185,   74,  216,  237,   77,
 /*   220 */    78,  178,   80,   81,  223,   83,   84,  226,   86,  232,
 /*   230 */   233,  234,  182,  232,  233,  234,  235,  236,   76,  238,
 /*   240 */    30,   79,  237,  131,  132,  103,  104,  105,  106,  107,
 /*   250 */   108,  109,  110,  111,  217,  113,  114,  115,  116,  117,
 /*   260 */   118,    7,  120,  213,  214,  123,  124,  135,  218,  219,
 /*   270 */   186,  139,  130,  131,  132,  133,  134,  135,  136,  137,
 /*   280 */    21,  139,  140,  141,  142,  143,  144,  145,    4,   30,
 /*   290 */     6,   64,   38,  174,  175,   71,   72,   73,   14,   15,
 /*   300 */   186,   75,   76,   19,   30,   79,  186,   23,   54,   55,
 /*   310 */    56,   87,    4,   29,   30,   31,   32,   33,    5,  176,
 /*   320 */    36,   37,  228,   39,    4,   41,  180,   43,  191,  192,
 /*   330 */    46,  194,  195,   20,  197,  198,   52,  230,   84,   85,
 /*   340 */    21,   57,   58,   59,   60,  135,   30,  204,   30,  139,
 /*   350 */    66,   67,   68,   69,   70,  171,  172,  173,   74,  216,
 /*   360 */   133,   77,   78,   10,   80,   81,  223,   83,   84,  226,
 /*   370 */    86,  227,  228,   65,  182,  232,  233,  234,  235,  236,
 /*   380 */   222,  238,    6,    6,    8,  131,  132,  103,  104,  105,
 /*   390 */   106,  107,  108,  109,  110,  111,    7,  113,  114,  115,
 /*   400 */   116,  117,  118,  150,  120,  213,  214,  123,  124,  135,
 /*   410 */   218,  219,  171,  139,  130,  131,  132,  133,  134,  135,
 /*   420 */   136,  137,  171,  139,  140,  141,  142,  143,  144,  145,
 /*   430 */   182,  149,  150,  151,  152,  153,  154,  155,  156,  157,
 /*   440 */   158,  159,  160,  161,  162,  163,  164,  165,  166,  167,
 /*   450 */   168,  135,  150,  135,  135,  139,   10,  139,  176,   22,
 /*   460 */    10,  213,  214,  133,    5,   76,  218,  219,   79,   10,
 /*   470 */   179,    5,  135,    5,    5,  182,   10,   40,   10,   10,
 /*   480 */   181,  150,  200,  201,  202,  203,  204,  205,  206,  207,
 /*   490 */   208,  209,  210,  211,  212,  213,  214,  215,   53,  187,
 /*   500 */   218,  219,  138,   66,   67,  223,  213,  214,  226,  188,
 /*   510 */   135,  218,  219,  199,  232,  233,  234,  235,  236,  193,
 /*   520 */   238,   30,  187,   53,  188,   88,   89,  187,   91,   92,
 /*   530 */    93,   94,   95,   96,   97,   98,   99,  149,  150,  151,
 /*   540 */   152,  153,  154,  155,  156,  157,  158,  159,  160,  161,
 /*   550 */   162,  163,  164,  165,  166,  167,  168,  188,  190,  199,
 /*   560 */   133,  179,  148,  148,  176,  148,  179,  189,  189,  189,
 /*   570 */   189,  179,  133,  133,  133,   54,   55,   56,    4,  133,
 /*   580 */     4,  182,    5,  133,    4,    4,    4,   65,  200,  201,
 /*   590 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*   600 */   212,  213,  214,  215,   87,   84,  218,  219,   65,    4,
 /*   610 */     4,  223,  213,  214,  226,    4,    4,  218,  219,    4,
 /*   620 */   232,  233,  234,  235,  236,   40,  238,    4,    4,   22,
 /*   630 */   182,    4,  149,  150,  151,  152,  153,  154,  155,  156,
 /*   640 */   157,  158,  159,  160,  161,  162,  163,  164,  165,  166,
 /*   650 */   167,  168,  131,  132,    5,    5,  135,    5,    5,  176,
 /*   660 */    22,  213,  214,    5,    5,    5,  218,  219,  133,  133,
 /*   670 */   133,  133,   10,   10,    4,   30,  182,  135,    5,    4,
 /*   680 */     4,    4,  133,  200,  201,  202,  203,  204,  205,  206,
 /*   690 */   207,  208,  209,  210,  211,  212,  213,  214,  215,  133,
 /*   700 */     5,  218,  219,   15,   66,   67,  223,  213,  214,  226,
 /*   710 */     4,    4,  218,  219,    4,  232,  233,  234,  235,  236,
 /*   720 */    65,  238,   30,  135,    4,   22,   88,   89,  135,   91,
 /*   730 */    92,   93,   94,   95,   96,   97,   98,   99,  149,  150,
 /*   740 */   151,  152,  153,  154,  155,  156,  157,  158,  159,  160,
 /*   750 */   161,  162,  163,  164,  165,  166,  167,  168,   22,   10,
 /*   760 */     5,   30,    4,   30,    5,  176,    6,  135,   22,   22,
 /*   770 */    30,   32,   22,   30,  182,   22,   10,   39,   30,    6,
 /*   780 */    39,   30,   30,    6,   30,    6,   30,    5,    5,  200,
 /*   790 */   201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
 /*   800 */   211,  212,  213,  214,  215,  213,  214,  218,  219,    5,
 /*   810 */   218,  219,  223,    4,  239,  226,  239,  239,  239,  239,
 /*   820 */   239,  232,  233,  234,  235,  236,  239,  238,  239,  239,
 /*   830 */   239,  239,  239,  149,  150,  151,  152,  153,  154,  155,
 /*   840 */   156,  157,  158,  159,  160,  161,  162,  163,  164,  165,
 /*   850 */   166,  167,  168,  239,  239,  239,  239,  239,  239,  239,
 /*   860 */   176,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*   870 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*   880 */   239,  239,  239,  239,  200,  201,  202,  203,  204,  205,
 /*   890 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
 /*   900 */   239,  239,  218,  219,  239,  239,  239,  223,  239,  239,
 /*   910 */   226,  239,  239,  239,  239,  239,  232,  233,  234,  235,
 /*   920 */   236,  239,  238,  239,  239,  239,  239,  239,  239,  239,
 /*   930 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  149,
 /*   940 */   150,  151,  152,  153,  154,  155,  156,  157,  158,  159,
 /*   950 */   160,  161,  162,  163,  164,  165,  166,  167,  168,  239,
 /*   960 */   239,  239,  239,  239,  239,  239,  176,  239,  239,  239,
 /*   970 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*   980 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*   990 */   200,  201,  202,  203,  204,  205,  206,  207,  208,  209,
 /*  1000 */   210,  211,  212,  213,  214,  215,  239,  239,  218,  219,
 /*  1010 */   239,  239,  239,  223,  239,  239,  226,  239,  239,  239,
 /*  1020 */   239,  239,  232,  233,  234,  235,  236,  239,  238,  239,
 /*  1030 */   239,  239,  239,  239,  149,  150,  151,  152,  153,  154,
 /*  1040 */   155,  156,  157,  158,  159,  160,  161,  162,  163,  164,
 /*  1050 */   165,  166,  167,  168,  239,  239,  239,  239,  239,  239,
 /*  1060 */   239,  176,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  1070 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  1080 */   239,  239,  239,  239,  239,  200,  201,  202,  203,  204,
 /*  1090 */   205,  206,  207,  208,  209,  210,  211,  212,  213,  214,
 /*  1100 */   215,  239,  239,  218,  219,  239,  239,  239,  223,  239,
 /*  1110 */   239,  226,  239,  239,  239,  239,  239,  232,  233,  234,
 /*  1120 */   235,  236,  239,  238,  239,  239,  239,  239,  239,  239,
 /*  1130 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  1140 */   149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
 /*  1150 */   159,  160,  161,  162,  163,  164,  165,  166,  167,  168,
 /*  1160 */   239,  239,  239,  239,  239,  239,  239,  176,  239,  239,
 /*  1170 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  1180 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  1190 */   239,  200,  201,  202,  203,  204,  205,  206,  207,  208,
 /*  1200 */   209,  210,  211,  212,  213,  214,  215,  239,  239,  218,
 /*  1210 */   219,  239,  239,  239,  223,  239,  239,  226,  239,  239,
 /*  1220 */   239,  239,  239,  232,  233,  234,  235,  236,  239,  238,
 /*  1230 */   239,  239,  239,  239,  239,  149,  150,  151,  152,  153,
 /*  1240 */   154,  155,  156,  157,  158,  159,  160,  161,  162,  163,
 /*  1250 */   164,  165,  166,  167,  168,  239,  239,  239,  239,  239,
 /*  1260 */   239,  239,  176,  239,  239,  239,  239,  239,  239,  239,
 /*  1270 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  1280 */   239,  239,  239,  239,  239,  239,  200,  201,  202,  203,
 /*  1290 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  1300 */   214,  215,  239,  239,  218,  219,  239,  239,  239,  223,
 /*  1310 */   239,  239,  226,  239,  239,  239,  239,  239,  232,  233,
 /*  1320 */   234,  235,  236,  239,  238,  239,  239,  239,  239,  239,
 /*  1330 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  1340 */   239,  149,  150,  151,  152,  153,  154,  155,  156,  157,
 /*  1350 */   158,  159,  160,  161,  162,  163,  164,  165,  166,  167,
 /*  1360 */   168,  239,  239,  239,  239,  239,  239,  239,  176,  239,
 /*  1370 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  1380 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  1390 */   239,  239,  200,  201,  202,  203,  204,  205,  206,  207,
 /*  1400 */   208,  209,  210,  211,  212,  213,  214,  215,  239,  239,
 /*  1410 */   218,  219,  239,  239,  239,  223,  239,  239,  226,  239,
 /*  1420 */   239,  239,  239,  239,  232,  233,  234,  235,  236,  239,
 /*  1430 */   238,  239,  239,  239,  239,  239,  149,  150,  151,  152,
 /*  1440 */   153,  154,  155,  156,  157,  158,  159,  160,  161,  162,
 /*  1450 */   163,  164,  165,  166,  167,  168,  239,   19,  239,  239,
 /*  1460 */   239,   23,  239,  176,  239,  239,  239,  239,   30,  239,
 /*  1470 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  1480 */   239,  239,  239,  239,  239,  239,  239,  200,  201,  202,
 /*  1490 */   203,  204,  205,  206,  207,  208,  209,  210,  211,  212,
 /*  1500 */   213,  214,  215,  239,  239,  218,  219,   69,   70,  239,
 /*  1510 */   223,    4,  239,  226,  239,  239,  239,  239,  239,  232,
 /*  1520 */   233,  234,  235,  236,  239,  238,   19,  239,   21,  239,
 /*  1530 */    23,  239,  239,   34,   35,  239,   29,   30,  239,  239,
 /*  1540 */    33,  239,  239,   36,   37,  239,   47,   48,   49,   50,
 /*  1550 */    51,  113,  114,  115,  116,  117,  118,  239,  239,   52,
 /*  1560 */    61,   62,  239,  239,   57,   58,   59,   60,   69,   70,
 /*  1570 */    71,   72,   73,   66,   67,   68,   69,   70,  140,  141,
 /*  1580 */   142,  143,  144,  145,  239,  239,   87,   80,  239,  239,
 /*  1590 */   239,  239,  239,   86,  239,  239,  239,  239,  239,  100,
 /*  1600 */   101,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  1610 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  239,
 /*  1620 */   113,  114,  115,  116,  117,  118,  239,  120,  239,  239,
 /*  1630 */   123,  239,  239,  239,  239,  239,  239,  130,  239,  239,
 /*  1640 */   239,  239,  135,  239,  239,  239,  139,  140,  141,  142,
 /*  1650 */   143,  144,  145,    4,    5,  239,  239,  239,  239,  239,
 /*  1660 */   239,  239,  239,  239,  239,  239,  239,  239,   19,  239,
 /*  1670 */   239,  239,   23,   47,   48,   49,   50,   51,   29,   30,
 /*  1680 */   239,  239,   33,  239,  176,   36,   37,  239,  239,  239,
 /*  1690 */   239,  239,  239,  239,  239,   69,   70,   71,   72,   73,
 /*  1700 */   239,   52,  239,  239,  239,  239,   57,   58,   59,   60,
 /*  1710 */   239,  239,  204,   87,  239,   66,   67,   68,   69,   70,
 /*  1720 */   239,  239,  239,  239,  239,  239,  100,  101,  239,   80,
 /*  1730 */   239,  223,  224,  225,  226,   86,  239,  239,  239,  239,
 /*  1740 */   232,  233,  234,  235,  236,  239,  238,  239,  239,  176,
 /*  1750 */   239,  239,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  1760 */   111,  239,  113,  114,  115,  116,  117,  118,  239,  120,
 /*  1770 */   239,  239,  123,  239,  239,  239,  176,  204,  239,  130,
 /*  1780 */   239,  239,  239,  239,  135,  239,  239,  239,  139,  140,
 /*  1790 */   141,  142,  143,  144,  145,    4,  223,  224,  225,  226,
 /*  1800 */     9,  239,  239,  239,  204,  232,  233,  234,  235,  236,
 /*  1810 */    19,  238,  239,  239,   23,    7,  239,  239,  239,  239,
 /*  1820 */    29,   30,  239,  223,   33,  225,  226,   36,   37,  239,
 /*  1830 */   239,  239,  232,  233,  234,  235,  236,  239,  238,  239,
 /*  1840 */   239,  239,  239,   52,  239,  239,   38,  239,   57,   58,
 /*  1850 */    59,   60,  239,  239,  239,  239,  239,   66,   67,   68,
 /*  1860 */    69,   70,   54,   55,   56,  239,  239,  239,  239,  239,
 /*  1870 */   239,   80,  239,  239,  239,  239,  239,   86,  239,  239,
 /*  1880 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  1890 */   239,  239,   84,   85,  103,  104,  105,  106,  107,  108,
 /*  1900 */   109,  110,  111,  239,  113,  114,  115,  116,  117,  118,
 /*  1910 */   239,  120,  239,  239,  123,  239,  239,  239,  176,  239,
 /*  1920 */   239,  130,  239,  239,  239,  239,  135,  239,  239,  239,
 /*  1930 */   139,  140,  141,  142,  143,  144,  145,    4,  239,  131,
 /*  1940 */   132,  239,  239,  239,  239,  239,  204,  239,  239,  239,
 /*  1950 */   239,  239,   19,  239,   21,  239,   23,  215,  239,  239,
 /*  1960 */   239,  239,   29,   30,  239,  223,   33,  239,  226,   36,
 /*  1970 */    37,  239,  239,  239,  232,  233,  234,  235,  236,  239,
 /*  1980 */   238,  239,  239,  239,  239,   52,  239,  239,  239,  239,
 /*  1990 */    57,   58,   59,   60,  239,  239,  239,  239,  239,   66,
 /*  2000 */    67,   68,   69,   70,  239,  239,  239,  239,  239,  239,
 /*  2010 */   239,  239,  239,   80,  239,  239,  239,  239,  239,   86,
 /*  2020 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  2030 */   239,  239,  239,  239,  239,  239,  103,  104,  105,  106,
 /*  2040 */   107,  108,  109,  110,  111,  239,  113,  114,  115,  116,
 /*  2050 */   117,  118,    7,  120,  239,  239,  123,  239,  239,  239,
 /*  2060 */   239,  239,  239,  130,  239,  239,  239,  239,  135,  239,
 /*  2070 */   239,  239,  139,  140,  141,  142,  143,  144,  145,    4,
 /*  2080 */   239,  239,  239,   38,  239,  239,  239,  239,  239,  239,
 /*  2090 */   239,  239,  239,  239,   19,  239,   21,  239,   23,   54,
 /*  2100 */    55,   56,  239,  239,   29,   30,  239,  239,   33,  239,
 /*  2110 */   176,   36,   37,  239,  239,  239,  239,  239,  239,  239,
 /*  2120 */   239,  239,  239,  239,  239,  239,  239,   52,  239,   84,
 /*  2130 */    85,  239,   57,   58,   59,   60,  239,  239,  204,  239,
 /*  2140 */   239,   66,   67,   68,   69,   70,  239,  239,  239,  239,
 /*  2150 */   239,  239,  239,  239,  239,   80,  239,  223,  239,  239,
 /*  2160 */   226,   86,  239,  239,  239,  239,  232,  233,  234,  235,
 /*  2170 */   236,  239,  238,  239,  239,  239,  131,  132,  103,  104,
 /*  2180 */   105,  106,  107,  108,  109,  110,  111,  239,  113,  114,
 /*  2190 */   115,  116,  117,  118,  239,  120,  239,  239,  123,  239,
 /*  2200 */   239,  239,  239,  239,  239,  130,  239,  239,  239,  239,
 /*  2210 */   135,  239,  239,  239,  139,  140,  141,  142,  143,  144,
 /*  2220 */   145,    4,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  2230 */   239,  239,  239,  239,  239,  239,   19,  239,   21,  239,
 /*  2240 */    23,  239,  239,  239,  239,  239,   29,   30,  239,  239,
 /*  2250 */    33,  239,  176,   36,   37,  239,  239,  239,  239,  239,
 /*  2260 */   239,  239,  239,  239,  239,  239,  239,  239,  239,   52,
 /*  2270 */   239,  239,  239,  239,   57,   58,   59,   60,  239,  239,
 /*  2280 */   204,  239,  239,   66,   67,   68,   69,   70,  239,  239,
 /*  2290 */   239,  239,  239,  239,  239,  239,  239,   80,  239,  223,
 /*  2300 */   239,  239,  226,   86,  239,  239,  239,  239,  232,  233,
 /*  2310 */   234,  235,  236,  239,  238,  239,  239,  239,  239,  239,
 /*  2320 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  239,
 /*  2330 */   113,  114,  115,  116,  117,  118,  239,  120,  239,  239,
 /*  2340 */   123,  239,  239,  176,  239,  239,  239,  130,  239,  239,
 /*  2350 */   239,  239,  135,  239,  239,  239,  139,  140,  141,  142,
 /*  2360 */   143,  144,  145,    4,  239,  239,  239,  239,  239,  239,
 /*  2370 */   239,  204,  239,  239,  239,  239,  239,  239,   19,  239,
 /*  2380 */    21,  239,   23,  239,  239,  239,  239,  239,   29,   30,
 /*  2390 */   223,  239,   33,  226,  176,   36,   37,  239,  239,  232,
 /*  2400 */   233,  234,  235,  236,  239,  238,  239,  239,  239,  239,
 /*  2410 */   239,   52,  239,  239,  239,  239,   57,   58,   59,   60,
 /*  2420 */   239,  239,  204,  239,  239,   66,   67,   68,   69,   70,
 /*  2430 */   239,  239,  239,  239,  239,  239,  239,  239,  239,   80,
 /*  2440 */   239,  223,  239,  239,  226,   86,  239,  239,  239,  239,
 /*  2450 */   232,  233,  234,  235,  236,  239,  238,  239,  239,  239,
 /*  2460 */   239,  239,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  2470 */   111,  239,  113,  114,  115,  116,  117,  118,  239,  120,
 /*  2480 */   239,  239,  123,  239,  239,  176,  239,  239,  239,  130,
 /*  2490 */   239,  239,  239,  239,  135,  239,  239,  239,  139,  140,
 /*  2500 */   141,  142,  143,  144,  145,    4,  239,  239,  239,  239,
 /*  2510 */     9,  239,  239,  204,  239,  239,  239,  239,  239,  239,
 /*  2520 */    19,  239,  239,  239,   23,  239,  239,  239,  239,  239,
 /*  2530 */    29,   30,  223,  239,   33,  226,  176,   36,   37,  239,
 /*  2540 */   239,  232,  233,  234,  235,  236,  239,  238,  239,  239,
 /*  2550 */   239,  239,  239,   52,  239,  239,  239,  239,   57,   58,
 /*  2560 */    59,   60,  239,  239,  204,  239,  239,   66,   67,   68,
 /*  2570 */    69,   70,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  2580 */   239,   80,  239,  223,  239,  239,  226,   86,  239,  239,
 /*  2590 */   239,  239,  232,  233,  234,  235,  236,  239,  238,  239,
 /*  2600 */   239,  239,  239,  239,  103,  104,  105,  106,  107,  108,
 /*  2610 */   109,  110,  111,  239,  113,  114,  115,  116,  117,  118,
 /*  2620 */   239,  120,  239,  239,  123,  239,  239,  176,  239,  239,
 /*  2630 */   239,  130,  239,  239,  239,  239,  135,  239,  239,  239,
 /*  2640 */   139,  140,  141,  142,  143,  144,  145,    4,  239,  239,
 /*  2650 */   239,  239,  239,  239,  239,  204,  239,  239,  239,  239,
 /*  2660 */   239,  239,   19,  239,  239,  239,   23,  239,  239,  239,
 /*  2670 */   239,  239,   29,   30,  223,  239,   33,  226,  176,   36,
 /*  2680 */    37,  239,  239,  232,  233,  234,  235,  236,  239,  238,
 /*  2690 */   239,  239,  239,  239,  239,   52,  239,  239,  239,  239,
 /*  2700 */    57,   58,   59,   60,  239,  239,  204,  239,  239,   66,
 /*  2710 */    67,   68,   69,   70,  239,  239,  239,  239,  239,  239,
 /*  2720 */   239,  239,  239,   80,  239,  223,  239,  239,  226,   86,
 /*  2730 */   239,  239,  239,  239,  232,  233,  234,  235,  236,  239,
 /*  2740 */   238,  239,  239,  239,  239,  239,  103,  104,  105,  106,
 /*  2750 */   107,  108,  109,  110,  111,  239,  113,  114,  115,  116,
 /*  2760 */   117,  118,  239,  120,  239,  239,  123,  239,  239,  164,
 /*  2770 */   239,  239,  239,  130,  239,  239,  239,  239,  135,  239,
 /*  2780 */   239,  176,  139,  140,  141,  142,  143,  144,  145,  239,
 /*  2790 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  2800 */   239,  239,  239,  239,  239,  200,  201,  202,  203,  204,
 /*  2810 */   205,  206,  207,  208,  209,  210,  211,  212,  213,  214,
 /*  2820 */   215,  239,  239,  218,  219,  220,  221,  239,  223,  239,
 /*  2830 */   239,  226,  239,  239,  239,  239,  239,  232,  233,  234,
 /*  2840 */   235,  236,  239,  238,  164,  239,  239,  239,  239,  169,
 /*  2850 */   239,  239,  239,  239,  239,  239,  176,  177,  239,  239,
 /*  2860 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  2870 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  2880 */   200,  201,  202,  203,  204,  205,  206,  207,  208,  209,
 /*  2890 */   210,  211,  212,  213,  214,  215,  239,  239,  218,  219,
 /*  2900 */   239,  239,  239,  223,  239,  239,  226,  239,  239,  239,
 /*  2910 */   239,  239,  232,  233,  234,  235,  236,  164,  238,  239,
 /*  2920 */   239,  239,  169,  239,  239,  239,  239,  239,  239,  176,
 /*  2930 */   177,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  2940 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  2950 */   239,  239,  239,  200,  201,  202,  203,  204,  205,  206,
 /*  2960 */   207,  208,  209,  210,  211,  212,  213,  214,  215,  239,
 /*  2970 */   164,  218,  219,  239,  239,  169,  223,  239,  239,  226,
 /*  2980 */   239,  239,  176,  177,  239,  232,  233,  234,  235,  236,
 /*  2990 */   239,  238,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  3000 */   239,  239,  239,  239,  239,  239,  200,  201,  202,  203,
 /*  3010 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  3020 */   214,  215,  164,  239,  218,  219,  239,  239,  239,  223,
 /*  3030 */   239,  239,  226,  239,  176,  239,  239,  239,  232,  233,
 /*  3040 */   234,  235,  236,  239,  238,  239,  239,  239,  239,  239,
 /*  3050 */   239,  239,  239,  239,  239,  239,  239,  239,  200,  201,
 /*  3060 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*  3070 */   212,  213,  214,  215,  239,  239,  218,  219,  239,  239,
 /*  3080 */   239,  223,  239,  164,  226,  239,  239,  239,  239,  231,
 /*  3090 */   232,  233,  234,  235,  236,  176,  238,  239,  239,  239,
 /*  3100 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  3110 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  200,
 /*  3120 */   201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
 /*  3130 */   211,  212,  213,  214,  215,  164,  239,  218,  219,  239,
 /*  3140 */   239,  239,  223,  239,  239,  226,  239,  176,  239,  239,
 /*  3150 */   231,  232,  233,  234,  235,  236,  239,  238,  239,  239,
 /*  3160 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  3170 */   239,  200,  201,  202,  203,  204,  205,  206,  207,  208,
 /*  3180 */   209,  210,  211,  212,  213,  214,  215,  164,  239,  218,
 /*  3190 */   219,  239,  239,  239,  223,  239,  239,  226,  239,  176,
 /*  3200 */   239,  239,  231,  232,  233,  234,  235,  236,  239,  238,
 /*  3210 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  3220 */   239,  239,  239,  200,  201,  202,  203,  204,  205,  206,
 /*  3230 */   207,  208,  209,  210,  211,  212,  213,  214,  215,  239,
 /*  3240 */   239,  218,  219,  239,  239,  239,  223,  239,  164,  226,
 /*  3250 */   239,  239,  239,  239,  231,  232,  233,  234,  235,  236,
 /*  3260 */   176,  238,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  3270 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  3280 */   239,  239,  239,  239,  200,  201,  202,  203,  204,  205,
 /*  3290 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
 /*  3300 */   164,  239,  218,  219,  239,  239,  239,  223,  239,  239,
 /*  3310 */   226,  239,  176,  239,  239,  231,  232,  233,  234,  235,
 /*  3320 */   236,  239,  238,  239,  239,  239,  239,  239,  239,  239,
 /*  3330 */   239,  239,  239,  239,  239,  239,  200,  201,  202,  203,
 /*  3340 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  3350 */   214,  215,  164,  239,  218,  219,  239,  239,  239,  223,
 /*  3360 */   239,  239,  226,  239,  176,  239,  239,  231,  232,  233,
 /*  3370 */   234,  235,  236,  239,  238,  239,  239,  239,  239,  239,
 /*  3380 */   239,  239,  239,  239,  239,  239,  239,  239,  200,  201,
 /*  3390 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*  3400 */   212,  213,  214,  215,  239,  239,  218,  219,  239,  239,
 /*  3410 */   239,  223,  239,  164,  226,  239,  239,  239,  169,  231,
 /*  3420 */   232,  233,  234,  235,  236,  176,  238,  239,  239,  239,
 /*  3430 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  3440 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  200,
 /*  3450 */   201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
 /*  3460 */   211,  212,  213,  214,  215,  164,  239,  218,  219,  239,
 /*  3470 */   239,  239,  223,  239,  239,  226,  239,  176,  239,  239,
 /*  3480 */   239,  232,  233,  234,  235,  236,  239,  238,  239,  239,
 /*  3490 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  3500 */   239,  200,  201,  202,  203,  204,  205,  206,  207,  208,
 /*  3510 */   209,  210,  211,  212,  213,  214,  215,  164,  239,  218,
 /*  3520 */   219,  239,  239,  239,  223,  239,  239,  226,  239,  176,
 /*  3530 */   239,  239,  239,  232,  233,  234,  235,  236,  239,  238,
 /*  3540 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  3550 */   239,  239,  239,  200,  201,  202,  203,  204,  205,  206,
 /*  3560 */   207,  208,  209,  210,  211,  212,  213,  214,  215,  239,
 /*  3570 */   239,  218,  219,  239,  239,  239,  223,  239,  164,  226,
 /*  3580 */   239,  239,  239,  239,  239,  232,  233,  234,  235,  236,
 /*  3590 */   176,  238,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  3600 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  3610 */   239,  239,  239,  239,  200,  201,  202,  203,  204,  205,
 /*  3620 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
 /*  3630 */   164,  239,  218,  219,  239,  239,  239,  223,  239,  239,
 /*  3640 */   226,  239,  176,  239,  239,  239,  232,  233,  234,  235,
 /*  3650 */   236,  239,  238,  239,  239,  239,  239,  239,  239,  239,
 /*  3660 */   239,  239,  239,  239,  239,  239,  200,  201,  202,  203,
 /*  3670 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  3680 */   214,  215,  164,  239,  218,  219,  239,  239,  239,  223,
 /*  3690 */   239,  239,  226,  239,  176,  239,  239,  239,  232,  233,
 /*  3700 */   234,  235,  236,  239,  238,  239,  239,  239,  239,  239,
 /*  3710 */   239,  239,  239,  239,  239,  239,  239,  239,  200,  201,
 /*  3720 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*  3730 */   212,  213,  214,  215,  239,  239,  218,  219,  239,  239,
 /*  3740 */   239,  223,  239,  164,  226,  239,  239,  239,  239,  239,
 /*  3750 */   232,  233,  234,  235,  236,  176,  238,  239,  239,  239,
 /*  3760 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  3770 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  200,
 /*  3780 */   201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
 /*  3790 */   211,  212,  213,  214,  215,  164,  239,  218,  219,  239,
 /*  3800 */   239,  239,  223,  239,  239,  226,  239,  176,  239,  239,
 /*  3810 */   239,  232,  233,  234,  235,  236,  239,  238,  239,  239,
 /*  3820 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  3830 */   239,  200,  201,  202,  203,  204,  205,  206,  207,  208,
 /*  3840 */   209,  210,  211,  212,  213,  214,  215,  164,  239,  218,
 /*  3850 */   219,  239,  239,  239,  223,  239,  239,  226,  239,  176,
 /*  3860 */   239,  239,  239,  232,  233,  234,  235,  236,  239,  238,
 /*  3870 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  3880 */   239,  239,  239,  200,  201,  202,  203,  204,  205,  206,
 /*  3890 */   207,  208,  209,  210,  211,  212,  213,  214,  215,  239,
 /*  3900 */   239,  218,  219,  239,  239,  239,  223,  239,  164,  226,
 /*  3910 */   239,  239,  239,  239,  239,  232,  233,  234,  235,  236,
 /*  3920 */   176,  238,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  3930 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  3940 */   239,  239,  239,  239,  200,  201,  202,  203,  204,  205,
 /*  3950 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
 /*  3960 */   164,  239,  218,  219,  239,  239,  239,  223,  239,  239,
 /*  3970 */   226,  239,  176,  239,  239,  239,  232,  233,  234,  235,
 /*  3980 */   236,  239,  238,  239,  239,  239,  239,  239,  239,  239,
 /*  3990 */   239,  239,  239,  239,  239,  239,  200,  201,  202,  203,
 /*  4000 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  4010 */   214,  215,  164,  239,  218,  219,  239,  239,  239,  223,
 /*  4020 */   239,  239,  226,  239,  176,  239,  239,  239,  232,  233,
 /*  4030 */   234,  235,  236,  239,  238,  239,  239,  239,  239,  239,
 /*  4040 */   239,  239,  239,  239,  239,  239,  239,  239,  200,  201,
 /*  4050 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*  4060 */   212,  213,  214,  215,  239,  239,  218,  219,  239,  239,
 /*  4070 */   239,  223,  239,  164,  226,  239,  239,  239,  239,  239,
 /*  4080 */   232,  233,  234,  235,  236,  176,  238,  239,  239,  239,
 /*  4090 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  4100 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  200,
 /*  4110 */   201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
 /*  4120 */   211,  212,  213,  214,  215,  164,  239,  218,  219,  239,
 /*  4130 */   239,  239,  223,  239,  239,  226,  239,  176,  239,  239,
 /*  4140 */   239,  232,  233,  234,  235,  236,  239,  238,  239,  239,
 /*  4150 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  4160 */   239,  200,  201,  202,  203,  204,  205,  206,  207,  208,
 /*  4170 */   209,  210,  211,  212,  213,  214,  215,  164,  239,  218,
 /*  4180 */   219,  239,  239,  239,  223,  239,  239,  226,  239,  176,
 /*  4190 */   239,  239,  239,  232,  233,  234,  235,  236,  239,  238,
 /*  4200 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  4210 */   239,  239,  239,  200,  201,  202,  203,  204,  205,  206,
 /*  4220 */   207,  208,  209,  210,  211,  212,  213,  214,  215,  239,
 /*  4230 */   239,  218,  219,  239,  239,  239,  223,  239,  164,  226,
 /*  4240 */   239,  239,  239,  239,  239,  232,  233,  234,  235,  236,
 /*  4250 */   176,  238,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  4260 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  4270 */   239,  239,  239,  239,  200,  201,  202,  203,  204,  205,
 /*  4280 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
 /*  4290 */   164,  239,  218,  219,  239,  239,  239,  223,  239,  239,
 /*  4300 */   226,  239,  176,  239,  239,  239,  232,  233,  234,  235,
 /*  4310 */   236,  239,  238,  239,  239,  239,  239,  239,  239,  239,
 /*  4320 */   239,  239,  239,  239,  239,  239,  200,  201,  202,  203,
 /*  4330 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  4340 */   214,  215,  164,  239,  218,  219,  239,  239,  239,  223,
 /*  4350 */   239,  239,  226,  239,  176,  239,  239,  239,  232,  233,
 /*  4360 */   234,  235,  236,  239,  238,  239,  239,  239,  239,  239,
 /*  4370 */   239,  239,  239,  239,  239,  239,  239,  239,  200,  201,
 /*  4380 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*  4390 */   212,  213,  214,  215,  239,  239,  218,  219,  239,  239,
 /*  4400 */   239,  223,  239,  164,  226,  239,  239,  239,  239,  239,
 /*  4410 */   232,  233,  234,  235,  236,  176,  238,  239,  239,  239,
 /*  4420 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  4430 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  200,
 /*  4440 */   201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
 /*  4450 */   211,  212,  213,  214,  215,  164,  239,  218,  219,  239,
 /*  4460 */   239,  239,  223,  239,  239,  226,  239,  176,  239,  239,
 /*  4470 */   239,  232,  233,  234,  235,  236,  239,  238,  239,  239,
 /*  4480 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  4490 */   239,  200,  201,  202,  203,  204,  205,  206,  207,  208,
 /*  4500 */   209,  210,  211,  212,  213,  214,  215,  164,  239,  218,
 /*  4510 */   219,  239,  239,  239,  223,  239,  239,  226,  239,  176,
 /*  4520 */   239,  239,  239,  232,  233,  234,  235,  236,  239,  238,
 /*  4530 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  4540 */   239,  239,  239,  200,  201,  202,  203,  204,  205,  206,
 /*  4550 */   207,  208,  209,  210,  211,  212,  213,  214,  215,  239,
 /*  4560 */   239,  218,  219,  239,  239,  239,  223,  239,  164,  226,
 /*  4570 */   239,  239,  239,  239,  239,  232,  233,  234,  235,  236,
 /*  4580 */   176,  238,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  4590 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  4600 */   239,  239,  239,  239,  200,  201,  202,  203,  204,  205,
 /*  4610 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
 /*  4620 */   164,  239,  218,  219,  239,  239,  239,  223,  239,  239,
 /*  4630 */   226,  239,  176,  239,  239,  239,  232,  233,  234,  235,
 /*  4640 */   236,  239,  238,  239,  239,  239,  239,  239,  239,  239,
 /*  4650 */   239,  239,  239,  239,  239,  239,  200,  201,  202,  203,
 /*  4660 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  4670 */   214,  215,  164,  239,  218,  219,  239,  239,  239,  223,
 /*  4680 */   239,  239,  226,  239,  176,  239,  239,  239,  232,  233,
 /*  4690 */   234,  235,  236,  239,  238,  239,  239,  239,  239,  239,
 /*  4700 */   239,  239,  239,  239,  239,  239,  239,  239,  200,  201,
 /*  4710 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*  4720 */   212,  213,  214,  215,  239,  239,  218,  219,  239,  239,
 /*  4730 */   239,  223,  239,  164,  226,  239,  239,  239,  239,  239,
 /*  4740 */   232,  233,  234,  235,  236,  176,  238,  239,  239,  239,
 /*  4750 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  4760 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  200,
 /*  4770 */   201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
 /*  4780 */   211,  212,  213,  214,  215,  164,  239,  218,  219,  239,
 /*  4790 */   239,  239,  223,  239,  239,  226,  239,  176,  239,  239,
 /*  4800 */   239,  232,  233,  234,  235,  236,  239,  238,  239,  239,
 /*  4810 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  4820 */   239,  200,  201,  202,  203,  204,  205,  206,  207,  208,
 /*  4830 */   209,  210,  211,  212,  213,  214,  215,  164,  239,  218,
 /*  4840 */   219,  239,  239,  239,  223,  239,  239,  226,  239,  176,
 /*  4850 */   239,  239,  239,  232,  233,  234,  235,  236,  239,  238,
 /*  4860 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  4870 */   239,  239,  239,  200,  201,  202,  203,  204,  205,  206,
 /*  4880 */   207,  208,  209,  210,  211,  212,  213,  214,  215,  239,
 /*  4890 */   239,  218,  219,  239,  239,  239,  223,  239,  164,  226,
 /*  4900 */   239,  239,  239,  239,  239,  232,  233,  234,  235,  236,
 /*  4910 */   176,  238,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  4920 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  4930 */   239,  239,  239,  239,  200,  201,  202,  203,  204,  205,
 /*  4940 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
 /*  4950 */   164,  239,  218,  219,  239,  239,  239,  223,  239,  239,
 /*  4960 */   226,  239,  176,  239,  239,  239,  232,  233,  234,  235,
 /*  4970 */   236,  239,  238,  239,  239,  239,  239,  239,  239,  239,
 /*  4980 */   239,  239,  239,  239,  239,  239,  200,  201,  202,  203,
 /*  4990 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  5000 */   214,  215,  164,  239,  218,  219,  239,  239,  239,  223,
 /*  5010 */   239,  239,  226,  239,  176,  239,  239,  239,  232,  233,
 /*  5020 */   234,  235,  236,  239,  238,  239,  239,  239,  239,  239,
 /*  5030 */   239,  239,  239,  239,  239,  239,  239,  239,  200,  201,
 /*  5040 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*  5050 */   212,  213,  214,  215,  239,  239,  218,  219,  239,  239,
 /*  5060 */   239,  223,  239,  164,  226,  239,  239,  239,  239,  239,
 /*  5070 */   232,  233,  234,  235,  236,  176,  238,  239,  239,  239,
 /*  5080 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  5090 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  200,
 /*  5100 */   201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
 /*  5110 */   211,  212,  213,  214,  215,  164,  239,  218,  219,  239,
 /*  5120 */   239,  239,  223,  239,  239,  226,  239,  176,  239,  239,
 /*  5130 */   239,  232,  233,  234,  235,  236,  239,  238,  239,  239,
 /*  5140 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  5150 */   239,  200,  201,  202,  203,  204,  205,  206,  207,  208,
 /*  5160 */   209,  210,  211,  212,  213,  214,  215,  164,  239,  218,
 /*  5170 */   219,  239,  239,  239,  223,  239,  239,  226,  239,  176,
 /*  5180 */   239,  239,  239,  232,  233,  234,  235,  236,  239,  238,
 /*  5190 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  5200 */   239,  239,  239,  200,  201,  202,  203,  204,  205,  206,
 /*  5210 */   207,  208,  209,  210,  211,  212,  213,  214,  215,  239,
 /*  5220 */   239,  218,  219,  239,  239,  239,  223,  239,  164,  226,
 /*  5230 */   239,  239,  239,  239,  239,  232,  233,  234,  235,  236,
 /*  5240 */   176,  238,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  5250 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  5260 */   239,  239,  239,  239,  200,  201,  202,  203,  204,  205,
 /*  5270 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
 /*  5280 */   164,  239,  218,  219,  239,  239,  239,  223,  239,  239,
 /*  5290 */   226,  239,  176,  239,  239,  239,  232,  233,  234,  235,
 /*  5300 */   236,  239,  238,  239,  239,  239,  239,  239,  239,  239,
 /*  5310 */   239,  239,  239,  239,  239,  239,  200,  201,  202,  203,
 /*  5320 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  5330 */   214,  215,  164,  239,  218,  219,  239,  239,  239,  223,
 /*  5340 */   239,  239,  226,  239,  176,  239,  239,  239,  232,  233,
 /*  5350 */   234,  235,  236,  239,  238,  239,  239,  239,  239,  239,
 /*  5360 */   239,  239,  239,  239,  239,  239,  239,  239,  200,  201,
 /*  5370 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*  5380 */   212,  213,  214,  215,  239,  239,  218,  219,  239,  239,
 /*  5390 */   239,  223,  239,  164,  226,  239,  239,  239,  239,  239,
 /*  5400 */   232,  233,  234,  235,  236,  176,  238,  239,  239,  239,
 /*  5410 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  5420 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  200,
 /*  5430 */   201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
 /*  5440 */   211,  212,  213,  214,  215,  164,  239,  218,  219,  239,
 /*  5450 */   239,  239,  223,  239,  239,  226,  239,  176,  239,  239,
 /*  5460 */   239,  232,  233,  234,  235,  236,  239,  238,  239,  239,
 /*  5470 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  5480 */   239,  200,  201,  202,  203,  204,  205,  206,  207,  208,
 /*  5490 */   209,  210,  211,  212,  213,  214,  215,  164,  239,  218,
 /*  5500 */   219,  239,  239,  239,  223,  239,  239,  226,  239,  176,
 /*  5510 */   239,  239,  239,  232,  233,  234,  235,  236,  239,  238,
 /*  5520 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  5530 */   239,  239,  239,  200,  201,  202,  203,  204,  205,  206,
 /*  5540 */   207,  208,  209,  210,  211,  212,  213,  214,  215,  239,
 /*  5550 */   239,  218,  219,  239,  239,  239,  223,  239,  164,  226,
 /*  5560 */   239,  239,  239,  239,  239,  232,  233,  234,  235,  236,
 /*  5570 */   176,  238,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  5580 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  5590 */   239,  239,  239,  239,  200,  201,  202,  203,  204,  205,
 /*  5600 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
 /*  5610 */   164,  239,  218,  219,  239,  239,  239,  223,  239,  239,
 /*  5620 */   226,  239,  176,  239,  239,  239,  232,  233,  234,  235,
 /*  5630 */   236,  239,  238,  239,  239,  239,  239,  239,  239,  239,
 /*  5640 */   239,  239,  239,  239,  239,  239,  200,  201,  202,  203,
 /*  5650 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  5660 */   214,  215,  164,  239,  218,  219,  239,  239,  239,  223,
 /*  5670 */   239,  239,  226,  239,  176,  239,  239,  239,  232,  233,
 /*  5680 */   234,  235,  236,  239,  238,  239,  239,  239,  239,  239,
 /*  5690 */   239,  239,  239,  239,  239,  239,  239,  239,  200,  201,
 /*  5700 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*  5710 */   212,  213,  214,  215,  239,  239,  218,  219,  239,  239,
 /*  5720 */   239,  223,  239,  164,  226,  239,  239,  239,  239,  239,
 /*  5730 */   232,  233,  234,  235,  236,  176,  238,  239,  239,  239,
 /*  5740 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  5750 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  200,
 /*  5760 */   201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
 /*  5770 */   211,  212,  213,  214,  215,  164,  239,  218,  219,  239,
 /*  5780 */   239,  239,  223,  239,  239,  226,  239,  176,  239,  239,
 /*  5790 */   239,  232,  233,  234,  235,  236,  239,  238,  239,  239,
 /*  5800 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  5810 */   239,  200,  201,  202,  203,  204,  205,  206,  207,  208,
 /*  5820 */   209,  210,  211,  212,  213,  214,  215,  164,  239,  218,
 /*  5830 */   219,  239,  239,  239,  223,  239,  239,  226,  239,  176,
 /*  5840 */   239,  239,  239,  232,  233,  234,  235,  236,  239,  238,
 /*  5850 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  5860 */   239,  239,  239,  200,  201,  202,  203,  204,  205,  206,
 /*  5870 */   207,  208,  209,  210,  211,  212,  213,  214,  215,  239,
 /*  5880 */   239,  218,  219,  239,  239,  239,  223,  239,  164,  226,
 /*  5890 */   239,  239,  239,  239,  239,  232,  233,  234,  235,  236,
 /*  5900 */   176,  238,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  5910 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  5920 */   239,  239,  239,  239,  200,  201,  202,  203,  204,  205,
 /*  5930 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
 /*  5940 */   164,  239,  218,  219,  239,  239,  239,  223,  239,  239,
 /*  5950 */   226,  239,  176,  239,  239,  239,  232,  233,  234,  235,
 /*  5960 */   236,  239,  238,  239,  239,  239,  239,  239,  239,  239,
 /*  5970 */   239,  239,  239,  239,  239,  239,  200,  201,  202,  203,
 /*  5980 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  5990 */   214,  215,  164,  239,  218,  219,  239,  239,  239,  223,
 /*  6000 */   239,  239,  226,  239,  176,  239,  239,  239,  232,  233,
 /*  6010 */   234,  235,  236,  239,  238,  239,  239,  239,  239,  239,
 /*  6020 */   239,  239,  239,  239,  239,  239,  239,  239,  200,  201,
 /*  6030 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*  6040 */   212,  213,  214,  215,  239,  239,  218,  219,  239,  239,
 /*  6050 */   239,  223,  239,  164,  226,  239,  239,  239,  239,  239,
 /*  6060 */   232,  233,  234,  235,  236,  176,  238,  239,  239,  239,
 /*  6070 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  6080 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  200,
 /*  6090 */   201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
 /*  6100 */   211,  212,  213,  214,  215,  164,  239,  218,  219,  239,
 /*  6110 */   239,  239,  223,  239,  239,  226,  239,  176,  239,  239,
 /*  6120 */   239,  232,  233,  234,  235,  236,  239,  238,  239,  239,
 /*  6130 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  6140 */   239,  200,  201,  202,  203,  204,  205,  206,  207,  208,
 /*  6150 */   209,  210,  211,  212,  213,  214,  215,  164,  239,  218,
 /*  6160 */   219,  239,  239,  239,  223,  239,  239,  226,  239,  176,
 /*  6170 */   239,  239,  239,  232,  233,  234,  235,  236,  239,  238,
 /*  6180 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  6190 */   239,  239,  239,  200,  201,  202,  203,  204,  205,  206,
 /*  6200 */   207,  208,  209,  210,  211,  212,  213,  214,  215,  239,
 /*  6210 */   239,  218,  219,  239,  239,  239,  223,  239,  164,  226,
 /*  6220 */   239,  239,  239,  239,  239,  232,  233,  234,  235,  236,
 /*  6230 */   176,  238,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  6240 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  6250 */   239,  239,  239,  239,  200,  201,  202,  203,  204,  205,
 /*  6260 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
 /*  6270 */   164,  239,  218,  219,  239,  239,  239,  223,  239,  239,
 /*  6280 */   226,  239,  176,  239,  239,  239,  232,  233,  234,  235,
 /*  6290 */   236,  239,  238,  239,  239,  239,  239,  239,  239,  239,
 /*  6300 */   239,  239,  239,  239,  239,  239,  200,  201,  202,  203,
 /*  6310 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  6320 */   214,  215,  164,  239,  218,  219,  239,  239,  239,  223,
 /*  6330 */   239,  239,  226,  239,  176,  239,  239,  239,  232,  233,
 /*  6340 */   234,  235,  236,  239,  238,  239,  239,  239,  239,  239,
 /*  6350 */   239,  239,  239,  239,  239,  239,  239,  239,  200,  201,
 /*  6360 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*  6370 */   212,  213,  214,  215,  239,  239,  218,  219,  239,  239,
 /*  6380 */   239,  223,  239,  164,  226,  239,  239,  239,  239,  239,
 /*  6390 */   232,  233,  234,  235,  236,  176,  238,  239,  239,  239,
 /*  6400 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  6410 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  200,
 /*  6420 */   201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
 /*  6430 */   211,  212,  213,  214,  215,  164,  239,  218,  219,  239,
 /*  6440 */   239,  239,  223,  239,  239,  226,  239,  176,  239,  239,
 /*  6450 */   239,  232,  233,  234,  235,  236,  239,  238,  239,  239,
 /*  6460 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  6470 */   239,  200,  201,  202,  203,  204,  205,  206,  207,  208,
 /*  6480 */   209,  210,  211,  212,  213,  214,  215,  164,  239,  218,
 /*  6490 */   219,  239,  239,  239,  223,  239,  239,  226,  239,  176,
 /*  6500 */   239,  239,  239,  232,  233,  234,  235,  236,  239,  238,
 /*  6510 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  6520 */   239,  239,  239,  200,  201,  202,  203,  204,  205,  206,
 /*  6530 */   207,  208,  209,  210,  211,  212,  213,  214,  215,  239,
 /*  6540 */   239,  218,  219,  239,  239,  239,  223,  239,  164,  226,
 /*  6550 */   239,  239,  239,  239,  239,  232,  233,  234,  235,  236,
 /*  6560 */   176,  238,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  6570 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  6580 */   239,  239,  239,  239,  200,  201,  202,  203,  204,  205,
 /*  6590 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
 /*  6600 */   164,  239,  218,  219,  239,  239,  239,  223,  239,  239,
 /*  6610 */   226,  239,  176,  239,  239,  239,  232,  233,  234,  235,
 /*  6620 */   236,  239,  238,  239,  239,  239,  239,  239,  239,  239,
 /*  6630 */   239,  239,  239,  239,  239,  239,  200,  201,  202,  203,
 /*  6640 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  6650 */   214,  215,  164,  239,  218,  219,  239,  239,  239,  223,
 /*  6660 */   239,  239,  226,  239,  176,  239,  239,  239,  232,  233,
 /*  6670 */   234,  235,  236,  239,  238,  239,  239,  239,  239,  239,
 /*  6680 */   239,  239,  239,  239,  239,  239,  239,  239,  200,  201,
 /*  6690 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*  6700 */   212,  213,  214,  215,  239,  239,  218,  219,  239,  239,
 /*  6710 */   239,  223,  239,  164,  226,  239,  239,  239,  239,  239,
 /*  6720 */   232,  233,  234,  235,  236,  176,  238,  239,  239,  239,
 /*  6730 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  6740 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  200,
 /*  6750 */   201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
 /*  6760 */   211,  212,  213,  214,  215,  164,  239,  218,  219,  239,
 /*  6770 */   239,  239,  223,  239,  239,  226,  239,  176,  239,  239,
 /*  6780 */   239,  232,  233,  234,  235,  236,  239,  238,  239,  239,
 /*  6790 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  6800 */   239,  200,  201,  202,  203,  204,  205,  206,  207,  208,
 /*  6810 */   209,  210,  211,  212,  213,  214,  215,  164,  239,  218,
 /*  6820 */   219,  239,  239,  239,  223,  239,  239,  226,  239,  176,
 /*  6830 */   239,  239,  239,  232,  233,  234,  235,  236,  239,  238,
 /*  6840 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  6850 */   239,  239,  239,  200,  201,  202,  203,  204,  205,  206,
 /*  6860 */   207,  208,  209,  210,  211,  212,  213,  214,  215,  239,
 /*  6870 */   239,  218,  219,  239,  239,  239,  223,  239,  164,  226,
 /*  6880 */   239,  239,  239,  239,  239,  232,  233,  234,  235,  236,
 /*  6890 */   176,  238,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  6900 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  6910 */   239,  239,  239,  239,  200,  201,  202,  203,  204,  205,
 /*  6920 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
 /*  6930 */   164,  239,  218,  219,  239,  239,  239,  223,  239,  239,
 /*  6940 */   226,  239,  176,  239,  239,  239,  232,  233,  234,  235,
 /*  6950 */   236,  239,  238,  239,  239,  239,  239,  239,  239,  239,
 /*  6960 */   239,  239,  239,  239,  239,  239,  200,  201,  202,  203,
 /*  6970 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  6980 */   214,  215,  164,  239,  218,  219,  239,  239,  239,  223,
 /*  6990 */   239,  239,  226,  239,  176,  239,  239,  239,  232,  233,
 /*  7000 */   234,  235,  236,  239,  238,  239,  239,  239,  239,  239,
 /*  7010 */   239,  239,  239,  239,  239,  239,  239,  239,  200,  201,
 /*  7020 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*  7030 */   212,  213,  214,  215,  239,  239,  218,  219,  239,  239,
 /*  7040 */   239,  223,  239,  164,  226,  239,  239,  239,  239,  239,
 /*  7050 */   232,  233,  234,  235,  236,  176,  238,  239,  239,  239,
 /*  7060 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  7070 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  200,
 /*  7080 */   201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
 /*  7090 */   211,  212,  213,  214,  215,  164,  239,  218,  219,  239,
 /*  7100 */   239,  239,  223,  239,  239,  226,  239,  176,  239,  239,
 /*  7110 */   239,  232,  233,  234,  235,  236,  239,  238,  239,  239,
 /*  7120 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  7130 */   239,  200,  201,  202,  203,  204,  205,  206,  207,  208,
 /*  7140 */   209,  210,  211,  212,  213,  214,  215,  164,  239,  218,
 /*  7150 */   219,  239,  239,  239,  223,  239,  239,  226,  239,  176,
 /*  7160 */   239,  239,  239,  232,  233,  234,  235,  236,  239,  238,
 /*  7170 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  7180 */   239,  239,  239,  200,  201,  202,  203,  204,  205,  206,
 /*  7190 */   207,  208,  209,  210,  211,  212,  213,  214,  215,  239,
 /*  7200 */   239,  218,  219,  239,  239,  239,  223,  239,  164,  226,
 /*  7210 */   239,  239,  239,  239,  239,  232,  233,  234,  235,  236,
 /*  7220 */   176,  238,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  7230 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  7240 */   239,  239,  239,  239,  200,  201,  202,  203,  204,  205,
 /*  7250 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
 /*  7260 */   164,  239,  218,  219,  239,  239,  239,  223,  239,  239,
 /*  7270 */   226,  239,  176,  239,  239,  239,  232,  233,  234,  235,
 /*  7280 */   236,  239,  238,  239,  239,  239,  239,  239,  239,  239,
 /*  7290 */   239,  239,  239,  239,  239,  239,  200,  201,  202,  203,
 /*  7300 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  7310 */   214,  215,  164,  239,  218,  219,  239,  239,  239,  223,
 /*  7320 */   239,  239,  226,  239,  176,  239,  239,  239,  232,  233,
 /*  7330 */   234,  235,  236,  239,  238,  239,  239,  239,  239,  239,
 /*  7340 */   239,  239,  239,  239,  239,  239,  239,  239,  200,  201,
 /*  7350 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*  7360 */   212,  213,  214,  215,  239,  239,  218,  219,  239,  239,
 /*  7370 */   239,  223,  239,  164,  226,  239,  239,  239,  239,  239,
 /*  7380 */   232,  233,  234,  235,  236,  176,  238,  239,  239,  239,
 /*  7390 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  7400 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  200,
 /*  7410 */   201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
 /*  7420 */   211,  212,  213,  214,  215,  164,  239,  218,  219,  239,
 /*  7430 */   239,  239,  223,  239,  239,  226,  239,  176,  239,  239,
 /*  7440 */   239,  232,  233,  234,  235,  236,  239,  238,  239,  239,
 /*  7450 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  7460 */   239,  200,  201,  202,  203,  204,  205,  206,  207,  208,
 /*  7470 */   209,  210,  211,  212,  213,  214,  215,  164,  239,  218,
 /*  7480 */   219,  239,  239,  239,  223,  239,  239,  226,  239,  176,
 /*  7490 */   239,  239,  239,  232,  233,  234,  235,  236,  239,  238,
 /*  7500 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  7510 */   239,  239,  239,  200,  201,  202,  203,  204,  205,  206,
 /*  7520 */   207,  208,  209,  210,  211,  212,  213,  214,  215,  239,
 /*  7530 */   239,  218,  219,  239,  239,  239,  223,  239,  164,  226,
 /*  7540 */   239,  239,  239,  239,  239,  232,  233,  234,  235,  236,
 /*  7550 */   176,  238,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  7560 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  7570 */   239,  239,  239,  239,  200,  201,  202,  203,  204,  205,
 /*  7580 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
 /*  7590 */   164,  239,  218,  219,  239,  239,  239,  223,  239,  239,
 /*  7600 */   226,  239,  176,  239,  239,  239,  232,  233,  234,  235,
 /*  7610 */   236,  239,  238,  239,  239,  239,  239,  239,  239,  239,
 /*  7620 */   239,  239,  239,  239,  239,  239,  200,  201,  202,  203,
 /*  7630 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  7640 */   214,  215,  164,  239,  218,  219,  239,  239,  239,  223,
 /*  7650 */   239,  239,  226,  239,  176,  239,  239,  239,  232,  233,
 /*  7660 */   234,  235,  236,  239,  238,  239,  239,  239,  239,  239,
 /*  7670 */   239,  239,  239,  239,  239,  239,  239,  239,  200,  201,
 /*  7680 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*  7690 */   212,  213,  214,  215,  239,  239,  218,  219,  239,  239,
 /*  7700 */   239,  223,  239,  164,  226,  239,  239,  239,  239,  239,
 /*  7710 */   232,  233,  234,  235,  236,  176,  238,  239,  239,  239,
 /*  7720 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  7730 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  200,
 /*  7740 */   201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
 /*  7750 */   211,  212,  213,  214,  215,  164,  239,  218,  219,  239,
 /*  7760 */   239,  239,  223,  239,  239,  226,  239,  176,  239,  239,
 /*  7770 */   239,  232,  233,  234,  235,  236,  239,  238,  239,  239,
 /*  7780 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  7790 */   239,  200,  201,  202,  203,  204,  205,  206,  207,  208,
 /*  7800 */   209,  210,  211,  212,  213,  214,  215,  164,  239,  218,
 /*  7810 */   219,  239,  239,  239,  223,  239,  239,  226,  239,  176,
 /*  7820 */   239,  239,  239,  232,  233,  234,  235,  236,  239,  238,
 /*  7830 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  7840 */   239,  239,  239,  200,  201,  202,  203,  204,  205,  206,
 /*  7850 */   207,  208,  209,  210,  211,  212,  213,  214,  215,  239,
 /*  7860 */   239,  218,  219,  239,  239,  239,  223,  239,  164,  226,
 /*  7870 */   239,  239,  239,  239,  239,  232,  233,  234,  235,  236,
 /*  7880 */   176,  238,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  7890 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  7900 */   239,  239,  239,  239,  200,  201,  202,  203,  204,  205,
 /*  7910 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
 /*  7920 */   164,  239,  218,  219,  239,  239,  239,  223,  239,  239,
 /*  7930 */   226,  239,  176,  239,  239,  239,  232,  233,  234,  235,
 /*  7940 */   236,  239,  238,  239,  239,  239,  239,  239,  239,  239,
 /*  7950 */   239,  239,  239,  239,  239,  239,  200,  201,  202,  203,
 /*  7960 */   204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
 /*  7970 */   214,  215,  164,  239,  218,  219,  239,  239,  239,  223,
 /*  7980 */   239,  239,  226,  239,  176,  239,  239,  239,  232,  233,
 /*  7990 */   234,  235,  236,  239,  238,  239,  239,  239,  239,  239,
 /*  8000 */   239,  239,  239,  239,  239,  239,  239,  239,  200,  201,
 /*  8010 */   202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
 /*  8020 */   212,  213,  214,  215,  239,  239,  218,  219,  239,  239,
 /*  8030 */   239,  223,  239,  164,  226,  239,  239,  239,  239,  239,
 /*  8040 */   232,  233,  234,  235,  236,  176,  238,  239,  239,  239,
 /*  8050 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  8060 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  200,
 /*  8070 */   201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
 /*  8080 */   211,  212,  213,  214,  215,  239,  239,  218,  219,  239,
 /*  8090 */   239,  239,  223,  239,  239,  226,  239,  239,  239,  239,
 /*  8100 */   239,  232,  233,  234,  235,  236,   21,  238,  239,   24,
 /*  8110 */    25,   26,   27,   28,  239,  239,  239,  239,  239,   34,
 /*  8120 */    35,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  8130 */   239,  239,   47,   48,   49,   50,   51,  239,  239,  239,
 /*  8140 */   239,  239,  239,  239,  239,  239,   61,   62,   63,   64,
 /*  8150 */   239,  239,  239,  239,   69,   70,   71,   72,   73,  239,
 /*  8160 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  8170 */   239,  239,   87,  239,  239,  239,  239,  239,  239,  239,
 /*  8180 */   239,  239,  239,  239,  239,  100,  101,  239,  239,  239,
 /*  8190 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  8200 */   239,  239,  239,  239,  239,  239,  121,  122,   21,  239,
 /*  8210 */   239,   24,   25,   26,   27,   28,  239,  239,  133,  239,
 /*  8220 */   239,   34,   35,  239,  239,  239,  239,  239,  239,  239,
 /*  8230 */   239,  239,  239,  239,   47,   48,   49,   50,   51,  239,
 /*  8240 */   239,  239,  239,  239,  239,  239,  239,  239,   61,   62,
 /*  8250 */    63,  239,  239,  239,  239,  239,   69,   70,   71,   72,
 /*  8260 */    73,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  8270 */   239,  239,  239,  239,   87,  239,  239,  239,  239,  239,
 /*  8280 */   239,  239,  239,  239,  239,  239,  239,  100,  101,  239,
 /*  8290 */   239,  239,  239,  239,    5,  239,  239,  239,  239,  239,
 /*  8300 */   239,  239,  239,  239,  239,  239,  239,  239,  121,  122,
 /*  8310 */    21,  239,  239,   24,   25,   26,   27,   28,  239,  239,
 /*  8320 */   133,  239,  239,   34,   35,  239,  239,  239,  239,  239,
 /*  8330 */   239,  239,  239,  239,  239,  239,   47,   48,   49,   50,
 /*  8340 */    51,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  8350 */    61,   62,   63,  239,  239,  239,  239,  239,   69,   70,
 /*  8360 */    71,   72,   73,  239,  239,  239,  239,  239,  239,  239,
 /*  8370 */   239,  239,  239,  239,  239,  239,   87,  239,  239,  239,
 /*  8380 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  100,
 /*  8390 */   101,  239,  239,  239,  239,  239,    5,  239,  239,  239,
 /*  8400 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  8410 */   121,  122,   21,  239,  239,   24,   25,   26,   27,   28,
 /*  8420 */   239,  239,  239,  239,  239,   34,   35,  239,  239,  239,
 /*  8430 */   239,  239,  239,  239,  239,  239,  239,  239,   47,   48,
 /*  8440 */    49,   50,   51,  239,  239,  239,  239,  239,  239,  239,
 /*  8450 */   239,  239,   61,   62,   63,  239,  239,  239,  239,  239,
 /*  8460 */    69,   70,   71,   72,   73,   10,  239,  239,  239,  239,
 /*  8470 */   239,  239,  239,  239,  239,  239,   21,  239,   87,   24,
 /*  8480 */    25,   26,   27,   28,  239,  239,  239,  239,  239,   34,
 /*  8490 */    35,  100,  101,  239,  239,  239,  239,  239,  239,  239,
 /*  8500 */   239,  239,   47,   48,   49,   50,   51,  239,  239,  239,
 /*  8510 */   239,  239,  121,  122,  239,  239,   61,   62,   63,  239,
 /*  8520 */   239,  239,  239,  239,   69,   70,   71,   72,   73,  239,
 /*  8530 */   239,  239,  239,  239,  239,  239,  239,  239,  239,   20,
 /*  8540 */    21,  239,   87,   24,   25,   26,   27,   28,  239,  239,
 /*  8550 */   239,  239,  239,   34,   35,  100,  101,  239,  239,  239,
 /*  8560 */   239,  239,  239,  239,  239,  239,   47,   48,   49,   50,
 /*  8570 */    51,  239,  239,  239,  239,  239,  121,  122,  239,  239,
 /*  8580 */    61,   62,   63,  239,  239,  239,  239,  239,   69,   70,
 /*  8590 */    71,   72,   73,  239,  239,  239,  239,  239,  239,  239,
 /*  8600 */   239,  239,  239,   20,   21,  239,   87,   24,   25,   26,
 /*  8610 */    27,   28,  239,  239,  239,  239,  239,   34,   35,  100,
 /*  8620 */   101,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  8630 */    47,   48,   49,   50,   51,  239,  239,  239,  239,  239,
 /*  8640 */   121,  122,  239,  239,   61,   62,   63,  239,  239,  239,
 /*  8650 */   239,  239,   69,   70,   71,   72,   73,  239,  239,  239,
 /*  8660 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  8670 */    87,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  8680 */   239,  239,  239,  100,  101,  239,  239,  239,  239,  239,
 /*  8690 */   239,  239,  239,  239,    9,  239,  239,  239,  239,  239,
 /*  8700 */   239,  239,  239,  239,  121,  122,   21,  239,  239,   24,
 /*  8710 */    25,   26,   27,   28,  239,  239,  239,  239,  239,   34,
 /*  8720 */    35,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  8730 */   239,  239,   47,   48,   49,   50,   51,  239,  239,  239,
 /*  8740 */   239,  239,  239,  239,  239,  239,   61,   62,   63,  239,
 /*  8750 */   239,  239,  239,  239,   69,   70,   71,   72,   73,  239,
 /*  8760 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  8770 */   239,  239,   87,  239,  239,  239,  239,  239,  239,  239,
 /*  8780 */   239,  239,  239,  239,  239,  100,  101,  239,  239,  239,
 /*  8790 */   239,  239,  239,  239,    7,  239,  239,  239,  239,  239,
 /*  8800 */   239,  239,  239,  239,  239,  239,  121,  122,   21,  239,
 /*  8810 */   239,   24,   25,   26,   27,   28,  239,  239,  239,  239,
 /*  8820 */   239,   34,   35,  239,  239,  239,  239,  239,  239,  239,
 /*  8830 */   239,  239,  239,  239,   47,   48,   49,   50,   51,  239,
 /*  8840 */   239,  239,  239,  239,  239,  239,  239,  239,   61,   62,
 /*  8850 */    63,  239,  239,  239,  239,  239,   69,   70,   71,   72,
 /*  8860 */    73,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  8870 */   239,  239,  239,  239,   87,  239,  239,  239,  239,  239,
 /*  8880 */   239,  239,  239,  239,  239,  239,  239,  100,  101,  239,
 /*  8890 */   239,  239,  239,  239,  239,  239,  239,  239,    9,  239,
 /*  8900 */   239,  239,  239,  239,  239,  239,  239,  239,  121,  122,
 /*  8910 */    21,  239,  239,   24,   25,   26,   27,   28,  239,  239,
 /*  8920 */   239,  239,  239,   34,   35,  239,  239,  239,  239,  239,
 /*  8930 */   239,  239,  239,  239,  239,  239,   47,   48,   49,   50,
 /*  8940 */    51,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  8950 */    61,   62,   63,  239,  239,  239,  239,  239,   69,   70,
 /*  8960 */    71,   72,   73,  239,  239,  239,  239,  239,  239,  239,
 /*  8970 */   239,  239,  239,  239,  239,  239,   87,  239,  239,  239,
 /*  8980 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  100,
 /*  8990 */   101,  239,  239,  239,  239,  239,  239,  239,    7,  239,
 /*  9000 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  9010 */   121,  122,   21,  239,  239,   24,   25,   26,   27,   28,
 /*  9020 */   239,  239,  239,  239,  239,   34,   35,  239,  239,  239,
 /*  9030 */   239,  239,  239,  239,  239,  239,  239,  239,   47,   48,
 /*  9040 */    49,   50,   51,  239,  239,  239,  239,  239,  239,  239,
 /*  9050 */   239,  239,   61,   62,   63,  239,  239,  239,  239,  239,
 /*  9060 */    69,   70,   71,   72,   73,  239,  239,  239,  239,  239,
 /*  9070 */   239,  239,  239,  239,  239,  239,   21,  239,   87,   24,
 /*  9080 */    25,   26,   27,   28,  239,  239,  239,  239,  239,   34,
 /*  9090 */    35,  100,  101,  239,  239,  239,  239,  239,  239,  239,
 /*  9100 */   239,  239,   47,   48,   49,   50,   51,  239,  239,  239,
 /*  9110 */   239,  239,  121,  122,  239,  239,   61,   62,   63,   64,
 /*  9120 */   239,  239,  239,  239,   69,   70,   71,   72,   73,  239,
 /*  9130 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  9140 */   239,  239,   87,  239,  239,  239,  239,  239,  239,  239,
 /*  9150 */   239,  239,  239,  239,  239,  100,  101,  239,  239,  239,
 /*  9160 */   239,  239,    5,  239,  239,  239,  239,  239,  239,  239,
 /*  9170 */   239,  239,  239,  239,  239,  239,  121,  122,   21,  239,
 /*  9180 */   239,   24,   25,   26,   27,   28,  239,  239,  239,  239,
 /*  9190 */   239,   34,   35,  239,  239,  239,  239,  239,  239,  239,
 /*  9200 */   239,  239,  239,  239,   47,   48,   49,   50,   51,  239,
 /*  9210 */   239,  239,  239,  239,  239,  239,  239,  239,   61,   62,
 /*  9220 */    63,  239,  239,  239,  239,  239,   69,   70,   71,   72,
 /*  9230 */    73,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  9240 */   239,  239,   21,  239,   87,   24,   25,   26,   27,   28,
 /*  9250 */   239,  239,  239,  239,  239,   34,   35,  100,  101,  239,
 /*  9260 */   239,  239,  239,  239,  239,  239,   45,  239,   47,   48,
 /*  9270 */    49,   50,   51,  239,  239,  239,  239,  239,  121,  122,
 /*  9280 */   239,  239,   61,   62,   63,  239,  239,  239,  239,  239,
 /*  9290 */    69,   70,   71,   72,   73,  239,  239,  239,  239,  239,
 /*  9300 */   239,  239,  239,  239,  239,  239,  239,  239,   87,  239,
 /*  9310 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  9320 */   239,  100,  101,  239,  239,  239,  239,  239,    5,  239,
 /*  9330 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  9340 */   239,  239,  121,  122,   21,  239,  239,   24,   25,   26,
 /*  9350 */    27,   28,  239,  239,  239,  239,  239,   34,   35,  239,
 /*  9360 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  9370 */    47,   48,   49,   50,   51,  239,  239,  239,  239,  239,
 /*  9380 */   239,  239,  239,  239,   61,   62,   63,  239,  239,  239,
 /*  9390 */   239,  239,   69,   70,   71,   72,   73,  239,  239,  239,
 /*  9400 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  9410 */    87,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  9420 */   239,  239,  239,  100,  101,  239,  239,  239,  239,  239,
 /*  9430 */     5,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  9440 */   239,  239,  239,  239,  121,  122,   21,  239,  239,   24,
 /*  9450 */    25,   26,   27,   28,  239,  239,  239,  239,  239,   34,
 /*  9460 */    35,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  9470 */   239,  239,   47,   48,   49,   50,   51,  239,  239,  239,
 /*  9480 */   239,  239,  239,  239,  239,  239,   61,   62,   63,  239,
 /*  9490 */   239,  239,  239,  239,   69,   70,   71,   72,   73,  239,
 /*  9500 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  9510 */   239,  239,   87,  239,  239,  239,  239,  239,  239,  239,
 /*  9520 */   239,  239,  239,  239,  239,  100,  101,  239,  239,  239,
 /*  9530 */   239,  239,    5,  239,  239,  239,  239,  239,  239,  239,
 /*  9540 */   239,  239,  239,  239,  239,  239,  121,  122,   21,  239,
 /*  9550 */   239,   24,   25,   26,   27,   28,  239,  239,  239,  239,
 /*  9560 */   239,   34,   35,  239,  239,  239,  239,  239,  239,  239,
 /*  9570 */   239,  239,  239,  239,   47,   48,   49,   50,   51,  239,
 /*  9580 */   239,  239,  239,  239,  239,  239,  239,  239,   61,   62,
 /*  9590 */    63,  239,  239,  239,  239,  239,   69,   70,   71,   72,
 /*  9600 */    73,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  9610 */   239,  239,  239,  239,   87,  239,  239,  239,  239,  239,
 /*  9620 */   239,  239,  239,  239,  239,  239,  239,  100,  101,  239,
 /*  9630 */   239,  239,  239,  239,    5,  239,  239,  239,  239,  239,
 /*  9640 */   239,  239,  239,  239,  239,  239,  239,  239,  121,  122,
 /*  9650 */    21,  239,  239,   24,   25,   26,   27,   28,  239,  239,
 /*  9660 */   239,  239,  239,   34,   35,  239,  239,  239,  239,  239,
 /*  9670 */   239,  239,  239,  239,  239,  239,   47,   48,   49,   50,
 /*  9680 */    51,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  9690 */    61,   62,   63,  239,  239,  239,  239,  239,   69,   70,
 /*  9700 */    71,   72,   73,  239,  239,  239,  239,  239,  239,  239,
 /*  9710 */   239,  239,  239,  239,   21,  239,   87,   24,   25,   26,
 /*  9720 */    27,   28,  239,  239,  239,  239,  239,   34,   35,  100,
 /*  9730 */   101,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  9740 */    47,   48,   49,   50,   51,  239,  239,  239,  239,  239,
 /*  9750 */   121,  122,  239,  239,   61,   62,   63,  239,  239,  239,
 /*  9760 */   239,  239,   69,   70,   71,   72,   73,  239,  239,  239,
 /*  9770 */   239,  239,  239,  239,  239,  239,  239,  239,   21,  239,
 /*  9780 */    87,   24,   25,   26,  239,   28,  239,  239,  239,  239,
 /*  9790 */   239,   34,   35,  100,  101,  239,  239,  239,  239,  239,
 /*  9800 */   239,  239,  239,  239,   47,   48,   49,   50,   51,  239,
 /*  9810 */   239,  239,  239,  239,  121,  122,  239,  239,   61,   62,
 /*  9820 */    63,  239,  239,  239,  239,  239,   69,   70,   71,   72,
 /*  9830 */    73,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /*  9840 */   239,  239,   21,  239,   87,   24,   25,   26,  239,  239,
 /*  9850 */   239,  239,  239,  239,  239,   34,   35,  100,  101,  239,
 /*  9860 */   239,  239,  239,  239,  239,  239,  239,  239,   47,   48,
 /*  9870 */    49,   50,   51,  239,  239,  239,  239,  239,  121,  122,
 /*  9880 */   239,  239,   61,   62,   63,  239,  239,  239,  239,  239,
 /*  9890 */    69,   70,   71,   72,   73,  239,  239,  239,  239,  239,
 /*  9900 */   239,  239,  239,  239,   21,  239,  239,   24,   87,   26,
 /*  9910 */   239,  239,  239,  239,  239,  239,  239,   34,   35,  239,
 /*  9920 */   239,  100,  101,  239,  239,  239,  239,  239,  239,  239,
 /*  9930 */    47,   48,   49,   50,   51,  239,  239,  239,  239,  239,
 /*  9940 */   239,  239,  121,  122,   61,   62,   63,  239,  239,  239,
 /*  9950 */   239,  239,   69,   70,   71,   72,   73,  239,  239,  239,
 /*  9960 */   239,  239,  239,  239,  239,  239,   21,  239,  239,   24,
 /*  9970 */    87,   26,  239,  239,  239,  239,  239,  239,  239,   34,
 /*  9980 */    35,  239,  239,  100,  101,  239,  239,  239,  239,  239,
 /*  9990 */   239,  239,   47,   48,   49,   50,   51,  239,  239,  239,
 /* 10000 */   239,  239,  239,  239,  121,  122,   61,   62,  239,  239,
 /* 10010 */   239,  239,  239,  239,   69,   70,   71,   72,   73,  239,
 /* 10020 */   239,  239,  239,  239,  239,  239,  239,  239,   21,  239,
 /* 10030 */   239,  239,   87,  239,  239,  239,  239,  239,  239,  239,
 /* 10040 */   239,   34,   35,  239,  239,  100,  101,  239,  239,  239,
 /* 10050 */   239,  239,  239,  239,   47,   48,   49,   50,   51,  239,
 /* 10060 */   239,  239,  239,  239,  239,  239,  121,  122,   61,   62,
 /* 10070 */   239,  239,  239,  239,  239,  239,   69,   70,   71,   72,
 /* 10080 */    73,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /* 10090 */    21,  239,  239,  239,   87,  239,  239,  239,  239,  239,
 /* 10100 */   239,  239,  239,   34,   35,  239,  239,  100,  101,  239,
 /* 10110 */   239,  239,  239,  239,  239,  239,   47,   48,   49,   50,
 /* 10120 */    51,  239,  239,  239,  239,  239,  239,  239,  121,  122,
 /* 10130 */    61,   62,  239,  239,  239,  239,  239,  239,   69,   70,
 /* 10140 */    71,   72,   73,  239,  239,  239,  239,  239,  239,  239,
 /* 10150 */   239,  239,   21,  239,  239,  239,   87,  239,  239,  239,
 /* 10160 */   239,  239,  239,  239,  239,   34,   35,  239,  239,  100,
 /* 10170 */   101,  239,  239,  239,  239,  239,  239,  239,   47,   48,
 /* 10180 */    49,   50,   51,  239,  239,  239,  239,  239,  239,  239,
 /* 10190 */   239,  122,   61,   62,  239,  239,  239,  239,  239,  239,
 /* 10200 */    69,   70,   71,   72,   73,  239,  239,  239,  239,  239,
 /* 10210 */   239,  239,  239,  239,  239,  239,  239,  239,   87,  239,
 /* 10220 */   239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
 /* 10230 */   239,  100,  101,
};
#define YY_SHIFT_USE_DFLT (-133)
#define YY_SHIFT_MAX 377
static const short yy_shift_ofst[] = {
 /*     0 */  -133,    0,  142,  284,  284,  284,  284,  284,  284,  284,
 /*    10 */   284,  284,  284,  284,  284, 1507, 2643, 2643, 2643, 2643,
 /*    20 */  2643, 2643, 2643, 2643, 2643, 2643, 2643, 1649, 1791, 1933,
 /*    30 */  2075, 2217, 2359, 2501, 2643, 2643, 2643, 2643, 2643, 2643,
 /*    40 */  2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643,
 /*    50 */  2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643,
 /*    60 */  2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643,
 /*    70 */  2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643,
 /*    80 */  2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643,
 /*    90 */  2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643,
 /*   100 */  2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643,
 /*   110 */  2643,   24,   24,   25,   24,  132,  132,  132,  -10,   68,
 /*   120 */   132,  132,  132,  132,  132,  132,  210,  210,  112,  254,
 /*   130 */  1808, 2045, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
 /*   140 */  1438,  274,  316,  318,   82,   82,   82, -132,    6,  -95,
 /*   150 */     4,   -5,   -5,    4,   59, 8085,  521,  -60,  198,  198,
 /*   160 */   -95,   90,  259,  259,  259,  227,   59,  320,  353,  377,
 /*   170 */     6,    6,  377,  330,  337,  377,  445,  364,  375,  491,
 /*   180 */   445,  364,  445,  364,  470,  491,  427, -133, -133, -133,
 /*   190 */  -133, -133, -133, -133, -133, -133, 8187, 8289, 8391, 8455,
 /*   200 */  8519, 8583, 8685, 8787, 8889, 8991, 9055, 9157, 9221, 9323,
 /*   210 */  9425, 9527, 9629, 9693, 9693, 9693, 9693, 9693, 9693, 9693,
 /*   220 */  9693, 9693, 9693, 9693, 9693, 9693, 9693, 9693, 9693, 9757,
 /*   230 */  9821, 9883, 9883, 9883, 9883, 9883, 9883, 9883, 9883, 9883,
 /*   240 */  9883, 9883, 9883, 9883, 9883, 9883, 9945, 10007, 10007, 10069,
 /*   250 */  10131, 1499, 1499, 1499, 1499, 1499,  437,  638, 1626, 1626,
 /*   260 */  1626, 1626,  -45,  -45,  224,  224,  224,  224,  224,  162,
 /*   270 */   389,  -14,  226,  459,  376,  466,  308,  468,  469,  376,
 /*   280 */   313,  148,  319,  446,  450,   13,  439,  440,  441,  574,
 /*   290 */   576,  577,  580,  581,  522,  582,  517,  543,  605,  606,
 /*   300 */   517,  611,  612,  615,  585,  623,  624,  607,  627,  649,
 /*   310 */   650,  652,  653,  658,  517,  517,  659,  605,  660,  535,
 /*   320 */   536,  537,  538,  662,  663,  670,  645,  542,  673,  675,
 /*   330 */   676,  677,  549,  566,  695,  688,  706,  707,  710,  655,
 /*   340 */   692,  588,  720,  703,  593,  736,  749,  755,  731,  758,
 /*   350 */   759,  733,  760,  632,  746,  747,  740,  750,  739,  743,
 /*   360 */   753,  766,  748,  751,  738,  752,  773,  741,  754,  777,
 /*   370 */   756,  779,  766,  662,  782,  783,  804,  809,
};
#define YY_REDUCE_USE_DFLT (-225)
#define YY_REDUCE_MAX 195
static const short yy_reduce_ofst[] = {
 /*     0 */  -135,  282,  282,  388,  483,  589,  684,  790,  885,  282,
 /*    10 */   282,  991, 1086, 1192, 1287, 2605, 2680, 2753, 2806, 2858,
 /*    20 */  2919, 2971, 3023, 3084, 3136, 3188, 3249, 3301, 3353, 3414,
 /*    30 */  3466, 3518, 3579, 3631, 3683, 3744, 3796, 3848, 3909, 3961,
 /*    40 */  4013, 4074, 4126, 4178, 4239, 4291, 4343, 4404, 4456, 4508,
 /*    50 */  4569, 4621, 4673, 4734, 4786, 4838, 4899, 4951, 5003, 5064,
 /*    60 */  5116, 5168, 5229, 5281, 5333, 5394, 5446, 5498, 5559, 5611,
 /*    70 */  5663, 5724, 5776, 5828, 5889, 5941, 5993, 6054, 6106, 6158,
 /*    80 */  6219, 6271, 6323, 6384, 6436, 6488, 6549, 6601, 6653, 6714,
 /*    90 */  6766, 6818, 6879, 6931, 6983, 7044, 7096, 7148, 7209, 7261,
 /*   100 */  7313, 7374, 7426, 7478, 7539, 7591, 7643, 7704, 7756, 7808,
 /*   110 */  7869, 1508, 1573, -141, 1600,    1,  143, 1742, 1934, 2076,
 /*   120 */  2167, 2218, 2309, 2360, 2451, 2502, -185,  -43,  137,  137,
 /*   130 */   137,  137,  -92,   50,  192,  248,  293,  399,  448,  494,
 /*   140 */   592, -224, -216, -216, -112,  -32,   30,   -3,  184,  -70,
 /*   150 */    12,  -94,  -12,  119,  144,   -4,  -16,  -35,  -19,    5,
 /*   160 */    37,   43,   84,  114,  120,  146,   94,  107,  158,  253,
 /*   170 */   241,  251,  302,  291,  299,  331,  312,  321,  326,  314,
 /*   180 */   335,  336,  340,  369,  368,  360,  382,  414,  415,  378,
 /*   190 */   379,  380,  381,  417,  387,  392,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   563,  858,  858,  858,  858,  858,  858,  858,  858,  623,
 /*    10 */   624,  858,  858,  858,  858,  751,  613,  613,  613,  842,
 /*    20 */   842,  842,  842,  842,  842,  842,  858,  858,  858,  858,
 /*    30 */   858,  753,  858,  858,  858,  858,  858,  858,  858,  858,
 /*    40 */   858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
 /*    50 */   858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
 /*    60 */   858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
 /*    70 */   858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
 /*    80 */   858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
 /*    90 */   858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
 /*   100 */   858,  588,  590,  592,  858,  858,  858,  858,  858,  858,
 /*   110 */   858,  817,  817,  858,  817,  858,  858,  858,  858,  858,
 /*   120 */   858,  858,  858,  858,  858,  858,  858,  858,  658,  658,
 /*   130 */   658,  658,  858,  858,  858,  858,  858,  858,  858,  858,
 /*   140 */   858,  858,  858,  858,  633,  633,  633,  858,  597,  858,
 /*   150 */   602,  858,  858,  602,  819,  858,  659,  858,  833,  835,
 /*   160 */   858,  858,  858,  858,  858,  858,  820,  825,  754,  858,
 /*   170 */   858,  598,  858,  622,  858,  858,  672,  676,  858,  858,
 /*   180 */   672,  676,  672,  676,  674,  858,  622,  563,  563,  646,
 /*   190 */   646,  646,  646,  563,  622,  622,  858,  858,  858,  840,
 /*   200 */   755,  759,  858,  858,  858,  858,  858,  858,  858,  858,
 /*   210 */   858,  858,  858,  705,  706,  707,  708,  757,  758,  761,
 /*   220 */   762,  760,  756,  719,  718,  587,  589,  591,  593,  772,
 /*   230 */   773,  703,  797,  812,  801,  802,  803,  804,  805,  806,
 /*   240 */   807,  808,  809,  810,  811,  770,  720,  771,  769,  788,
 /*   250 */   787,  783,  784,  785,  786,  789,  683,  818,  779,  780,
 /*   260 */   781,  782,  790,  791,  777,  778,  764,  765,  768,  858,
 /*   270 */   858,  858,  858,  858,  834,  858,  732,  858,  858,  836,
 /*   280 */   858,  627,  858,  858,  858,  858,  858,  858,  858,  697,
 /*   290 */   858,  858,  858,  858,  855,  828,  776,  855,  733,  858,
 /*   300 */   766,  829,  831,  858,  799,  854,  858,  858,  858,  858,
 /*   310 */   858,  858,  858,  858,  775,  774,  858,  858,  858,  858,
 /*   320 */   858,  858,  858,  586,  594,  858,  858,  858,  858,  858,
 /*   330 */   858,  858,  858,  858,  858,  858,  858,  858,  858,  732,
 /*   340 */   858,  858,  858,  629,  858,  630,  636,  858,  858,  858,
 /*   350 */   858,  858,  858,  858,  652,  654,  858,  858,  858,  858,
 /*   360 */   858,  677,  858,  858,  858,  858,  858,  858,  858,  858,
 /*   370 */   858,  858,  675,  614,  858,  858,  858,  858,  564,  565,
 /*   380 */   566,  567,  568,  569,  570,  571,  572,  573,  574,  575,
 /*   390 */   576,  577,  578,  579,  680,  681,  682,  684,  685,  686,
 /*   400 */   687,  688,  689,  690,  691,  692,  693,  694,  695,  696,
 /*   410 */   698,  699,  700,  821,  823,  701,  711,  826,  827,  702,
 /*   420 */   710,  704,  709,  792,  828,  838,  831,  832,  856,  857,
 /*   430 */   721,  722,  723,  724,  725,  726,  727,  728,  729,  730,
 /*   440 */   731,  738,  739,  740,  741,  742,  743,  744,  745,  746,
 /*   450 */   747,  748,  749,  750,  767,  793,  830,  794,  795,  796,
 /*   460 */   798,  800,  814,  815,  813,  816,  853,  849,  852,  752,
 /*   470 */   763,  841,  850,  851,  845,  848,  846,  843,  847,  844,
 /*   480 */   839,  824,  837,  822,  580,  581,  582,  583,  584,  585,
 /*   490 */   713,  714,  715,  818,  712,  595,  596,  600,  601,  599,
 /*   500 */   603,  608,  612,  615,  616,  617,  618,  628,  733,  734,
 /*   510 */   735,  736,  737,  717,  716,  631,  632,  634,  635,  637,
 /*   520 */   639,  640,  641,  642,  647,  648,  653,  655,  649,  656,
 /*   530 */   650,  670,  671,  651,  657,  663,  664,  665,  666,  667,
 /*   540 */   668,  669,  660,  662,  679,  678,  673,  643,  644,  645,
 /*   550 */   625,  626,  619,  620,  621,  609,  611,  610,  604,  605,
 /*   560 */   606,  607,
};
#define YY_SZ_ACTTAB (int)(sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  rphpParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void rphpParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "T_WHITESPACE",  "T_OPEN_TAG",    "T_CLOSE_TAG", 
  "T_LEFTPAREN",   "T_RIGHTPAREN",  "T_LEFTCURLY",   "T_RIGHTCURLY",
  "T_LEFTSQUARE",  "T_RIGHTSQUARE",  "T_COMMA",       "T_SINGLELINE_COMMENT",
  "T_MULTILINE_COMMENT",  "T_DOC_COMMENT",  "T_INLINE_HTML",  "T_WHILE",     
  "T_ENDWHILE",    "T_ELSE",        "T_ELSEIF",      "T_ARRAY",     
  "T_ARROWKEY",    "T_AND",         "T_ASSIGN",      "T_DQ_STRING", 
  "T_BOOLEAN_AND",  "T_BOOLEAN_AND_LIT",  "T_BOOLEAN_OR",  "T_BOOLEAN_OR_LIT",
  "T_BOOLEAN_XOR_LIT",  "T_BOOLEAN_NOT",  "T_IDENTIFIER",  "T_GLOBAL",    
  "T_FUNCTION",    "T_EMPTY",       "T_EQUAL",       "T_NOT_EQUAL", 
  "T_ISSET",       "T_UNSET",       "T_VAR",         "T_CLASS",     
  "T_CLASSDEREF",  "T_FOREACH",     "T_ENDFOREACH",  "T_FOR",       
  "T_ENDFOR",      "T_AS",          "T_RETURN",      "T_DOT",       
  "T_GREATER_THAN",  "T_LESS_THAN",   "T_GREATER_OR_EQUAL",  "T_LESS_OR_EQUAL",
  "T_LIST",        "T_EXTENDS",     "T_PUBLIC",      "T_PRIVATE",   
  "T_PROTECTED",   "T_INCLUDE",     "T_INCLUDE_ONCE",  "T_REQUIRE",   
  "T_REQUIRE_ONCE",  "T_IDENTICAL",   "T_NOT_IDENTICAL",  "T_QUESTION",  
  "T_COLON",       "T_DBL_COLON",   "T_INC",         "T_DEC",       
  "T_EXIT",        "T_MINUS",       "T_PLUS",        "T_DIV",       
  "T_MOD",         "T_MULT",        "T_SWITCH",      "T_ENDSWITCH", 
  "T_CASE",        "T_BREAK",       "T_CONTINUE",    "T_DEFAULT",   
  "T_CLONE",       "T_TRY",         "T_CATCH",       "T_THROW",     
  "T_STATIC",      "T_CONST",       "T_AT",          "T_INSTANCEOF",
  "T_PLUS_EQUAL",  "T_MINUS_EQUAL",  "T_EVAL",        "T_SR_EQUAL",  
  "T_SL_EQUAL",    "T_XOR_EQUAL",   "T_OR_EQUAL",    "T_AND_EQUAL", 
  "T_MOD_EQUAL",   "T_CONCAT_EQUAL",  "T_DIV_EQUAL",   "T_MUL_EQUAL", 
  "T_SR",          "T_SL",          "T_NAMESPACE",   "T_INT_CAST",  
  "T_FLOAT_CAST",  "T_STRING_CAST",  "T_UNICODE_CAST",  "T_BINARY_CAST",
  "T_ARRAY_CAST",  "T_OBJECT_CAST",  "T_UNSET_CAST",  "T_BOOL_CAST", 
  "T_GOTO",        "T_MAGIC_FILE",  "T_MAGIC_LINE",  "T_MAGIC_NS",  
  "T_MAGIC_CLASS",  "T_MAGIC_FUNCTION",  "T_MAGIC_METHOD",  "T_TICK",      
  "T_TILDE",       "T_PIPE",        "T_CARET",       "T_PRINT",     
  "T_INTERFACE",   "T_DQ_DONE",     "T_DQ_DQ",       "T_DQ_NEWLINE",
  "T_DQ_VARIABLE",  "T_DQ_ESCAPE",   "T_NEW",         "T_ABSTRACT",  
  "T_FINAL",       "T_SEMI",        "T_ECHO",        "T_VARIABLE",  
  "T_IF",          "T_DO",          "T_IMPLEMENTS",  "T_DOLLAR",    
  "T_SQ_STRING",   "T_LNUMBER",     "T_DNUMBER",     "T_TRUE",      
  "T_FALSE",       "T_NULL",        "error",         "module",      
  "statement_list",  "statement",     "statementBlock",  "inlineHTML",  
  "functionDecl",  "classDecl",     "ifBlock",       "forEach",     
  "forStmt",       "doStmt",        "whileStmt",     "switchStmt",  
  "tryCatch",      "staticDecl",    "echo",          "throw",       
  "expr",          "return",        "break",         "continue",    
  "global",        "commaExprList",  "globalVarList",  "catch",       
  "moreCatches",   "nonEmptyCatches",  "elseSingle",    "elseSeries",  
  "var",           "forExpr",       "switchCaseList",  "caseList",    
  "caseSeparator",  "staticVarList",  "staticScalar",  "formalParam", 
  "maybeHint",     "formalParamList",  "signature",     "classExtends",
  "classImplements",  "classStatements",  "interfaceExtends",  "classStatement",
  "classVarFlags",  "classVar",      "classConstantDecl",  "methodFlags", 
  "methodBody",    "nonEmptyMemberFlags",  "memberFlag",    "idList",      
  "baseExpr",      "assignment",    "opAssignment",  "listAssignment",
  "functionInvoke",  "constructorInvoke",  "unaryOp",       "binaryOp",    
  "builtin",       "typeCast",      "preOp",         "postOp",      
  "conditionalExpr",  "scalar",        "literalArray",  "rVar",        
  "commaVarList",  "globalVar",     "literal",       "literalMagic",
  "arrayItemList",  "arrayItems",    "maybeComma",    "maybeDynamicID",
  "listAssignmentList",  "listElement",   "varWithFunCalls",  "varPropertyList",
  "varProperty",   "objProperty",   "maybeMethodInvoke",  "argList",     
  "varNoObjects",  "refVar",        "varVar",        "staticMember",
  "baseVar",       "arrayIndices",  "literalID",   
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "module ::= statement_list",
 /*   1 */ "statement_list ::=",
 /*   2 */ "statement_list ::= statement_list statement",
 /*   3 */ "statement ::= statementBlock",
 /*   4 */ "statement ::= inlineHTML",
 /*   5 */ "statement ::= functionDecl",
 /*   6 */ "statement ::= classDecl",
 /*   7 */ "statement ::= ifBlock",
 /*   8 */ "statement ::= forEach",
 /*   9 */ "statement ::= forStmt",
 /*  10 */ "statement ::= doStmt",
 /*  11 */ "statement ::= whileStmt",
 /*  12 */ "statement ::= switchStmt",
 /*  13 */ "statement ::= tryCatch",
 /*  14 */ "statement ::= staticDecl T_SEMI",
 /*  15 */ "statement ::= echo T_SEMI",
 /*  16 */ "statement ::= throw T_SEMI",
 /*  17 */ "statement ::= expr T_SEMI",
 /*  18 */ "statement ::= return T_SEMI",
 /*  19 */ "statement ::= break T_SEMI",
 /*  20 */ "statement ::= continue T_SEMI",
 /*  21 */ "statement ::= global T_SEMI",
 /*  22 */ "statement ::= T_SEMI",
 /*  23 */ "statementBlock ::= T_LEFTCURLY statement_list T_RIGHTCURLY",
 /*  24 */ "echo ::= T_ECHO commaExprList",
 /*  25 */ "throw ::= T_THROW expr",
 /*  26 */ "return ::= T_RETURN",
 /*  27 */ "return ::= T_RETURN expr",
 /*  28 */ "break ::= T_BREAK",
 /*  29 */ "break ::= T_BREAK expr",
 /*  30 */ "continue ::= T_CONTINUE",
 /*  31 */ "continue ::= T_CONTINUE expr",
 /*  32 */ "global ::= T_GLOBAL globalVarList",
 /*  33 */ "inlineHTML ::= T_INLINE_HTML",
 /*  34 */ "tryCatch ::= T_TRY statementBlock catch moreCatches",
 /*  35 */ "moreCatches ::=",
 /*  36 */ "moreCatches ::= nonEmptyCatches",
 /*  37 */ "nonEmptyCatches ::= catch",
 /*  38 */ "nonEmptyCatches ::= nonEmptyCatches catch",
 /*  39 */ "catch ::= T_CATCH T_LEFTPAREN T_IDENTIFIER T_VARIABLE T_RIGHTPAREN statementBlock",
 /*  40 */ "elseSingle ::=",
 /*  41 */ "elseSingle ::= T_ELSE statement",
 /*  42 */ "elseSeries ::= T_ELSEIF T_LEFTPAREN expr T_RIGHTPAREN statement elseSingle",
 /*  43 */ "elseSeries ::= T_ELSEIF T_LEFTPAREN expr T_RIGHTPAREN statement elseSeries",
 /*  44 */ "ifBlock ::= T_IF T_LEFTPAREN expr T_RIGHTPAREN statement elseSeries",
 /*  45 */ "ifBlock ::= T_IF T_LEFTPAREN expr T_RIGHTPAREN statement elseSingle",
 /*  46 */ "forEach ::= T_FOREACH T_LEFTPAREN expr T_AS var T_RIGHTPAREN statement",
 /*  47 */ "forEach ::= T_FOREACH T_LEFTPAREN expr T_AS var T_ARROWKEY var T_RIGHTPAREN statement",
 /*  48 */ "forEach ::= T_FOREACH T_LEFTPAREN expr T_AS T_AND var T_RIGHTPAREN statement",
 /*  49 */ "forEach ::= T_FOREACH T_LEFTPAREN expr T_AS var T_ARROWKEY T_AND var T_RIGHTPAREN statement",
 /*  50 */ "forStmt ::= T_FOR T_LEFTPAREN forExpr T_SEMI forExpr T_SEMI forExpr T_RIGHTPAREN statement",
 /*  51 */ "forExpr ::=",
 /*  52 */ "forExpr ::= commaExprList",
 /*  53 */ "doStmt ::= T_DO statement T_WHILE T_LEFTPAREN expr T_RIGHTPAREN",
 /*  54 */ "whileStmt ::= T_WHILE T_LEFTPAREN expr T_RIGHTPAREN statement",
 /*  55 */ "switchStmt ::= T_SWITCH T_LEFTPAREN expr T_RIGHTPAREN switchCaseList",
 /*  56 */ "switchCaseList ::= T_LEFTCURLY caseList T_RIGHTCURLY",
 /*  57 */ "switchCaseList ::= T_LEFTCURLY T_SEMI caseList T_RIGHTCURLY",
 /*  58 */ "switchCaseList ::= T_COLON caseList T_ENDSWITCH",
 /*  59 */ "switchCaseList ::= T_COLON T_SEMI caseList T_ENDSWITCH",
 /*  60 */ "caseList ::=",
 /*  61 */ "caseList ::= caseList T_CASE expr caseSeparator statement_list",
 /*  62 */ "caseList ::= caseList T_DEFAULT caseSeparator statement_list",
 /*  63 */ "caseSeparator ::= T_COLON",
 /*  64 */ "caseSeparator ::= T_SEMI",
 /*  65 */ "staticDecl ::= T_STATIC staticVarList",
 /*  66 */ "staticDecl ::= T_STATIC staticVarList T_ASSIGN staticScalar",
 /*  67 */ "formalParam ::= maybeHint T_VARIABLE",
 /*  68 */ "formalParam ::= maybeHint T_AND T_VARIABLE",
 /*  69 */ "formalParam ::= maybeHint T_VARIABLE T_ASSIGN staticScalar",
 /*  70 */ "formalParam ::= maybeHint T_AND T_VARIABLE T_ASSIGN staticScalar",
 /*  71 */ "maybeHint ::=",
 /*  72 */ "maybeHint ::= T_ARRAY",
 /*  73 */ "maybeHint ::= T_IDENTIFIER",
 /*  74 */ "formalParamList ::= formalParam",
 /*  75 */ "formalParamList ::= formalParam T_COMMA formalParamList",
 /*  76 */ "formalParamList ::=",
 /*  77 */ "signature ::= T_IDENTIFIER T_LEFTPAREN formalParamList T_RIGHTPAREN",
 /*  78 */ "signature ::= T_AND T_IDENTIFIER T_LEFTPAREN formalParamList T_RIGHTPAREN",
 /*  79 */ "functionDecl ::= T_FUNCTION signature statementBlock",
 /*  80 */ "classDecl ::= T_CLASS T_IDENTIFIER classExtends classImplements T_LEFTCURLY classStatements T_RIGHTCURLY",
 /*  81 */ "classDecl ::= T_FINAL T_CLASS T_IDENTIFIER classExtends classImplements T_LEFTCURLY classStatements T_RIGHTCURLY",
 /*  82 */ "classDecl ::= T_ABSTRACT T_CLASS T_IDENTIFIER classExtends classImplements T_LEFTCURLY classStatements T_RIGHTCURLY",
 /*  83 */ "classDecl ::= T_INTERFACE T_IDENTIFIER interfaceExtends T_LEFTCURLY classStatements T_RIGHTCURLY",
 /*  84 */ "classStatements ::=",
 /*  85 */ "classStatements ::= classStatements classStatement",
 /*  86 */ "classStatement ::= classVarFlags classVar T_SEMI",
 /*  87 */ "classStatement ::= classConstantDecl T_SEMI",
 /*  88 */ "classStatement ::= methodFlags T_FUNCTION signature methodBody",
 /*  89 */ "classStatement ::= methodFlags T_AND T_FUNCTION signature methodBody",
 /*  90 */ "classVar ::= classVar T_COMMA T_VARIABLE",
 /*  91 */ "classVar ::= classVar T_COMMA T_VARIABLE T_ASSIGN staticScalar",
 /*  92 */ "classVar ::= T_VARIABLE",
 /*  93 */ "classVar ::= T_VARIABLE T_ASSIGN staticScalar",
 /*  94 */ "classConstantDecl ::= classConstantDecl T_COMMA T_IDENTIFIER T_ASSIGN staticScalar",
 /*  95 */ "classConstantDecl ::= T_CONST T_IDENTIFIER T_ASSIGN staticScalar",
 /*  96 */ "methodFlags ::=",
 /*  97 */ "methodFlags ::= nonEmptyMemberFlags",
 /*  98 */ "classVarFlags ::= T_VAR",
 /*  99 */ "classVarFlags ::= nonEmptyMemberFlags",
 /* 100 */ "nonEmptyMemberFlags ::= memberFlag",
 /* 101 */ "nonEmptyMemberFlags ::= nonEmptyMemberFlags memberFlag",
 /* 102 */ "memberFlag ::= T_PUBLIC",
 /* 103 */ "memberFlag ::= T_PROTECTED",
 /* 104 */ "memberFlag ::= T_PRIVATE",
 /* 105 */ "memberFlag ::= T_STATIC",
 /* 106 */ "memberFlag ::= T_ABSTRACT",
 /* 107 */ "memberFlag ::= T_FINAL",
 /* 108 */ "methodBody ::= T_SEMI",
 /* 109 */ "methodBody ::= statementBlock",
 /* 110 */ "classExtends ::=",
 /* 111 */ "classExtends ::= T_EXTENDS T_IDENTIFIER",
 /* 112 */ "interfaceExtends ::=",
 /* 113 */ "interfaceExtends ::= T_EXTENDS idList",
 /* 114 */ "classImplements ::=",
 /* 115 */ "classImplements ::= T_IMPLEMENTS idList",
 /* 116 */ "idList ::= T_IDENTIFIER",
 /* 117 */ "idList ::= idList T_COMMA T_IDENTIFIER",
 /* 118 */ "baseExpr ::= assignment",
 /* 119 */ "baseExpr ::= opAssignment",
 /* 120 */ "baseExpr ::= listAssignment",
 /* 121 */ "baseExpr ::= functionInvoke",
 /* 122 */ "baseExpr ::= constructorInvoke",
 /* 123 */ "baseExpr ::= unaryOp",
 /* 124 */ "baseExpr ::= binaryOp",
 /* 125 */ "baseExpr ::= builtin",
 /* 126 */ "baseExpr ::= typeCast",
 /* 127 */ "baseExpr ::= preOp",
 /* 128 */ "baseExpr ::= postOp",
 /* 129 */ "baseExpr ::= conditionalExpr",
 /* 130 */ "baseExpr ::= scalar",
 /* 131 */ "baseExpr ::= literalArray",
 /* 132 */ "baseExpr ::= T_LEFTPAREN expr T_RIGHTPAREN",
 /* 133 */ "expr ::= baseExpr",
 /* 134 */ "expr ::= rVar",
 /* 135 */ "builtin ::= T_EXIT",
 /* 136 */ "builtin ::= T_EXIT T_LEFTPAREN T_RIGHTPAREN",
 /* 137 */ "builtin ::= T_EXIT T_LEFTPAREN expr T_RIGHTPAREN",
 /* 138 */ "builtin ::= T_EMPTY T_LEFTPAREN var T_RIGHTPAREN",
 /* 139 */ "builtin ::= T_ISSET T_LEFTPAREN commaVarList T_RIGHTPAREN",
 /* 140 */ "builtin ::= T_UNSET T_LEFTPAREN commaVarList T_RIGHTPAREN",
 /* 141 */ "builtin ::= T_PRINT expr",
 /* 142 */ "builtin ::= T_CLONE expr",
 /* 143 */ "builtin ::= T_REQUIRE expr",
 /* 144 */ "builtin ::= T_REQUIRE_ONCE expr",
 /* 145 */ "builtin ::= T_INCLUDE expr",
 /* 146 */ "builtin ::= T_INCLUDE_ONCE expr",
 /* 147 */ "builtin ::= T_AT expr",
 /* 148 */ "commaVarList ::= var",
 /* 149 */ "commaVarList ::= commaVarList T_COMMA var",
 /* 150 */ "globalVarList ::= globalVar",
 /* 151 */ "globalVarList ::= globalVarList T_COMMA globalVar",
 /* 152 */ "globalVar ::= T_VARIABLE",
 /* 153 */ "globalVar ::= T_DOLLAR rVar",
 /* 154 */ "staticVarList ::= T_VARIABLE",
 /* 155 */ "staticVarList ::= staticVarList T_COMMA T_VARIABLE",
 /* 156 */ "commaExprList ::= expr",
 /* 157 */ "commaExprList ::= commaExprList T_COMMA expr",
 /* 158 */ "conditionalExpr ::= expr T_QUESTION expr T_COLON expr",
 /* 159 */ "typeCast ::= T_FLOAT_CAST expr",
 /* 160 */ "typeCast ::= T_INT_CAST expr",
 /* 161 */ "typeCast ::= T_STRING_CAST expr",
 /* 162 */ "typeCast ::= T_BINARY_CAST expr",
 /* 163 */ "typeCast ::= T_UNICODE_CAST expr",
 /* 164 */ "typeCast ::= T_ARRAY_CAST expr",
 /* 165 */ "typeCast ::= T_OBJECT_CAST expr",
 /* 166 */ "typeCast ::= T_UNSET_CAST expr",
 /* 167 */ "typeCast ::= T_BOOL_CAST expr",
 /* 168 */ "scalar ::= literal",
 /* 169 */ "scalar ::= literalMagic",
 /* 170 */ "scalar ::= T_IDENTIFIER",
 /* 171 */ "scalar ::= T_IDENTIFIER T_DBL_COLON T_IDENTIFIER",
 /* 172 */ "staticScalar ::= scalar",
 /* 173 */ "staticScalar ::= literalArray",
 /* 174 */ "staticScalar ::= T_PLUS staticScalar",
 /* 175 */ "staticScalar ::= T_MINUS staticScalar",
 /* 176 */ "literal ::= T_SQ_STRING",
 /* 177 */ "literal ::= T_DQ_STRING",
 /* 178 */ "literal ::= T_LNUMBER",
 /* 179 */ "literal ::= T_DNUMBER",
 /* 180 */ "literal ::= T_TRUE",
 /* 181 */ "literal ::= T_FALSE",
 /* 182 */ "literal ::= T_NULL",
 /* 183 */ "literalMagic ::= T_MAGIC_FILE",
 /* 184 */ "literalMagic ::= T_MAGIC_LINE",
 /* 185 */ "literalMagic ::= T_MAGIC_CLASS",
 /* 186 */ "literalMagic ::= T_MAGIC_METHOD",
 /* 187 */ "literalMagic ::= T_MAGIC_FUNCTION",
 /* 188 */ "literalMagic ::= T_MAGIC_NS",
 /* 189 */ "arrayItemList ::=",
 /* 190 */ "arrayItemList ::= arrayItems maybeComma",
 /* 191 */ "maybeComma ::= T_COMMA",
 /* 192 */ "maybeComma ::=",
 /* 193 */ "arrayItems ::= expr",
 /* 194 */ "arrayItems ::= T_AND expr",
 /* 195 */ "arrayItems ::= expr T_ARROWKEY expr",
 /* 196 */ "arrayItems ::= expr T_ARROWKEY T_AND expr",
 /* 197 */ "arrayItems ::= arrayItems T_COMMA expr",
 /* 198 */ "arrayItems ::= arrayItems T_COMMA T_AND expr",
 /* 199 */ "arrayItems ::= arrayItems T_COMMA expr T_ARROWKEY expr",
 /* 200 */ "arrayItems ::= arrayItems T_COMMA expr T_ARROWKEY T_AND expr",
 /* 201 */ "literalArray ::= T_ARRAY T_LEFTPAREN arrayItemList T_RIGHTPAREN",
 /* 202 */ "unaryOp ::= T_PLUS expr",
 /* 203 */ "unaryOp ::= T_MINUS expr",
 /* 204 */ "unaryOp ::= T_BOOLEAN_NOT expr",
 /* 205 */ "unaryOp ::= T_TILDE expr",
 /* 206 */ "binaryOp ::= expr T_DOT expr",
 /* 207 */ "binaryOp ::= expr T_BOOLEAN_AND expr",
 /* 208 */ "binaryOp ::= expr T_BOOLEAN_AND_LIT expr",
 /* 209 */ "binaryOp ::= expr T_BOOLEAN_OR expr",
 /* 210 */ "binaryOp ::= expr T_BOOLEAN_OR_LIT expr",
 /* 211 */ "binaryOp ::= expr T_BOOLEAN_XOR_LIT expr",
 /* 212 */ "binaryOp ::= expr T_DIV expr",
 /* 213 */ "binaryOp ::= expr T_MOD expr",
 /* 214 */ "binaryOp ::= expr T_MULT expr",
 /* 215 */ "binaryOp ::= expr T_PLUS expr",
 /* 216 */ "binaryOp ::= expr T_MINUS expr",
 /* 217 */ "binaryOp ::= expr T_GREATER_THAN expr",
 /* 218 */ "binaryOp ::= expr T_LESS_THAN expr",
 /* 219 */ "binaryOp ::= expr T_GREATER_OR_EQUAL expr",
 /* 220 */ "binaryOp ::= expr T_LESS_OR_EQUAL expr",
 /* 221 */ "binaryOp ::= expr T_EQUAL expr",
 /* 222 */ "binaryOp ::= expr T_NOT_EQUAL expr",
 /* 223 */ "binaryOp ::= expr T_IDENTICAL expr",
 /* 224 */ "binaryOp ::= expr T_NOT_IDENTICAL expr",
 /* 225 */ "binaryOp ::= expr T_CARET expr",
 /* 226 */ "binaryOp ::= expr T_PIPE expr",
 /* 227 */ "binaryOp ::= expr T_AND expr",
 /* 228 */ "binaryOp ::= expr T_SL expr",
 /* 229 */ "binaryOp ::= expr T_SR expr",
 /* 230 */ "binaryOp ::= expr T_INSTANCEOF maybeDynamicID",
 /* 231 */ "preOp ::= T_INC var",
 /* 232 */ "preOp ::= T_DEC var",
 /* 233 */ "postOp ::= var T_INC",
 /* 234 */ "postOp ::= var T_DEC",
 /* 235 */ "assignment ::= var T_ASSIGN expr",
 /* 236 */ "assignment ::= var T_ASSIGN T_AND var",
 /* 237 */ "assignment ::= var T_ASSIGN T_AND functionInvoke",
 /* 238 */ "assignment ::= var T_ASSIGN T_AND constructorInvoke",
 /* 239 */ "opAssignment ::= var T_AND_EQUAL expr",
 /* 240 */ "opAssignment ::= var T_OR_EQUAL expr",
 /* 241 */ "opAssignment ::= var T_XOR_EQUAL expr",
 /* 242 */ "opAssignment ::= var T_CONCAT_EQUAL expr",
 /* 243 */ "opAssignment ::= var T_DIV_EQUAL expr",
 /* 244 */ "opAssignment ::= var T_MUL_EQUAL expr",
 /* 245 */ "opAssignment ::= var T_PLUS_EQUAL expr",
 /* 246 */ "opAssignment ::= var T_MINUS_EQUAL expr",
 /* 247 */ "opAssignment ::= var T_MOD_EQUAL expr",
 /* 248 */ "opAssignment ::= var T_SL_EQUAL expr",
 /* 249 */ "opAssignment ::= var T_SR_EQUAL expr",
 /* 250 */ "listAssignment ::= T_LIST T_LEFTPAREN listAssignmentList T_RIGHTPAREN T_ASSIGN expr",
 /* 251 */ "listAssignmentList ::= listElement",
 /* 252 */ "listAssignmentList ::= listAssignmentList T_COMMA listElement",
 /* 253 */ "listElement ::= var",
 /* 254 */ "listElement ::= T_LIST T_LEFTPAREN listAssignmentList T_RIGHTPAREN",
 /* 255 */ "listElement ::=",
 /* 256 */ "rVar ::= var",
 /* 257 */ "var ::= varWithFunCalls",
 /* 258 */ "var ::= varWithFunCalls varPropertyList",
 /* 259 */ "varPropertyList ::= varPropertyList varProperty",
 /* 260 */ "varPropertyList ::= varProperty",
 /* 261 */ "varProperty ::= T_CLASSDEREF objProperty maybeMethodInvoke",
 /* 262 */ "maybeMethodInvoke ::= T_LEFTPAREN argList T_RIGHTPAREN",
 /* 263 */ "maybeMethodInvoke ::=",
 /* 264 */ "varNoObjects ::= refVar",
 /* 265 */ "varNoObjects ::= varVar refVar",
 /* 266 */ "staticMember ::= T_IDENTIFIER T_DBL_COLON varNoObjects",
 /* 267 */ "varWithFunCalls ::= baseVar",
 /* 268 */ "varWithFunCalls ::= functionInvoke",
 /* 269 */ "baseVar ::= varNoObjects",
 /* 270 */ "baseVar ::= staticMember",
 /* 271 */ "refVar ::= T_VARIABLE",
 /* 272 */ "refVar ::= T_VARIABLE arrayIndices",
 /* 273 */ "objProperty ::= T_IDENTIFIER",
 /* 274 */ "objProperty ::= T_IDENTIFIER arrayIndices",
 /* 275 */ "objProperty ::= varNoObjects",
 /* 276 */ "varVar ::= T_DOLLAR",
 /* 277 */ "varVar ::= varVar T_DOLLAR",
 /* 278 */ "argList ::= expr",
 /* 279 */ "argList ::= expr T_COMMA argList",
 /* 280 */ "argList ::=",
 /* 281 */ "arrayIndices ::= T_LEFTSQUARE expr T_RIGHTSQUARE",
 /* 282 */ "arrayIndices ::= T_LEFTCURLY expr T_RIGHTCURLY",
 /* 283 */ "arrayIndices ::= arrayIndices T_LEFTSQUARE expr T_RIGHTSQUARE",
 /* 284 */ "arrayIndices ::= arrayIndices T_LEFTCURLY expr T_RIGHTCURLY",
 /* 285 */ "arrayIndices ::= T_LEFTSQUARE T_RIGHTSQUARE",
 /* 286 */ "arrayIndices ::= arrayIndices T_LEFTSQUARE T_RIGHTSQUARE",
 /* 287 */ "functionInvoke ::= maybeDynamicID T_LEFTPAREN argList T_RIGHTPAREN",
 /* 288 */ "functionInvoke ::= T_IDENTIFIER T_DBL_COLON T_IDENTIFIER T_LEFTPAREN argList T_RIGHTPAREN",
 /* 289 */ "functionInvoke ::= T_IDENTIFIER T_DBL_COLON varNoObjects T_LEFTPAREN argList T_RIGHTPAREN",
 /* 290 */ "functionInvoke ::= varNoObjects T_LEFTPAREN argList T_RIGHTPAREN",
 /* 291 */ "constructorInvoke ::= T_NEW maybeDynamicID T_LEFTPAREN argList T_RIGHTPAREN",
 /* 292 */ "constructorInvoke ::= T_NEW maybeDynamicID",
 /* 293 */ "literalID ::= T_IDENTIFIER",
 /* 294 */ "maybeDynamicID ::= literalID",
 /* 295 */ "maybeDynamicID ::= baseVar",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to rphpParse and rphpParseFree.
*/
void *rphpParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  rphpParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from rphpParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void rphpParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int rphpParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_MAX || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( j>=0 && j<YY_SZ_ACTTAB && yy_lookahead[j]==YYWILDCARD ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_MAX ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_MAX );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_SZ_ACTTAB );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   rphpParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
#line 211 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
  
  std::cerr << "Parser stack overflow" << std::endl;
#line 3112 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
   rphpParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 147, 1 },
  { 148, 0 },
  { 148, 2 },
  { 149, 1 },
  { 149, 1 },
  { 149, 1 },
  { 149, 1 },
  { 149, 1 },
  { 149, 1 },
  { 149, 1 },
  { 149, 1 },
  { 149, 1 },
  { 149, 1 },
  { 149, 1 },
  { 149, 2 },
  { 149, 2 },
  { 149, 2 },
  { 149, 2 },
  { 149, 2 },
  { 149, 2 },
  { 149, 2 },
  { 149, 2 },
  { 149, 1 },
  { 150, 3 },
  { 162, 2 },
  { 163, 2 },
  { 165, 1 },
  { 165, 2 },
  { 166, 1 },
  { 166, 2 },
  { 167, 1 },
  { 167, 2 },
  { 168, 2 },
  { 151, 1 },
  { 160, 4 },
  { 172, 0 },
  { 172, 1 },
  { 173, 1 },
  { 173, 2 },
  { 171, 6 },
  { 174, 0 },
  { 174, 2 },
  { 175, 6 },
  { 175, 6 },
  { 154, 6 },
  { 154, 6 },
  { 155, 7 },
  { 155, 9 },
  { 155, 8 },
  { 155, 10 },
  { 156, 9 },
  { 177, 0 },
  { 177, 1 },
  { 157, 6 },
  { 158, 5 },
  { 159, 5 },
  { 178, 3 },
  { 178, 4 },
  { 178, 3 },
  { 178, 4 },
  { 179, 0 },
  { 179, 5 },
  { 179, 4 },
  { 180, 1 },
  { 180, 1 },
  { 161, 2 },
  { 161, 4 },
  { 183, 2 },
  { 183, 3 },
  { 183, 4 },
  { 183, 5 },
  { 184, 0 },
  { 184, 1 },
  { 184, 1 },
  { 185, 1 },
  { 185, 3 },
  { 185, 0 },
  { 186, 4 },
  { 186, 5 },
  { 152, 3 },
  { 153, 7 },
  { 153, 8 },
  { 153, 8 },
  { 153, 6 },
  { 189, 0 },
  { 189, 2 },
  { 191, 3 },
  { 191, 2 },
  { 191, 4 },
  { 191, 5 },
  { 193, 3 },
  { 193, 5 },
  { 193, 1 },
  { 193, 3 },
  { 194, 5 },
  { 194, 4 },
  { 195, 0 },
  { 195, 1 },
  { 192, 1 },
  { 192, 1 },
  { 197, 1 },
  { 197, 2 },
  { 198, 1 },
  { 198, 1 },
  { 198, 1 },
  { 198, 1 },
  { 198, 1 },
  { 198, 1 },
  { 196, 1 },
  { 196, 1 },
  { 187, 0 },
  { 187, 2 },
  { 190, 0 },
  { 190, 2 },
  { 188, 0 },
  { 188, 2 },
  { 199, 1 },
  { 199, 3 },
  { 200, 1 },
  { 200, 1 },
  { 200, 1 },
  { 200, 1 },
  { 200, 1 },
  { 200, 1 },
  { 200, 1 },
  { 200, 1 },
  { 200, 1 },
  { 200, 1 },
  { 200, 1 },
  { 200, 1 },
  { 200, 1 },
  { 200, 1 },
  { 200, 3 },
  { 164, 1 },
  { 164, 1 },
  { 208, 1 },
  { 208, 3 },
  { 208, 4 },
  { 208, 4 },
  { 208, 4 },
  { 208, 4 },
  { 208, 2 },
  { 208, 2 },
  { 208, 2 },
  { 208, 2 },
  { 208, 2 },
  { 208, 2 },
  { 208, 2 },
  { 216, 1 },
  { 216, 3 },
  { 170, 1 },
  { 170, 3 },
  { 217, 1 },
  { 217, 2 },
  { 181, 1 },
  { 181, 3 },
  { 169, 1 },
  { 169, 3 },
  { 212, 5 },
  { 209, 2 },
  { 209, 2 },
  { 209, 2 },
  { 209, 2 },
  { 209, 2 },
  { 209, 2 },
  { 209, 2 },
  { 209, 2 },
  { 209, 2 },
  { 213, 1 },
  { 213, 1 },
  { 213, 1 },
  { 213, 3 },
  { 182, 1 },
  { 182, 1 },
  { 182, 2 },
  { 182, 2 },
  { 218, 1 },
  { 218, 1 },
  { 218, 1 },
  { 218, 1 },
  { 218, 1 },
  { 218, 1 },
  { 218, 1 },
  { 219, 1 },
  { 219, 1 },
  { 219, 1 },
  { 219, 1 },
  { 219, 1 },
  { 219, 1 },
  { 220, 0 },
  { 220, 2 },
  { 222, 1 },
  { 222, 0 },
  { 221, 1 },
  { 221, 2 },
  { 221, 3 },
  { 221, 4 },
  { 221, 3 },
  { 221, 4 },
  { 221, 5 },
  { 221, 6 },
  { 214, 4 },
  { 206, 2 },
  { 206, 2 },
  { 206, 2 },
  { 206, 2 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 207, 3 },
  { 210, 2 },
  { 210, 2 },
  { 211, 2 },
  { 211, 2 },
  { 201, 3 },
  { 201, 4 },
  { 201, 4 },
  { 201, 4 },
  { 202, 3 },
  { 202, 3 },
  { 202, 3 },
  { 202, 3 },
  { 202, 3 },
  { 202, 3 },
  { 202, 3 },
  { 202, 3 },
  { 202, 3 },
  { 202, 3 },
  { 202, 3 },
  { 203, 6 },
  { 224, 1 },
  { 224, 3 },
  { 225, 1 },
  { 225, 4 },
  { 225, 0 },
  { 215, 1 },
  { 176, 1 },
  { 176, 2 },
  { 227, 2 },
  { 227, 1 },
  { 228, 3 },
  { 230, 3 },
  { 230, 0 },
  { 232, 1 },
  { 232, 2 },
  { 235, 3 },
  { 226, 1 },
  { 226, 1 },
  { 236, 1 },
  { 236, 1 },
  { 233, 1 },
  { 233, 2 },
  { 229, 1 },
  { 229, 2 },
  { 229, 1 },
  { 234, 1 },
  { 234, 2 },
  { 231, 1 },
  { 231, 3 },
  { 231, 0 },
  { 237, 3 },
  { 237, 3 },
  { 237, 4 },
  { 237, 4 },
  { 237, 2 },
  { 237, 3 },
  { 204, 4 },
  { 204, 6 },
  { 204, 6 },
  { 204, 4 },
  { 205, 5 },
  { 205, 2 },
  { 238, 1 },
  { 223, 1 },
  { 223, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  rphpParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0: /* module ::= statement_list */
#line 244 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ pMod->setAST(yymsp[0].minor.yy16); delete yymsp[0].minor.yy16; }
#line 3522 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 1: /* statement_list ::= */
#line 247 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy16 = new AST::statementList(); }
#line 3527 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 2: /* statement_list ::= statement_list statement */
#line 248 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yymsp[-1].minor.yy16->push_back(yymsp[0].minor.yy477); yygotominor.yy16 = yymsp[-1].minor.yy16; }
#line 3532 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 3: /* statement ::= statementBlock */
#line 252 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy477 = yymsp[0].minor.yy360; }
#line 3537 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 4: /* statement ::= inlineHTML */
#line 253 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy477 = yymsp[0].minor.yy175; }
#line 3542 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 5: /* statement ::= functionDecl */
#line 254 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy477 = yymsp[0].minor.yy361; }
#line 3547 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 6: /* statement ::= classDecl */
#line 255 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy477 = yymsp[0].minor.yy341; }
#line 3552 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 7: /* statement ::= ifBlock */
#line 256 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy477 = yymsp[0].minor.yy112; }
#line 3557 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 8: /* statement ::= forEach */
#line 257 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy477 = yymsp[0].minor.yy327; }
#line 3562 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 9: /* statement ::= forStmt */
#line 258 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy477 = yymsp[0].minor.yy210; }
#line 3567 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 10: /* statement ::= doStmt */
#line 259 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy477 = yymsp[0].minor.yy10; }
#line 3572 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 11: /* statement ::= whileStmt */
#line 260 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy477 = yymsp[0].minor.yy70; }
#line 3577 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 12: /* statement ::= switchStmt */
#line 261 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy477 = yymsp[0].minor.yy45; }
#line 3582 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 13: /* statement ::= tryCatch */
#line 262 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy477 = yymsp[0].minor.yy336; }
#line 3587 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 14: /* statement ::= staticDecl T_SEMI */
#line 263 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy477 = yymsp[-1].minor.yy253; }
#line 3592 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 15: /* statement ::= echo T_SEMI */
      case 16: /* statement ::= throw T_SEMI */ yytestcase(yyruleno==16);
#line 264 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy477 = yymsp[-1].minor.yy38; }
#line 3598 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 17: /* statement ::= expr T_SEMI */
#line 266 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy477 = yymsp[-1].minor.yy136; }
#line 3603 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 18: /* statement ::= return T_SEMI */
#line 267 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy477 = yymsp[-1].minor.yy259; }
#line 3608 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 19: /* statement ::= break T_SEMI */
#line 268 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy477 = yymsp[-1].minor.yy366; }
#line 3613 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 20: /* statement ::= continue T_SEMI */
#line 269 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy477 = yymsp[-1].minor.yy106; }
#line 3618 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 21: /* statement ::= global T_SEMI */
#line 270 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy477 = yymsp[-1].minor.yy337; }
#line 3623 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 22: /* statement ::= T_SEMI */
#line 272 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy477 = new (CTXT) AST::emptyStmt();
}
#line 3630 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 23: /* statementBlock ::= T_LEFTCURLY statement_list T_RIGHTCURLY */
      case 56: /* switchCaseList ::= T_LEFTCURLY caseList T_RIGHTCURLY */ yytestcase(yyruleno==56);
      case 58: /* switchCaseList ::= T_COLON caseList T_ENDSWITCH */ yytestcase(yyruleno==58);
#line 279 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy360 = new (CTXT) AST::block(CTXT, yymsp[-1].minor.yy16);
    yygotominor.yy360->setLine(TOKEN_LINE(yymsp[-2].minor.yy0), TOKEN_LINE(yymsp[0].minor.yy0));
    delete yymsp[-1].minor.yy16;
}
#line 3641 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 24: /* echo ::= T_ECHO commaExprList */
#line 288 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
   yygotominor.yy38 = new (CTXT) AST::builtin(CTXT, AST::builtin::ECHO, yymsp[0].minor.yy371);
   yygotominor.yy38->setLine(CURRENT_LINE);
   delete yymsp[0].minor.yy371;
}
#line 3650 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 25: /* throw ::= T_THROW expr */
#line 297 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    AST::expressionList* rVal = new AST::expressionList();
    rVal->push_back(yymsp[0].minor.yy136);
    yygotominor.yy38 = new (CTXT) AST::builtin(CTXT, AST::builtin::THROW, rVal);
    delete rVal;
    yygotominor.yy38->setLine(CURRENT_LINE);
}
#line 3661 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 26: /* return ::= T_RETURN */
#line 308 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy259 = new (CTXT) AST::returnStmt(NULL);
    yygotominor.yy259->setLine(CURRENT_LINE);
}
#line 3669 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 27: /* return ::= T_RETURN expr */
#line 313 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy259 = new (CTXT) AST::returnStmt(yymsp[0].minor.yy136);
    yygotominor.yy259->setLine(CURRENT_LINE);
}
#line 3677 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 28: /* break ::= T_BREAK */
#line 320 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy366 = new (CTXT) AST::breakStmt(NULL);
    yygotominor.yy366->setLine(CURRENT_LINE);
}
#line 3685 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 29: /* break ::= T_BREAK expr */
#line 325 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy366 = new (CTXT) AST::breakStmt(yymsp[0].minor.yy136);
    yygotominor.yy366->setLine(CURRENT_LINE);
}
#line 3693 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 30: /* continue ::= T_CONTINUE */
#line 332 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy106 = new (CTXT) AST::continueStmt(NULL);
    yygotominor.yy106->setLine(CURRENT_LINE);
}
#line 3701 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 31: /* continue ::= T_CONTINUE expr */
#line 337 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy106 = new (CTXT) AST::continueStmt(yymsp[0].minor.yy136);
    yygotominor.yy106->setLine(CURRENT_LINE);
}
#line 3709 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 32: /* global ::= T_GLOBAL globalVarList */
#line 345 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy337 = new (CTXT) AST::globalDecl(yymsp[0].minor.yy371, CTXT);
    yygotominor.yy337->setLine(CURRENT_LINE);
    delete yymsp[0].minor.yy371;
}
#line 3718 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 33: /* inlineHTML ::= T_INLINE_HTML */
#line 354 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy175 = new (CTXT) AST::inlineHtml(*yymsp[0].minor.yy0);
    yygotominor.yy175->setLine(CURRENT_LINE);
}
#line 3726 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 34: /* tryCatch ::= T_TRY statementBlock catch moreCatches */
#line 363 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{

    AST::statementList catchList;
    catchList.push_back(yymsp[-1].minor.yy408); // compulsory

    // copy in additional catches, if any
    if (yymsp[0].minor.yy16 != NULL) {
      for(AST::statementList::iterator i = yymsp[0].minor.yy16->begin();
          i != yymsp[0].minor.yy16->end();
          ++i) {
            catchList.push_back(*i);
      }
      delete yymsp[0].minor.yy16;
    }

    yygotominor.yy336 = new (CTXT) AST::tryStmt(CTXT, new (CTXT) AST::block(CTXT, yymsp[-2].minor.yy360), &catchList);
    yygotominor.yy336->setLine(CURRENT_LINE);
    // catchList goes out of scope and frees

}
#line 3750 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 35: /* moreCatches ::= */
#line 385 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy16 = NULL; }
#line 3755 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 36: /* moreCatches ::= nonEmptyCatches */
#line 386 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy16 = yymsp[0].minor.yy16; }
#line 3760 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 37: /* nonEmptyCatches ::= catch */
#line 390 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy16 = new AST::statementList();
    yygotominor.yy16->push_back(yymsp[0].minor.yy408);
}
#line 3768 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 38: /* nonEmptyCatches ::= nonEmptyCatches catch */
#line 395 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yymsp[-1].minor.yy16->push_back(yymsp[0].minor.yy408);
    yygotominor.yy16 = yymsp[-1].minor.yy16;
}
#line 3776 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 39: /* catch ::= T_CATCH T_LEFTPAREN T_IDENTIFIER T_VARIABLE T_RIGHTPAREN statementBlock */
#line 403 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy408 = new (CTXT) AST::catchStmt(*yymsp[-3].minor.yy0, *yymsp[-2].minor.yy0, CTXT, new (CTXT) AST::block(CTXT, yymsp[0].minor.yy360));
    yygotominor.yy408->setLine(CURRENT_LINE);
}
#line 3784 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 40: /* elseSingle ::= */
      case 255: /* listElement ::= */ yytestcase(yyruleno==255);
#line 411 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy477 = NULL; }
#line 3790 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 41: /* elseSingle ::= T_ELSE statement */
#line 414 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy477 = yymsp[0].minor.yy477;
}
#line 3797 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 42: /* elseSeries ::= T_ELSEIF T_LEFTPAREN expr T_RIGHTPAREN statement elseSingle */
      case 43: /* elseSeries ::= T_ELSEIF T_LEFTPAREN expr T_RIGHTPAREN statement elseSeries */ yytestcase(yyruleno==43);
#line 422 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy477 = new (CTXT) AST::ifStmt(CTXT, yymsp[-3].minor.yy136, yymsp[-1].minor.yy477, yymsp[0].minor.yy477);
    yygotominor.yy477->setLine(TOKEN_LINE(yymsp[-5].minor.yy0));
}
#line 3806 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 44: /* ifBlock ::= T_IF T_LEFTPAREN expr T_RIGHTPAREN statement elseSeries */
      case 45: /* ifBlock ::= T_IF T_LEFTPAREN expr T_RIGHTPAREN statement elseSingle */ yytestcase(yyruleno==45);
#line 436 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy112 = new (CTXT) AST::ifStmt(CTXT, yymsp[-3].minor.yy136, yymsp[-1].minor.yy477, yymsp[0].minor.yy477);
    yygotominor.yy112->setLine(TOKEN_LINE(yymsp[-5].minor.yy0));
}
#line 3815 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 46: /* forEach ::= T_FOREACH T_LEFTPAREN expr T_AS var T_RIGHTPAREN statement */
#line 450 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy327 = new (CTXT) AST::forEach(yymsp[-4].minor.yy136, yymsp[0].minor.yy477, CTXT, yymsp[-2].minor.yy136, false /*by ref*/ );
    yygotominor.yy327->setLine(TOKEN_LINE(yymsp[-6].minor.yy0));
}
#line 3823 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 47: /* forEach ::= T_FOREACH T_LEFTPAREN expr T_AS var T_ARROWKEY var T_RIGHTPAREN statement */
#line 456 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy327 = new (CTXT) AST::forEach(yymsp[-6].minor.yy136, yymsp[0].minor.yy477, CTXT, yymsp[-2].minor.yy136, false /*by ref*/, yymsp[-4].minor.yy136);
    yygotominor.yy327->setLine(TOKEN_LINE(yymsp[-8].minor.yy0));
}
#line 3831 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 48: /* forEach ::= T_FOREACH T_LEFTPAREN expr T_AS T_AND var T_RIGHTPAREN statement */
#line 462 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy327 = new (CTXT) AST::forEach(yymsp[-5].minor.yy136, yymsp[0].minor.yy477, CTXT, yymsp[-2].minor.yy136, true /*by ref*/);
    yygotominor.yy327->setLine(TOKEN_LINE(yymsp[-7].minor.yy0));
}
#line 3839 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 49: /* forEach ::= T_FOREACH T_LEFTPAREN expr T_AS var T_ARROWKEY T_AND var T_RIGHTPAREN statement */
#line 468 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy327 = new (CTXT) AST::forEach(yymsp[-7].minor.yy136, yymsp[0].minor.yy477, CTXT, yymsp[-2].minor.yy136, true /*by ref*/, yymsp[-5].minor.yy136);
    yygotominor.yy327->setLine(TOKEN_LINE(yymsp[-9].minor.yy0));
}
#line 3847 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 50: /* forStmt ::= T_FOR T_LEFTPAREN forExpr T_SEMI forExpr T_SEMI forExpr T_RIGHTPAREN statement */
#line 476 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy210 = new (CTXT) AST::forStmt(CTXT, yymsp[-6].minor.yy477, yymsp[-4].minor.yy477, yymsp[-2].minor.yy477, yymsp[0].minor.yy477);
    yygotominor.yy210->setLine(TOKEN_LINE(yymsp[-8].minor.yy0));
}
#line 3855 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 51: /* forExpr ::= */
#line 483 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy477 = NULL;
}
#line 3862 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 52: /* forExpr ::= commaExprList */
#line 487 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    assert(yymsp[0].minor.yy371->size());
    if (yymsp[0].minor.yy371->size() == 1) {
        yygotominor.yy477 = static_cast<AST::stmt*>( yymsp[0].minor.yy371->at(0) );
    }
    else {
        yygotominor.yy477 = new (CTXT) AST::block(CTXT, yymsp[0].minor.yy371);
    }
    delete yymsp[0].minor.yy371;
}
#line 3876 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 53: /* doStmt ::= T_DO statement T_WHILE T_LEFTPAREN expr T_RIGHTPAREN */
#line 501 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy10 = new (CTXT) AST::doStmt(CTXT, yymsp[-1].minor.yy136, yymsp[-4].minor.yy477);
    yygotominor.yy10->setLine(CURRENT_LINE);
}
#line 3884 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 54: /* whileStmt ::= T_WHILE T_LEFTPAREN expr T_RIGHTPAREN statement */
#line 509 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy70 = new (CTXT) AST::whileStmt(CTXT, yymsp[-2].minor.yy136, yymsp[0].minor.yy477);
    yygotominor.yy70->setLine(CURRENT_LINE);
}
#line 3892 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 55: /* switchStmt ::= T_SWITCH T_LEFTPAREN expr T_RIGHTPAREN switchCaseList */
#line 517 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy45 = new (CTXT) AST::switchStmt(yymsp[-2].minor.yy136, yymsp[0].minor.yy360);
    yygotominor.yy45->setLine(CURRENT_LINE);
}
#line 3900 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 57: /* switchCaseList ::= T_LEFTCURLY T_SEMI caseList T_RIGHTCURLY */
      case 59: /* switchCaseList ::= T_COLON T_SEMI caseList T_ENDSWITCH */ yytestcase(yyruleno==59);
#line 530 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy360 = new (CTXT) AST::block(CTXT, yymsp[-1].minor.yy16);
    yygotominor.yy360->setLine(TOKEN_LINE(yymsp[-3].minor.yy0), TOKEN_LINE(yymsp[0].minor.yy0));
    delete yymsp[-1].minor.yy16;
}
#line 3910 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 60: /* caseList ::= */
#line 550 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy16 = new AST::statementList();
}
#line 3917 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 61: /* caseList ::= caseList T_CASE expr caseSeparator statement_list */
#line 554 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    AST::switchCase* c = new (CTXT) AST::switchCase(yymsp[-2].minor.yy136,
                                                    new (CTXT) AST::block(CTXT, yymsp[0].minor.yy16));
    c->setLine(CURRENT_LINE);
    yymsp[-4].minor.yy16->push_back(static_cast<AST::stmt*>(c));
    delete yymsp[0].minor.yy16;
    yygotominor.yy16 = yymsp[-4].minor.yy16;
}
#line 3929 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 62: /* caseList ::= caseList T_DEFAULT caseSeparator statement_list */
#line 563 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    AST::switchCase* c = new (CTXT) AST::switchCase(NULL,
                                                     new (CTXT) AST::block(CTXT, yymsp[0].minor.yy16));
    c->setLine(CURRENT_LINE);
    yymsp[-3].minor.yy16->push_back(static_cast<AST::stmt*>(c));
    delete yymsp[0].minor.yy16;
    yygotominor.yy16 = yymsp[-3].minor.yy16;
}
#line 3941 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 65: /* staticDecl ::= T_STATIC staticVarList */
#line 580 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy253 = new (CTXT) AST::staticDecl(yymsp[0].minor.yy371, CTXT);
    yygotominor.yy253->setLine(CURRENT_LINE);
    delete yymsp[0].minor.yy371;
}
#line 3950 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 66: /* staticDecl ::= T_STATIC staticVarList T_ASSIGN staticScalar */
#line 587 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy253 = new (CTXT) AST::staticDecl(yymsp[-2].minor.yy371, CTXT, yymsp[0].minor.yy136);
    yygotominor.yy253->setLine(CURRENT_LINE);
    delete yymsp[-2].minor.yy371;
}
#line 3959 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 67: /* formalParam ::= maybeHint T_VARIABLE */
#line 597 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy397 = new (CTXT) AST::formalParam(pSourceRange(++(*yymsp[0].minor.yy0).begin(), (*yymsp[0].minor.yy0).end()),
                              CTXT, false/*ref*/);
    if (yymsp[-1].minor.yy0 == (pSourceRange*)0x1) {
        yygotominor.yy397->setArrayHint();
    }
    else if (yymsp[-1].minor.yy0) {
        yygotominor.yy397->setClassHint(*yymsp[-1].minor.yy0, CTXT);
    }
    yygotominor.yy397->setLine(TOKEN_LINE(yymsp[0].minor.yy0));
}
#line 3974 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 68: /* formalParam ::= maybeHint T_AND T_VARIABLE */
#line 609 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy397 = new (CTXT) AST::formalParam(pSourceRange(++(*yymsp[0].minor.yy0).begin(), (*yymsp[0].minor.yy0).end()),
                              CTXT, true/*ref*/);
    if (yymsp[-2].minor.yy0 == (pSourceRange*)0x1) {
        yygotominor.yy397->setArrayHint();
    }
    else if (yymsp[-2].minor.yy0) {
        yygotominor.yy397->setClassHint(*yymsp[-2].minor.yy0, CTXT);
    }
    yygotominor.yy397->setLine(TOKEN_LINE(yymsp[0].minor.yy0));
}
#line 3989 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 69: /* formalParam ::= maybeHint T_VARIABLE T_ASSIGN staticScalar */
#line 621 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy397 = new (CTXT) AST::formalParam(pSourceRange(++(*yymsp[-2].minor.yy0).begin(), (*yymsp[-2].minor.yy0).end()),
                              CTXT, false/*ref*/, yymsp[0].minor.yy136);
    if (yymsp[-3].minor.yy0 == (pSourceRange*)0x1) {
        yygotominor.yy397->setArrayHint();
    }
    else if (yymsp[-3].minor.yy0) {
        yygotominor.yy397->setClassHint(*yymsp[-3].minor.yy0, CTXT);
    }
    yygotominor.yy397->setLine(TOKEN_LINE(yymsp[-2].minor.yy0));
}
#line 4004 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 70: /* formalParam ::= maybeHint T_AND T_VARIABLE T_ASSIGN staticScalar */
#line 633 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy397 = new (CTXT) AST::formalParam(pSourceRange(++(*yymsp[-2].minor.yy0).begin(), (*yymsp[-2].minor.yy0).end()),
                              CTXT, true/*ref*/, yymsp[0].minor.yy136);
    if (yymsp[-4].minor.yy0 == (pSourceRange*)0x1) {
        yygotominor.yy397->setArrayHint();
    }
    else if (yymsp[-4].minor.yy0) {
        yygotominor.yy397->setClassHint(*yymsp[-4].minor.yy0, CTXT);
    }
    yygotominor.yy397->setLine(TOKEN_LINE(yymsp[-2].minor.yy0));
}
#line 4019 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 71: /* maybeHint ::= */
#line 647 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy0 = NULL; }
#line 4024 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 72: /* maybeHint ::= T_ARRAY */
#line 648 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy0 = (pSourceRange*)0x1; }
#line 4029 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 73: /* maybeHint ::= T_IDENTIFIER */
#line 649 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy0 = yymsp[0].minor.yy0; }
#line 4034 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 74: /* formalParamList ::= formalParam */
#line 653 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy17 = new AST::formalParamList();
    yygotominor.yy17->push_back(yymsp[0].minor.yy397);
}
#line 4042 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 75: /* formalParamList ::= formalParam T_COMMA formalParamList */
#line 658 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yymsp[0].minor.yy17->push_back(yymsp[-2].minor.yy397);
    yygotominor.yy17 = yymsp[0].minor.yy17;
}
#line 4050 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 76: /* formalParamList ::= */
#line 663 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy17 = new AST::formalParamList();
}
#line 4057 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 77: /* signature ::= T_IDENTIFIER T_LEFTPAREN formalParamList T_RIGHTPAREN */
#line 670 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy173 = new (CTXT) AST::signature(*yymsp[-3].minor.yy0, CTXT, yymsp[-1].minor.yy17, false/*ref*/);
    yygotominor.yy173->setLine(TOKEN_LINE(yymsp[-3].minor.yy0));
    delete yymsp[-1].minor.yy17;
}
#line 4066 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 78: /* signature ::= T_AND T_IDENTIFIER T_LEFTPAREN formalParamList T_RIGHTPAREN */
#line 676 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy173 = new (CTXT) AST::signature(*yymsp[-3].minor.yy0, CTXT, yymsp[-1].minor.yy17, true/*ref*/);
    yygotominor.yy173->setLine(TOKEN_LINE(yymsp[-3].minor.yy0));
    delete yymsp[-1].minor.yy17;
}
#line 4075 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 79: /* functionDecl ::= T_FUNCTION signature statementBlock */
#line 684 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy361 = new (CTXT) AST::functionDecl(yymsp[-1].minor.yy173, yymsp[0].minor.yy360);
}
#line 4082 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 80: /* classDecl ::= T_CLASS T_IDENTIFIER classExtends classImplements T_LEFTCURLY classStatements T_RIGHTCURLY */
#line 692 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy341 = new (CTXT) AST::classDecl(CTXT,
                                  *yymsp[-5].minor.yy0,
                                  AST::classDecl::NORMAL,
                                  yymsp[-4].minor.yy379,
                                  yymsp[-3].minor.yy379,
                                  new (CTXT) AST::block(CTXT, yymsp[-1].minor.yy16));
    yygotominor.yy341->setLine(TOKEN_LINE(yymsp[-6].minor.yy0), TOKEN_LINE(yymsp[0].minor.yy0));
    if (yymsp[-4].minor.yy379)
        delete yymsp[-4].minor.yy379;
    if (yymsp[-3].minor.yy379)
        delete yymsp[-3].minor.yy379;
    delete yymsp[-1].minor.yy16;
}
#line 4100 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 81: /* classDecl ::= T_FINAL T_CLASS T_IDENTIFIER classExtends classImplements T_LEFTCURLY classStatements T_RIGHTCURLY */
#line 708 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy341 = new (CTXT) AST::classDecl(CTXT,
                                  *yymsp[-5].minor.yy0,
                                  AST::classDecl::FINAL,
                                  yymsp[-4].minor.yy379,
                                  yymsp[-3].minor.yy379,
                                  new (CTXT) AST::block(CTXT, yymsp[-1].minor.yy16));
    yygotominor.yy341->setLine(TOKEN_LINE(yymsp[-6].minor.yy0), TOKEN_LINE(yymsp[0].minor.yy0));
    if (yymsp[-4].minor.yy379)
        delete yymsp[-4].minor.yy379;
    if (yymsp[-3].minor.yy379)
        delete yymsp[-3].minor.yy379;
    delete yymsp[-1].minor.yy16;
}
#line 4118 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 82: /* classDecl ::= T_ABSTRACT T_CLASS T_IDENTIFIER classExtends classImplements T_LEFTCURLY classStatements T_RIGHTCURLY */
#line 724 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy341 = new (CTXT) AST::classDecl(CTXT,
                                  *yymsp[-5].minor.yy0,
                                  AST::classDecl::ABSTRACT,
                                  yymsp[-4].minor.yy379,
                                  yymsp[-3].minor.yy379,
                                  new (CTXT) AST::block(CTXT, yymsp[-1].minor.yy16));
    yygotominor.yy341->setLine(TOKEN_LINE(yymsp[-6].minor.yy0), TOKEN_LINE(yymsp[0].minor.yy0));
    if (yymsp[-4].minor.yy379)
        delete yymsp[-4].minor.yy379;
    if (yymsp[-3].minor.yy379)
        delete yymsp[-3].minor.yy379;
    delete yymsp[-1].minor.yy16;
}
#line 4136 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 83: /* classDecl ::= T_INTERFACE T_IDENTIFIER interfaceExtends T_LEFTCURLY classStatements T_RIGHTCURLY */
#line 740 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy341 = new (CTXT) AST::classDecl(CTXT,
                                  *yymsp[-4].minor.yy0,
                                  AST::classDecl::IFACE,
                                  yymsp[-3].minor.yy379,
                                  NULL, /* interfaces can't implement */
                                  new (CTXT) AST::block(CTXT, yymsp[-1].minor.yy16));
    yygotominor.yy341->setLine(TOKEN_LINE(yymsp[-5].minor.yy0), TOKEN_LINE(yymsp[0].minor.yy0));
    if (yymsp[-3].minor.yy379)
        delete yymsp[-3].minor.yy379;
    delete yymsp[-1].minor.yy16;
}
#line 4152 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 84: /* classStatements ::= */
#line 755 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy16 = new AST::statementList();

}
#line 4160 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 85: /* classStatements ::= classStatements classStatement */
#line 760 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yymsp[-1].minor.yy16->push_back(yymsp[0].minor.yy477);
    yygotominor.yy16 = yymsp[-1].minor.yy16;
}
#line 4168 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 86: /* classStatement ::= classVarFlags classVar T_SEMI */
#line 768 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    pUInt flags(0);
    if (yymsp[-2].minor.yy202) {
        flags = *yymsp[-2].minor.yy202;
    }
    // set flags on each var decl
    for (AST::statementList::iterator i = yymsp[-1].minor.yy16->begin();
         i != yymsp[-1].minor.yy16->end();
         ++i)
    {
        static_cast<AST::propertyDecl*>((*i))->setFlags(flags);
    }
    if (yymsp[-1].minor.yy16->size() == 1) {
        // one var decl
        yygotominor.yy477 = yymsp[-1].minor.yy16->at(0);
    }
    else {
        // list, make a block
        yygotominor.yy477 = new (CTXT) AST::block(CTXT, yymsp[-1].minor.yy16);
    }
    // all done with vector
    delete yymsp[-1].minor.yy16;
}
#line 4195 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 87: /* classStatement ::= classConstantDecl T_SEMI */
#line 792 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    if (yymsp[-1].minor.yy16->size() == 1) {
        // one var decl
        yygotominor.yy477 = yymsp[-1].minor.yy16->at(0);
    }
    else {
        // list, make a block
        yygotominor.yy477 = new (CTXT) AST::block(CTXT, yymsp[-1].minor.yy16);
    }
    // all done with vector
    delete yymsp[-1].minor.yy16;
}
#line 4211 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 88: /* classStatement ::= methodFlags T_FUNCTION signature methodBody */
#line 805 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    pUInt flags(0);
    if (yymsp[-3].minor.yy373) {
        flags = *yymsp[-3].minor.yy373;
    }
    yygotominor.yy477 = new (CTXT) AST::methodDecl(yymsp[-1].minor.yy173, flags, yymsp[0].minor.yy360);
}
#line 4222 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 89: /* classStatement ::= methodFlags T_AND T_FUNCTION signature methodBody */
#line 813 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    pUInt flags(0);
    if (yymsp[-4].minor.yy373) {
        flags = *yymsp[-4].minor.yy373;
    }
    yygotominor.yy477 = new (CTXT) AST::methodDecl(yymsp[-1].minor.yy173, flags, yymsp[0].minor.yy360);
}
#line 4233 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 90: /* classVar ::= classVar T_COMMA T_VARIABLE */
#line 823 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    // strip $
    yymsp[-2].minor.yy16->push_back(new (CTXT) AST::propertyDecl(CTXT, pSourceRange(++(*yymsp[0].minor.yy0).begin(), (*yymsp[0].minor.yy0).end()), NULL));
    yygotominor.yy16 = yymsp[-2].minor.yy16;
}
#line 4242 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 91: /* classVar ::= classVar T_COMMA T_VARIABLE T_ASSIGN staticScalar */
#line 829 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    // strip $
    yymsp[-4].minor.yy16->push_back(new (CTXT) AST::propertyDecl(CTXT, pSourceRange(++(*yymsp[-2].minor.yy0).begin(), (*yymsp[-2].minor.yy0).end()), yymsp[0].minor.yy136));
    yygotominor.yy16 = yymsp[-4].minor.yy16;
}
#line 4251 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 92: /* classVar ::= T_VARIABLE */
#line 835 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy16 = new AST::statementList();
    // strip $
    yygotominor.yy16->push_back(new (CTXT) AST::propertyDecl(CTXT, pSourceRange(++(*yymsp[0].minor.yy0).begin(), (*yymsp[0].minor.yy0).end()), NULL));
}
#line 4260 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 93: /* classVar ::= T_VARIABLE T_ASSIGN staticScalar */
#line 841 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy16 = new AST::statementList();
    // strip $
    yygotominor.yy16->push_back(new (CTXT) AST::propertyDecl(CTXT, pSourceRange(++(*yymsp[-2].minor.yy0).begin(), (*yymsp[-2].minor.yy0).end()), yymsp[0].minor.yy136));
}
#line 4269 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 94: /* classConstantDecl ::= classConstantDecl T_COMMA T_IDENTIFIER T_ASSIGN staticScalar */
#line 848 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    AST::propertyDecl* prop = new (CTXT) AST::propertyDecl(CTXT, *yymsp[-2].minor.yy0, yymsp[0].minor.yy136);
    prop->setFlags(AST::memberFlags::CONST);
    yymsp[-4].minor.yy16->push_back(prop);
    yygotominor.yy16 = yymsp[-4].minor.yy16;
}
#line 4279 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 95: /* classConstantDecl ::= T_CONST T_IDENTIFIER T_ASSIGN staticScalar */
#line 855 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy16 = new AST::statementList();
    AST::propertyDecl* prop = new (CTXT) AST::propertyDecl(CTXT, *yymsp[-2].minor.yy0, yymsp[0].minor.yy136);
    prop->setFlags(AST::memberFlags::CONST);
    yygotominor.yy16->push_back(prop);
}
#line 4289 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 96: /* methodFlags ::= */
#line 864 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    // empty
    yygotominor.yy373 = NULL;
}
#line 4297 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 97: /* methodFlags ::= nonEmptyMemberFlags */
#line 868 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy373 = yymsp[0].minor.yy373; }
#line 4302 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 98: /* classVarFlags ::= T_VAR */
#line 872 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy202 = &AST::memberFlags::PUBLIC;
}
#line 4309 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 99: /* classVarFlags ::= nonEmptyMemberFlags */
#line 876 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    if (*yymsp[0].minor.yy373 & AST::memberFlags::ABSTRACT) {
        CTXT.parseError("Cannot declare class variables abstract");
    }
    yygotominor.yy202 = yymsp[0].minor.yy373;
}
#line 4319 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 100: /* nonEmptyMemberFlags ::= memberFlag */
#line 885 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy373 = new (CTXT) pUInt(*yymsp[0].minor.yy202); // freed by context
}
#line 4326 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 101: /* nonEmptyMemberFlags ::= nonEmptyMemberFlags memberFlag */
#line 889 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    *yymsp[-1].minor.yy373 |= *yymsp[0].minor.yy202;
    yygotominor.yy373 = yymsp[-1].minor.yy373;
}
#line 4334 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 102: /* memberFlag ::= T_PUBLIC */
#line 895 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy202 = &AST::memberFlags::PUBLIC; }
#line 4339 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 103: /* memberFlag ::= T_PROTECTED */
#line 896 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy202 = &AST::memberFlags::PROTECTED; }
#line 4344 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 104: /* memberFlag ::= T_PRIVATE */
#line 897 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy202 = &AST::memberFlags::PRIVATE; }
#line 4349 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 105: /* memberFlag ::= T_STATIC */
#line 898 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy202 = &AST::memberFlags::STATIC; }
#line 4354 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 106: /* memberFlag ::= T_ABSTRACT */
#line 899 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy202 = &AST::memberFlags::ABSTRACT; }
#line 4359 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 107: /* memberFlag ::= T_FINAL */
#line 900 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy202 = &AST::memberFlags::FINAL; }
#line 4364 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 108: /* methodBody ::= T_SEMI */
#line 904 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy360 = NULL; }
#line 4369 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 109: /* methodBody ::= statementBlock */
#line 905 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy360 = yymsp[0].minor.yy360; }
#line 4374 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 110: /* classExtends ::= */
      case 112: /* interfaceExtends ::= */ yytestcase(yyruleno==112);
      case 114: /* classImplements ::= */ yytestcase(yyruleno==114);
#line 909 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy379 = NULL; }
#line 4381 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 111: /* classExtends ::= T_EXTENDS T_IDENTIFIER */
      case 116: /* idList ::= T_IDENTIFIER */ yytestcase(yyruleno==116);
#line 911 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy379 = new AST::sourceRangeList();
    yygotominor.yy379->push_back(yymsp[0].minor.yy0);
}
#line 4390 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 113: /* interfaceExtends ::= T_EXTENDS idList */
      case 115: /* classImplements ::= T_IMPLEMENTS idList */ yytestcase(yyruleno==115);
#line 920 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy379 = yymsp[0].minor.yy379;
}
#line 4398 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 117: /* idList ::= idList T_COMMA T_IDENTIFIER */
#line 940 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yymsp[-2].minor.yy379->push_back(yymsp[0].minor.yy0);
    yygotominor.yy379 = yymsp[-2].minor.yy379;
}
#line 4406 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 118: /* baseExpr ::= assignment */
#line 948 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy136 = yymsp[0].minor.yy178; }
#line 4411 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 119: /* baseExpr ::= opAssignment */
#line 949 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy136 = yymsp[0].minor.yy209; }
#line 4416 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 120: /* baseExpr ::= listAssignment */
#line 950 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy136 = yymsp[0].minor.yy116; }
#line 4421 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 121: /* baseExpr ::= functionInvoke */
      case 122: /* baseExpr ::= constructorInvoke */ yytestcase(yyruleno==122);
      case 268: /* varWithFunCalls ::= functionInvoke */ yytestcase(yyruleno==268);
#line 951 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy136 = yymsp[0].minor.yy415; }
#line 4428 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 123: /* baseExpr ::= unaryOp */
#line 953 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy136 = yymsp[0].minor.yy57; }
#line 4433 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 124: /* baseExpr ::= binaryOp */
#line 954 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy136 = yymsp[0].minor.yy461; }
#line 4438 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 125: /* baseExpr ::= builtin */
#line 955 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy136 = yymsp[0].minor.yy38; }
#line 4443 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 126: /* baseExpr ::= typeCast */
#line 956 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy136 = yymsp[0].minor.yy306; }
#line 4448 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 127: /* baseExpr ::= preOp */
#line 957 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy136 = yymsp[0].minor.yy289; }
#line 4453 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 128: /* baseExpr ::= postOp */
#line 958 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy136 = yymsp[0].minor.yy44; }
#line 4458 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 129: /* baseExpr ::= conditionalExpr */
#line 959 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy136 = yymsp[0].minor.yy220; }
#line 4463 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 130: /* baseExpr ::= scalar */
      case 133: /* expr ::= baseExpr */ yytestcase(yyruleno==133);
      case 134: /* expr ::= rVar */ yytestcase(yyruleno==134);
      case 169: /* scalar ::= literalMagic */ yytestcase(yyruleno==169);
      case 172: /* staticScalar ::= scalar */ yytestcase(yyruleno==172);
      case 256: /* rVar ::= var */ yytestcase(yyruleno==256);
      case 257: /* var ::= varWithFunCalls */ yytestcase(yyruleno==257);
      case 267: /* varWithFunCalls ::= baseVar */ yytestcase(yyruleno==267);
      case 270: /* baseVar ::= staticMember */ yytestcase(yyruleno==270);
      case 294: /* maybeDynamicID ::= literalID */ yytestcase(yyruleno==294);
#line 960 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy136 = yymsp[0].minor.yy136; }
#line 4477 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 131: /* baseExpr ::= literalArray */
      case 168: /* scalar ::= literal */ yytestcase(yyruleno==168);
      case 173: /* staticScalar ::= literalArray */ yytestcase(yyruleno==173);
#line 961 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy136 = yymsp[0].minor.yy387; }
#line 4484 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 132: /* baseExpr ::= T_LEFTPAREN expr T_RIGHTPAREN */
#line 962 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy136 = yymsp[-1].minor.yy136; }
#line 4489 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 135: /* builtin ::= T_EXIT */
      case 136: /* builtin ::= T_EXIT T_LEFTPAREN T_RIGHTPAREN */ yytestcase(yyruleno==136);
#line 972 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy38 = new (CTXT) AST::builtin(CTXT, AST::builtin::EXIT);
    yygotominor.yy38->setLine(CURRENT_LINE);
}
#line 4498 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 137: /* builtin ::= T_EXIT T_LEFTPAREN expr T_RIGHTPAREN */
#line 982 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    AST::expressionList* rVal = new AST::expressionList();
    rVal->push_back(yymsp[-1].minor.yy136);
    yygotominor.yy38 = new (CTXT) AST::builtin(CTXT, AST::builtin::EXIT, rVal);
    delete rVal;
    yygotominor.yy38->setLine(CURRENT_LINE);
}
#line 4509 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 138: /* builtin ::= T_EMPTY T_LEFTPAREN var T_RIGHTPAREN */
#line 991 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    AST::expressionList* rVal = new AST::expressionList();
    rVal->push_back(yymsp[-1].minor.yy136);
    yygotominor.yy38 = new (CTXT) AST::builtin(CTXT, AST::builtin::EMPTY, rVal);
    delete rVal;
    yygotominor.yy38->setLine(CURRENT_LINE);
}
#line 4520 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 139: /* builtin ::= T_ISSET T_LEFTPAREN commaVarList T_RIGHTPAREN */
#line 1000 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
   yygotominor.yy38 = new (CTXT) AST::builtin(CTXT, AST::builtin::ISSET, yymsp[-1].minor.yy371);
   yygotominor.yy38->setLine(CURRENT_LINE);
   delete yymsp[-1].minor.yy371;
}
#line 4529 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 140: /* builtin ::= T_UNSET T_LEFTPAREN commaVarList T_RIGHTPAREN */
#line 1007 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
   yygotominor.yy38 = new (CTXT) AST::builtin(CTXT, AST::builtin::UNSET, yymsp[-1].minor.yy371);
   yygotominor.yy38->setLine(CURRENT_LINE);
   delete yymsp[-1].minor.yy371;
}
#line 4538 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 141: /* builtin ::= T_PRINT expr */
#line 1014 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    AST::expressionList* rVal = new AST::expressionList();
    rVal->push_back(yymsp[0].minor.yy136);
    yygotominor.yy38 = new (CTXT) AST::builtin(CTXT, AST::builtin::PRINT, rVal);
    delete rVal;
    yygotominor.yy38->setLine(CURRENT_LINE);
}
#line 4549 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 142: /* builtin ::= T_CLONE expr */
#line 1023 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    AST::expressionList* rVal = new AST::expressionList();
    rVal->push_back(yymsp[0].minor.yy136);
    yygotominor.yy38 = new (CTXT) AST::builtin(CTXT, AST::builtin::CLONE, rVal);
    delete rVal;
    yygotominor.yy38->setLine(CURRENT_LINE);
}
#line 4560 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 143: /* builtin ::= T_REQUIRE expr */
#line 1032 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    AST::expressionList* rVal = new AST::expressionList();
    rVal->push_back(yymsp[0].minor.yy136);
    yygotominor.yy38 = new (CTXT) AST::builtin(CTXT, AST::builtin::REQUIRE, rVal);
    delete rVal;
    yygotominor.yy38->setLine(CURRENT_LINE);
}
#line 4571 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 144: /* builtin ::= T_REQUIRE_ONCE expr */
#line 1040 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    AST::expressionList* rVal = new AST::expressionList();
    rVal->push_back(yymsp[0].minor.yy136);
    yygotominor.yy38 = new (CTXT) AST::builtin(CTXT, AST::builtin::REQUIRE_ONCE, rVal);
    delete rVal;
    yygotominor.yy38->setLine(CURRENT_LINE);
}
#line 4582 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 145: /* builtin ::= T_INCLUDE expr */
#line 1048 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    AST::expressionList* rVal = new AST::expressionList();
    rVal->push_back(yymsp[0].minor.yy136);
    yygotominor.yy38 = new (CTXT) AST::builtin(CTXT, AST::builtin::INCLUDE, rVal);
    delete rVal;
    yygotominor.yy38->setLine(CURRENT_LINE);
}
#line 4593 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 146: /* builtin ::= T_INCLUDE_ONCE expr */
#line 1056 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    AST::expressionList* rVal = new AST::expressionList();
    rVal->push_back(yymsp[0].minor.yy136);
    yygotominor.yy38 = new (CTXT) AST::builtin(CTXT, AST::builtin::INCLUDE_ONCE, rVal);
    delete rVal;
    yygotominor.yy38->setLine(CURRENT_LINE);
}
#line 4604 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 147: /* builtin ::= T_AT expr */
#line 1064 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    AST::expressionList* rVal = new AST::expressionList();
    rVal->push_back(yymsp[0].minor.yy136);
    yygotominor.yy38 = new (CTXT) AST::builtin(CTXT, AST::builtin::IGNORE_WARNING, rVal);
    delete rVal;
    yygotominor.yy38->setLine(CURRENT_LINE);
}
#line 4615 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 148: /* commaVarList ::= var */
      case 150: /* globalVarList ::= globalVar */ yytestcase(yyruleno==150);
      case 156: /* commaExprList ::= expr */ yytestcase(yyruleno==156);
      case 260: /* varPropertyList ::= varProperty */ yytestcase(yyruleno==260);
      case 278: /* argList ::= expr */ yytestcase(yyruleno==278);
#line 1074 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy371 = new AST::expressionList();
    yygotominor.yy371->push_back(yymsp[0].minor.yy136);
}
#line 4627 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 149: /* commaVarList ::= commaVarList T_COMMA var */
      case 151: /* globalVarList ::= globalVarList T_COMMA globalVar */ yytestcase(yyruleno==151);
      case 157: /* commaExprList ::= commaExprList T_COMMA expr */ yytestcase(yyruleno==157);
#line 1079 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yymsp[-2].minor.yy371->push_back(yymsp[0].minor.yy136);
    yygotominor.yy371 = yymsp[-2].minor.yy371;
}
#line 4637 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 152: /* globalVar ::= T_VARIABLE */
#line 1097 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    // strip $
    yygotominor.yy136 = new (CTXT) AST::var(pSourceRange(++(*yymsp[0].minor.yy0).begin(), (*yymsp[0].minor.yy0).end()), CTXT);
    yygotominor.yy136->setLine(CURRENT_LINE);
}
#line 4646 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 153: /* globalVar ::= T_DOLLAR rVar */
#line 1103 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    AST::dynamicID* r = new (CTXT) AST::dynamicID(yymsp[0].minor.yy136);
    r->setLine(CURRENT_LINE);
    yygotominor.yy136 = r;
}
#line 4655 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 154: /* staticVarList ::= T_VARIABLE */
#line 1112 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy371 = new AST::expressionList();
    AST::var* V= new (CTXT) AST::var(pSourceRange(++(*yymsp[0].minor.yy0).begin(), (*yymsp[0].minor.yy0).end()), CTXT);
    V->setLine(CURRENT_LINE);
    yygotominor.yy371->push_back(V);
}
#line 4665 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 155: /* staticVarList ::= staticVarList T_COMMA T_VARIABLE */
#line 1119 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    // strip $
    AST::var* V= new (CTXT) AST::var(pSourceRange(++(*yymsp[0].minor.yy0).begin(), (*yymsp[0].minor.yy0).end()), CTXT);
    V->setLine(CURRENT_LINE);
    yymsp[-2].minor.yy371->push_back(V);
    yygotominor.yy371 = yymsp[-2].minor.yy371;
}
#line 4676 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 158: /* conditionalExpr ::= expr T_QUESTION expr T_COLON expr */
#line 1142 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy220 = new (CTXT) AST::conditionalExpr(yymsp[-4].minor.yy136, yymsp[-2].minor.yy136, yymsp[0].minor.yy136);
    yygotominor.yy220->setLine(CURRENT_LINE);
}
#line 4684 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 159: /* typeCast ::= T_FLOAT_CAST expr */
#line 1150 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy306 = new (CTXT) AST::typeCast(AST::typeCast::REAL, yymsp[0].minor.yy136);
    yygotominor.yy306->setLine(CURRENT_LINE);
}
#line 4692 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 160: /* typeCast ::= T_INT_CAST expr */
#line 1155 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy306 = new (CTXT) AST::typeCast(AST::typeCast::INT, yymsp[0].minor.yy136);
    yygotominor.yy306->setLine(CURRENT_LINE);
}
#line 4700 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 161: /* typeCast ::= T_STRING_CAST expr */
#line 1160 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy306 = new (CTXT) AST::typeCast(AST::typeCast::STRING, yymsp[0].minor.yy136);
    yygotominor.yy306->setLine(CURRENT_LINE);
}
#line 4708 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 162: /* typeCast ::= T_BINARY_CAST expr */
#line 1165 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy306 = new (CTXT) AST::typeCast(AST::typeCast::BINARY, yymsp[0].minor.yy136);
    yygotominor.yy306->setLine(CURRENT_LINE);
}
#line 4716 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 163: /* typeCast ::= T_UNICODE_CAST expr */
#line 1170 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy306 = new (CTXT) AST::typeCast(AST::typeCast::UNICODE, yymsp[0].minor.yy136);
    yygotominor.yy306->setLine(CURRENT_LINE);
}
#line 4724 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 164: /* typeCast ::= T_ARRAY_CAST expr */
#line 1175 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy306 = new (CTXT) AST::typeCast(AST::typeCast::ARRAY, yymsp[0].minor.yy136);
    yygotominor.yy306->setLine(CURRENT_LINE);
}
#line 4732 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 165: /* typeCast ::= T_OBJECT_CAST expr */
#line 1180 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy306 = new (CTXT) AST::typeCast(AST::typeCast::OBJECT, yymsp[0].minor.yy136);
    yygotominor.yy306->setLine(CURRENT_LINE);
}
#line 4740 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 166: /* typeCast ::= T_UNSET_CAST expr */
#line 1185 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy306 = new (CTXT) AST::typeCast(AST::typeCast::UNSET, yymsp[0].minor.yy136);
    yygotominor.yy306->setLine(CURRENT_LINE);
}
#line 4748 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 167: /* typeCast ::= T_BOOL_CAST expr */
#line 1190 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy306 = new (CTXT) AST::typeCast(AST::typeCast::BOOL, yymsp[0].minor.yy136);
    yygotominor.yy306->setLine(CURRENT_LINE);
}
#line 4756 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 170: /* scalar ::= T_IDENTIFIER */
#line 1202 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy136 = new (CTXT) AST::literalConstant(*yymsp[0].minor.yy0, CTXT);
    yygotominor.yy136->setLine(CURRENT_LINE);
}
#line 4764 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 171: /* scalar ::= T_IDENTIFIER T_DBL_COLON T_IDENTIFIER */
#line 1208 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy136 = new (CTXT) AST::literalConstant(*yymsp[0].minor.yy0, CTXT, new (CTXT) AST::literalID(*yymsp[-2].minor.yy0, CTXT));
    yygotominor.yy136->setLine(CURRENT_LINE);
}
#line 4772 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 175: /* staticScalar ::= T_MINUS staticScalar */
#line 1219 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy136 = new (CTXT) AST::unaryOp(yymsp[0].minor.yy136, AST::unaryOp::NEGATIVE);
    yygotominor.yy136->setLine(CURRENT_LINE);
}
#line 4780 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 176: /* literal ::= T_SQ_STRING */
#line 1227 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
  yygotominor.yy387 = extractLiteralString(yymsp[0].minor.yy0, pMod, true);
  yygotominor.yy387->setLine(CURRENT_LINE);
}
#line 4788 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 177: /* literal ::= T_DQ_STRING */
#line 1232 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
  yygotominor.yy387 = extractLiteralString(yymsp[0].minor.yy0, pMod, false);
  yygotominor.yy387->setLine(CURRENT_LINE);
}
#line 4796 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 178: /* literal ::= T_LNUMBER */
#line 1239 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy387 = new (CTXT) AST::literalInt(*yymsp[0].minor.yy0);
    yygotominor.yy387->setLine(CURRENT_LINE);
}
#line 4804 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 179: /* literal ::= T_DNUMBER */
#line 1246 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy387 = new (CTXT) AST::literalFloat(*yymsp[0].minor.yy0);
    yygotominor.yy387->setLine(CURRENT_LINE);    
}
#line 4812 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 180: /* literal ::= T_TRUE */
#line 1253 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy387 = new (CTXT) AST::literalBool(true);
    yygotominor.yy387->setLine(CURRENT_LINE);
}
#line 4820 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 181: /* literal ::= T_FALSE */
#line 1258 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy387 = new (CTXT) AST::literalBool(false);
    yygotominor.yy387->setLine(CURRENT_LINE);
}
#line 4828 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 182: /* literal ::= T_NULL */
#line 1263 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy387 = new (CTXT) AST::literalNull();
    yygotominor.yy387->setLine(CURRENT_LINE);
}
#line 4836 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 183: /* literalMagic ::= T_MAGIC_FILE */
      case 184: /* literalMagic ::= T_MAGIC_LINE */ yytestcase(yyruleno==184);
      case 185: /* literalMagic ::= T_MAGIC_CLASS */ yytestcase(yyruleno==185);
      case 186: /* literalMagic ::= T_MAGIC_METHOD */ yytestcase(yyruleno==186);
      case 187: /* literalMagic ::= T_MAGIC_FUNCTION */ yytestcase(yyruleno==187);
      case 188: /* literalMagic ::= T_MAGIC_NS */ yytestcase(yyruleno==188);
      case 293: /* literalID ::= T_IDENTIFIER */ yytestcase(yyruleno==293);
#line 1270 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy136 = new (CTXT) AST::literalID(*yymsp[0].minor.yy0, CTXT);
    yygotominor.yy136->setLine(CURRENT_LINE);
}
#line 4850 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 189: /* arrayItemList ::= */
#line 1304 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy256 = new AST::arrayList();
}
#line 4857 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 190: /* arrayItemList ::= arrayItems maybeComma */
#line 1308 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy256 = yymsp[-1].minor.yy256;
}
#line 4864 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 193: /* arrayItems ::= expr */
#line 1317 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy256 = new AST::arrayList();
    yygotominor.yy256->push_back(AST::arrayItem(NULL, yymsp[0].minor.yy136, false));
}
#line 4872 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 194: /* arrayItems ::= T_AND expr */
#line 1322 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy256 = new AST::arrayList();
    yygotominor.yy256->push_back(AST::arrayItem(NULL, yymsp[0].minor.yy136, true));
}
#line 4880 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 195: /* arrayItems ::= expr T_ARROWKEY expr */
#line 1327 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy256 = new AST::arrayList();
    yygotominor.yy256->push_back(AST::arrayItem(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, false));
}
#line 4888 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 196: /* arrayItems ::= expr T_ARROWKEY T_AND expr */
#line 1332 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy256 = new AST::arrayList();
    yygotominor.yy256->push_back(AST::arrayItem(yymsp[-3].minor.yy136, yymsp[0].minor.yy136, true));
}
#line 4896 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 197: /* arrayItems ::= arrayItems T_COMMA expr */
#line 1337 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yymsp[-2].minor.yy256->push_back(AST::arrayItem(NULL, yymsp[0].minor.yy136, false));
    yygotominor.yy256 = yymsp[-2].minor.yy256;
}
#line 4904 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 198: /* arrayItems ::= arrayItems T_COMMA T_AND expr */
#line 1342 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yymsp[-3].minor.yy256->push_back(AST::arrayItem(NULL, yymsp[0].minor.yy136, true));
    yygotominor.yy256 = yymsp[-3].minor.yy256;
}
#line 4912 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 199: /* arrayItems ::= arrayItems T_COMMA expr T_ARROWKEY expr */
#line 1347 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yymsp[-4].minor.yy256->push_back(AST::arrayItem(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, false));
    yygotominor.yy256 = yymsp[-4].minor.yy256;
}
#line 4920 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 200: /* arrayItems ::= arrayItems T_COMMA expr T_ARROWKEY T_AND expr */
#line 1352 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yymsp[-5].minor.yy256->push_back(AST::arrayItem(yymsp[-3].minor.yy136, yymsp[0].minor.yy136, true));
    yygotominor.yy256 = yymsp[-5].minor.yy256;
}
#line 4928 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 201: /* literalArray ::= T_ARRAY T_LEFTPAREN arrayItemList T_RIGHTPAREN */
#line 1360 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy387 = new (CTXT) AST::literalArray(yymsp[-1].minor.yy256);
    yygotominor.yy387->setLine(TOKEN_LINE(yymsp[-3].minor.yy0));
    delete yymsp[-1].minor.yy256; // deletes the vector, NOT the exprs in it!
}
#line 4937 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 202: /* unaryOp ::= T_PLUS expr */
#line 1369 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy57 = new (CTXT) AST::unaryOp(yymsp[0].minor.yy136, AST::unaryOp::POSITIVE);
    yygotominor.yy57->setLine(CURRENT_LINE);
}
#line 4945 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 203: /* unaryOp ::= T_MINUS expr */
#line 1374 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy57 = new (CTXT) AST::unaryOp(yymsp[0].minor.yy136, AST::unaryOp::NEGATIVE);
    yygotominor.yy57->setLine(CURRENT_LINE);
}
#line 4953 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 204: /* unaryOp ::= T_BOOLEAN_NOT expr */
#line 1379 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy57 = new (CTXT) AST::unaryOp(yymsp[0].minor.yy136, AST::unaryOp::LOGICALNOT);
    yygotominor.yy57->setLine(CURRENT_LINE);
}
#line 4961 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 205: /* unaryOp ::= T_TILDE expr */
#line 1384 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy57 = new (CTXT) AST::unaryOp(yymsp[0].minor.yy136, AST::unaryOp::BITWISENOT);
    yygotominor.yy57->setLine(CURRENT_LINE);
}
#line 4969 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 206: /* binaryOp ::= expr T_DOT expr */
#line 1391 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::CONCAT);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 4977 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 207: /* binaryOp ::= expr T_BOOLEAN_AND expr */
      case 208: /* binaryOp ::= expr T_BOOLEAN_AND_LIT expr */ yytestcase(yyruleno==208);
#line 1396 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::BOOLEAN_AND);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 4986 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 209: /* binaryOp ::= expr T_BOOLEAN_OR expr */
      case 210: /* binaryOp ::= expr T_BOOLEAN_OR_LIT expr */ yytestcase(yyruleno==210);
#line 1406 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::BOOLEAN_OR);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 4995 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 211: /* binaryOp ::= expr T_BOOLEAN_XOR_LIT expr */
#line 1416 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::BOOLEAN_XOR);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 5003 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 212: /* binaryOp ::= expr T_DIV expr */
#line 1421 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::DIV);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 5011 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 213: /* binaryOp ::= expr T_MOD expr */
#line 1426 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::MOD);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 5019 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 214: /* binaryOp ::= expr T_MULT expr */
#line 1431 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::MULT);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 5027 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 215: /* binaryOp ::= expr T_PLUS expr */
#line 1436 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::ADD);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 5035 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 216: /* binaryOp ::= expr T_MINUS expr */
#line 1441 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::SUB);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 5043 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 217: /* binaryOp ::= expr T_GREATER_THAN expr */
#line 1446 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::GREATER_THAN);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 5051 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 218: /* binaryOp ::= expr T_LESS_THAN expr */
#line 1451 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::LESS_THAN);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 5059 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 219: /* binaryOp ::= expr T_GREATER_OR_EQUAL expr */
#line 1456 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::GREATER_OR_EQUAL);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 5067 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 220: /* binaryOp ::= expr T_LESS_OR_EQUAL expr */
#line 1461 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::LESS_OR_EQUAL);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 5075 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 221: /* binaryOp ::= expr T_EQUAL expr */
#line 1466 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::EQUAL);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 5083 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 222: /* binaryOp ::= expr T_NOT_EQUAL expr */
#line 1471 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::NOT_EQUAL);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 5091 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 223: /* binaryOp ::= expr T_IDENTICAL expr */
#line 1476 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::IDENTICAL);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 5099 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 224: /* binaryOp ::= expr T_NOT_IDENTICAL expr */
#line 1481 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::NOT_IDENTICAL);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 5107 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 225: /* binaryOp ::= expr T_CARET expr */
#line 1486 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::BIT_XOR);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 5115 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 226: /* binaryOp ::= expr T_PIPE expr */
#line 1491 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::BIT_OR);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 5123 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 227: /* binaryOp ::= expr T_AND expr */
#line 1496 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::BIT_AND);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 5131 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 228: /* binaryOp ::= expr T_SL expr */
#line 1501 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::SHIFT_LEFT);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 5139 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 229: /* binaryOp ::= expr T_SR expr */
#line 1506 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::SHIFT_RIGHT);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 5147 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 230: /* binaryOp ::= expr T_INSTANCEOF maybeDynamicID */
#line 1511 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy461 = new (CTXT) AST::binaryOp(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::binaryOp::INSTANCEOF);
    yygotominor.yy461->setLine(CURRENT_LINE);
}
#line 5155 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 231: /* preOp ::= T_INC var */
#line 1519 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy289 = new (CTXT) AST::preOp(yymsp[0].minor.yy136, AST::preOp::INC);
    yygotominor.yy289->setLine(CURRENT_LINE);
}
#line 5163 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 232: /* preOp ::= T_DEC var */
#line 1524 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy289 = new (CTXT) AST::preOp(yymsp[0].minor.yy136, AST::preOp::DEC);
    yygotominor.yy289->setLine(CURRENT_LINE);
}
#line 5171 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 233: /* postOp ::= var T_INC */
#line 1530 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy44 = new (CTXT) AST::postOp(yymsp[-1].minor.yy136, AST::postOp::INC);
    yygotominor.yy44->setLine(CURRENT_LINE);
}
#line 5179 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 234: /* postOp ::= var T_DEC */
#line 1535 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy44 = new (CTXT) AST::postOp(yymsp[-1].minor.yy136, AST::postOp::DEC);
    yygotominor.yy44->setLine(CURRENT_LINE);
}
#line 5187 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 235: /* assignment ::= var T_ASSIGN expr */
#line 1543 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy178 = new (CTXT) AST::assignment(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, false);
    yygotominor.yy178->setLine(TOKEN_LINE(yymsp[-1].minor.yy0));
}
#line 5195 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 236: /* assignment ::= var T_ASSIGN T_AND var */
#line 1548 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy178 = new (CTXT) AST::assignment(yymsp[-3].minor.yy136, yymsp[0].minor.yy136, true);
    yygotominor.yy178->setLine(TOKEN_LINE(yymsp[-1].minor.yy0));
}
#line 5203 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 237: /* assignment ::= var T_ASSIGN T_AND functionInvoke */
      case 238: /* assignment ::= var T_ASSIGN T_AND constructorInvoke */ yytestcase(yyruleno==238);
#line 1553 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy178 = new (CTXT) AST::assignment(yymsp[-3].minor.yy136, yymsp[0].minor.yy415, true);
    yygotominor.yy178->setLine(TOKEN_LINE(yymsp[-1].minor.yy0));
}
#line 5212 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 239: /* opAssignment ::= var T_AND_EQUAL expr */
#line 1565 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy209 = new (CTXT) AST::opAssignment(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::opAssignment::AND);
    yygotominor.yy209->setLine(TOKEN_LINE(yymsp[-1].minor.yy0));
}
#line 5220 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 240: /* opAssignment ::= var T_OR_EQUAL expr */
#line 1570 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy209 = new (CTXT) AST::opAssignment(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::opAssignment::OR);
    yygotominor.yy209->setLine(TOKEN_LINE(yymsp[-1].minor.yy0));
}
#line 5228 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 241: /* opAssignment ::= var T_XOR_EQUAL expr */
#line 1575 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy209 = new (CTXT) AST::opAssignment(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::opAssignment::XOR);
    yygotominor.yy209->setLine(TOKEN_LINE(yymsp[-1].minor.yy0));
}
#line 5236 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 242: /* opAssignment ::= var T_CONCAT_EQUAL expr */
#line 1580 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy209 = new (CTXT) AST::opAssignment(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::opAssignment::CONCAT);
    yygotominor.yy209->setLine(TOKEN_LINE(yymsp[-1].minor.yy0));
}
#line 5244 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 243: /* opAssignment ::= var T_DIV_EQUAL expr */
#line 1585 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy209 = new (CTXT) AST::opAssignment(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::opAssignment::DIV);
    yygotominor.yy209->setLine(TOKEN_LINE(yymsp[-1].minor.yy0));
}
#line 5252 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 244: /* opAssignment ::= var T_MUL_EQUAL expr */
#line 1590 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy209 = new (CTXT) AST::opAssignment(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::opAssignment::MULT);
    yygotominor.yy209->setLine(TOKEN_LINE(yymsp[-1].minor.yy0));
}
#line 5260 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 245: /* opAssignment ::= var T_PLUS_EQUAL expr */
#line 1595 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy209 = new (CTXT) AST::opAssignment(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::opAssignment::ADD);
    yygotominor.yy209->setLine(TOKEN_LINE(yymsp[-1].minor.yy0));
}
#line 5268 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 246: /* opAssignment ::= var T_MINUS_EQUAL expr */
#line 1600 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy209 = new (CTXT) AST::opAssignment(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::opAssignment::SUB);
    yygotominor.yy209->setLine(TOKEN_LINE(yymsp[-1].minor.yy0));
}
#line 5276 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 247: /* opAssignment ::= var T_MOD_EQUAL expr */
#line 1605 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy209 = new (CTXT) AST::opAssignment(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::opAssignment::MOD);
    yygotominor.yy209->setLine(TOKEN_LINE(yymsp[-1].minor.yy0));
}
#line 5284 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 248: /* opAssignment ::= var T_SL_EQUAL expr */
#line 1610 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy209 = new (CTXT) AST::opAssignment(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::opAssignment::SHIFT_LEFT);
    yygotominor.yy209->setLine(TOKEN_LINE(yymsp[-1].minor.yy0));
}
#line 5292 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 249: /* opAssignment ::= var T_SR_EQUAL expr */
#line 1615 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy209 = new (CTXT) AST::opAssignment(yymsp[-2].minor.yy136, yymsp[0].minor.yy136, AST::opAssignment::SHIFT_RIGHT);
    yygotominor.yy209->setLine(TOKEN_LINE(yymsp[-1].minor.yy0));
}
#line 5300 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 250: /* listAssignment ::= T_LIST T_LEFTPAREN listAssignmentList T_RIGHTPAREN T_ASSIGN expr */
#line 1622 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    AST::block* varList = new (CTXT) AST::block(CTXT, yymsp[-3].minor.yy16);
    yygotominor.yy116 = new (CTXT) AST::listAssignment(varList, yymsp[0].minor.yy136);
    yygotominor.yy116->setLine(TOKEN_LINE(yymsp[-5].minor.yy0));
    delete yymsp[-3].minor.yy16;
}
#line 5310 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 251: /* listAssignmentList ::= listElement */
#line 1631 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy16 = new AST::statementList();
    yygotominor.yy16->push_back(yymsp[0].minor.yy477);
}
#line 5318 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 252: /* listAssignmentList ::= listAssignmentList T_COMMA listElement */
#line 1636 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yymsp[-2].minor.yy16->push_back(yymsp[0].minor.yy477);
    yygotominor.yy16 = yymsp[-2].minor.yy16;
}
#line 5326 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 253: /* listElement ::= var */
#line 1643 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy477 = yymsp[0].minor.yy136; }
#line 5331 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 254: /* listElement ::= T_LIST T_LEFTPAREN listAssignmentList T_RIGHTPAREN */
#line 1646 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    AST::block* varList = new (CTXT) AST::block(CTXT, yymsp[-1].minor.yy16);
    yygotominor.yy477 = static_cast<AST::stmt*>(varList);
    delete yymsp[-1].minor.yy16;
}
#line 5340 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 258: /* var ::= varWithFunCalls varPropertyList */
#line 1686 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
  for (AST::expressionList::iterator i = yymsp[0].minor.yy371->begin();
       i != yymsp[0].minor.yy371->end();
       ++i) {

      AST::var* v = dyn_cast<AST::var>(*i);
      if (v) {
          v->setTarget(yymsp[-1].minor.yy136);
          // XXX phc checks for function params attribute here and
          // makes a new method call if it finds them, otherwise returning the var
          // we just do the var here so far
          yymsp[-1].minor.yy136 = v;
      }
      else {
          AST::functionInvoke* f = dyn_cast<AST::functionInvoke>(*i);
          assert(f && "expected function invoke");
          f->setTarget(yymsp[-1].minor.yy136);
          yymsp[-1].minor.yy136 = f;
      }

  }
  yygotominor.yy136 = yymsp[-1].minor.yy136;

}
#line 5368 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 259: /* varPropertyList ::= varPropertyList varProperty */
#line 1713 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yymsp[-1].minor.yy371->push_back(yymsp[0].minor.yy136);
    yygotominor.yy371 = yymsp[-1].minor.yy371;
}
#line 5376 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 261: /* varProperty ::= T_CLASSDEREF objProperty maybeMethodInvoke */
#line 1745 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    if (yymsp[0].minor.yy371) {
        // XXX phc checks for array indices on yymsp[-1].minor.yy250
        AST::functionInvoke* f = new (CTXT) AST::functionInvoke(new (CTXT) AST::literalID(yymsp[-1].minor.yy250->name(), CTXT), CTXT, yymsp[0].minor.yy371);        
        yygotominor.yy136 = f;
        // yymsp[-1].minor.yy250 is now orphaned
        yymsp[-1].minor.yy250->destroy(CTXT);
    }
    else {
        // var
        yygotominor.yy136 = yymsp[-1].minor.yy250;
    }
}
#line 5393 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 262: /* maybeMethodInvoke ::= T_LEFTPAREN argList T_RIGHTPAREN */
#line 1761 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy371 = yymsp[-1].minor.yy371;
}
#line 5400 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 263: /* maybeMethodInvoke ::= */
#line 1764 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy371  = NULL; }
#line 5405 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 264: /* varNoObjects ::= refVar */
#line 1767 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy250 = yymsp[0].minor.yy250; }
#line 5410 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 265: /* varNoObjects ::= varVar refVar */
#line 1769 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yymsp[0].minor.yy250->setIndirectionCount(*yymsp[-1].minor.yy373);
    delete yymsp[-1].minor.yy373;
    yygotominor.yy250 = yymsp[0].minor.yy250;
}
#line 5419 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 266: /* staticMember ::= T_IDENTIFIER T_DBL_COLON varNoObjects */
#line 1778 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yymsp[0].minor.yy250->setTarget(new (CTXT) AST::literalID(*yymsp[-2].minor.yy0, CTXT));
    yygotominor.yy136 = yymsp[0].minor.yy250;
}
#line 5427 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 269: /* baseVar ::= varNoObjects */
#line 1788 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy136 = yymsp[0].minor.yy250; }
#line 5432 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 271: /* refVar ::= T_VARIABLE */
#line 1793 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    // strip $
    yygotominor.yy250 = new (CTXT) AST::var(pSourceRange(++(*yymsp[0].minor.yy0).begin(), (*yymsp[0].minor.yy0).end()), CTXT);
    yygotominor.yy250->setLine(CURRENT_LINE);
}
#line 5441 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 272: /* refVar ::= T_VARIABLE arrayIndices */
#line 1799 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    // strip $
    yygotominor.yy250 = new (CTXT) AST::var(pSourceRange(++(*yymsp[-1].minor.yy0).begin(), (*yymsp[-1].minor.yy0).end()), CTXT, yymsp[0].minor.yy371);
    yygotominor.yy250->setLine(CURRENT_LINE);
    delete yymsp[0].minor.yy371;
}
#line 5451 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 273: /* objProperty ::= T_IDENTIFIER */
#line 1810 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy250 = new (CTXT) AST::var(*yymsp[0].minor.yy0, CTXT);
    yygotominor.yy250->setLine(CURRENT_LINE);
}
#line 5459 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 274: /* objProperty ::= T_IDENTIFIER arrayIndices */
#line 1815 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy250 = new (CTXT) AST::var(*yymsp[-1].minor.yy0, CTXT, yymsp[0].minor.yy371);
    yygotominor.yy250->setLine(CURRENT_LINE);
    delete yymsp[0].minor.yy371;
}
#line 5468 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 275: /* objProperty ::= varNoObjects */
#line 1822 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yymsp[0].minor.yy250->setIndirectionCount(1);
    yygotominor.yy250 = yymsp[0].minor.yy250;
}
#line 5476 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 276: /* varVar ::= T_DOLLAR */
#line 1829 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ yygotominor.yy373 = new pUInt(1); }
#line 5481 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 277: /* varVar ::= varVar T_DOLLAR */
#line 1830 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{ (*yymsp[-1].minor.yy373)++; yygotominor.yy373 = yymsp[-1].minor.yy373; }
#line 5486 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 279: /* argList ::= expr T_COMMA argList */
#line 1840 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yymsp[0].minor.yy371->push_back(yymsp[-2].minor.yy136);
    yygotominor.yy371 = yymsp[0].minor.yy371;
}
#line 5494 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 280: /* argList ::= */
#line 1845 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy371 = new AST::expressionList();
}
#line 5501 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 281: /* arrayIndices ::= T_LEFTSQUARE expr T_RIGHTSQUARE */
      case 282: /* arrayIndices ::= T_LEFTCURLY expr T_RIGHTCURLY */ yytestcase(yyruleno==282);
#line 1852 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy371 = new AST::expressionList();
    yygotominor.yy371->push_back(yymsp[-1].minor.yy136);
}
#line 5510 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 283: /* arrayIndices ::= arrayIndices T_LEFTSQUARE expr T_RIGHTSQUARE */
#line 1862 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yymsp[-3].minor.yy371->push_back(yymsp[-1].minor.yy136);
    yygotominor.yy371 = yymsp[-3].minor.yy371;
}
#line 5518 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 284: /* arrayIndices ::= arrayIndices T_LEFTCURLY expr T_RIGHTCURLY */
#line 1867 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    // XXX unparse needs to know curly
    yymsp[-3].minor.yy371->push_back(yymsp[-1].minor.yy136);
    yygotominor.yy371 = yymsp[-3].minor.yy371;
}
#line 5527 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 285: /* arrayIndices ::= T_LEFTSQUARE T_RIGHTSQUARE */
#line 1873 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy371 = new AST::expressionList();    
    AST::stmt* noop = new (CTXT) AST::emptyStmt();
    yygotominor.yy371->push_back(static_cast<AST::expr*>(noop));
}
#line 5536 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 286: /* arrayIndices ::= arrayIndices T_LEFTSQUARE T_RIGHTSQUARE */
#line 1879 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    AST::stmt* noop = new (CTXT) AST::emptyStmt();
    yymsp[-2].minor.yy371->push_back(static_cast<AST::expr*>(noop));
    yygotominor.yy371 = yymsp[-2].minor.yy371;
}
#line 5545 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 287: /* functionInvoke ::= maybeDynamicID T_LEFTPAREN argList T_RIGHTPAREN */
      case 291: /* constructorInvoke ::= T_NEW maybeDynamicID T_LEFTPAREN argList T_RIGHTPAREN */ yytestcase(yyruleno==291);
#line 1889 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy415 = new (CTXT) AST::functionInvoke(yymsp[-3].minor.yy136, // f name
                                       CTXT,
                                       yymsp[-1].minor.yy371  // expression list: arguments, copied
                                       );
    yygotominor.yy415->setLine(CURRENT_LINE);
    delete yymsp[-1].minor.yy371;
}
#line 5558 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 288: /* functionInvoke ::= T_IDENTIFIER T_DBL_COLON T_IDENTIFIER T_LEFTPAREN argList T_RIGHTPAREN */
#line 1899 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy415 = new (CTXT) AST::functionInvoke(new (CTXT) AST::literalID(*yymsp[-3].minor.yy0, CTXT), // f name
                                       CTXT,
                                       yymsp[-1].minor.yy371,  // expression list: arguments, copied
                                       new (CTXT) AST::literalID(*yymsp[-5].minor.yy0, CTXT)
                                       );
    yygotominor.yy415->setLine(CURRENT_LINE);
    delete yymsp[-1].minor.yy371;
}
#line 5571 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 289: /* functionInvoke ::= T_IDENTIFIER T_DBL_COLON varNoObjects T_LEFTPAREN argList T_RIGHTPAREN */
#line 1909 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy415 = new (CTXT) AST::functionInvoke(yymsp[-3].minor.yy250, // f name
                                       CTXT,
                                       yymsp[-1].minor.yy371,  // expression list: arguments, copied
                                       new (CTXT) AST::literalID(*yymsp[-5].minor.yy0, CTXT)
                                       );
    yygotominor.yy415->setLine(CURRENT_LINE);
    delete yymsp[-1].minor.yy371;
}
#line 5584 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 290: /* functionInvoke ::= varNoObjects T_LEFTPAREN argList T_RIGHTPAREN */
#line 1919 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy415 = new (CTXT) AST::functionInvoke(yymsp[-3].minor.yy250, // f name
                                       CTXT,
                                       yymsp[-1].minor.yy371  // expression list: arguments, copied
                                       );
    yygotominor.yy415->setLine(CURRENT_LINE);
    delete yymsp[-1].minor.yy371;
}
#line 5596 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 292: /* constructorInvoke ::= T_NEW maybeDynamicID */
#line 1941 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy415 = new (CTXT) AST::functionInvoke(yymsp[0].minor.yy136, // f name
                                       CTXT
                                       );
    yygotominor.yy415->setLine(CURRENT_LINE);
}
#line 5606 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      case 295: /* maybeDynamicID ::= baseVar */
#line 1962 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
{
    yygotominor.yy136 = new (CTXT) AST::dynamicID(yymsp[0].minor.yy136);
    yygotominor.yy136->setLine(CURRENT_LINE);
}
#line 5614 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
        break;
      default:
      /* (63) caseSeparator ::= T_COLON */ yytestcase(yyruleno==63);
      /* (64) caseSeparator ::= T_SEMI */ yytestcase(yyruleno==64);
      /* (174) staticScalar ::= T_PLUS staticScalar */ yytestcase(yyruleno==174);
      /* (191) maybeComma ::= T_COMMA */ yytestcase(yyruleno==191);
      /* (192) maybeComma ::= */ yytestcase(yyruleno==192);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  rphpParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  rphpParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  rphpParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 208 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.y"
  
  CTXT.parseError(TOKEN);
#line 5684 "/home/weyrick/workspace/corvus/build/compiler/analysis/rphp_grammar.cpp"
  rphpParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  rphpParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  rphpParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "rphpParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void rphpParse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  rphpParseTOKENTYPE yyminor       /* The value for the token */
  rphpParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  rphpParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
